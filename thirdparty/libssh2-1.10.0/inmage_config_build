#!/bin/sh

# check command line option for --help
if [ "$1" = "--help" ] ; then 
	 echo " "
	 echo "inmage_config_build [--help | --clean] "
	 echo " "
	 echo "Configures and builds the libssh2 third party package."
	 echo " "
	 echo " clean : cleans (deletes) all build and configuration outputs."
	 echo "         You will need to rerun inmage_config_build to regenreate all the data"
	 echo "         This maybe needed if their is a failure during the initial config build"
	 echo " --help: display this message"
	 echo " "
	 exit 0
fi

# go to correct directory
DIR=`dirname $0`
cd "$DIR"

# play it safe and make sure confugre is executable
chmod 777 ./configure

# get the specific distro version and gcc version that will be used to create the final lib dirs
if [ "" = "$X_SPECIFIC" ] ; then 
	 SPECIFIC_VERSION=`../../host/get-specific-version-info`
else
	 SPECIFIC_VERSION="$X_SPECIFIC"
fi

# check command line option for --clean
if [ "$1" = "--clean" ] ; then 
	 if [ -d config_release ] ; then 
		  cd config_release
		  gmake distclean
		  cd ..
	 fi
	 if [ -d config_debug ] ; then
		  cd config_debug
		  gmake distclean
		  cd ..
	 fi
	 rm -Rf config_release config_debug lib/${SPECIFIC_VERSION}/release/* lib/${SPECIFIC_VERSION}/debug/*
	 exit 0
fi

# set up default compiler options
if [ "" = "$X_ARCH" ] ; then 
	 SYSTEM=`uname`
else
	 SYSTEM="$X_ARCH"
fi

case $SYSTEM in
	 SunOS)
		  NOSSE2=
		  BITS=`isainfo -b`
		  if [ "64" = "${BITS}" ] ; then
			USE64BIT=-m64
		  else
			USE64BIt=
		  fi
		  PTHREAD=-pthreads
		  LPTHREAD=-lpthread
		  SYMTAB_FLAG=-gdwarf-2
		  TSFLAG=
		  ;;
	 Linux)
		  NOSSE2=-mno-sse2
		  USE64BIT=
		  PTHREAD=-pthread
		  LPTHREAD=-lpthread
		  LDL=-ldl
		  SYMTAB_FLAG=-g
		  TSFLAG=
		  ;;
	AIX)
		  NOSSE2=
		  BITS=`bootinfo -K`
		  if [ "64" = ${BITS} ] ; then
			USE64BIT=-maix64
			OBJECT_MODE=64
			export OBJECT_MODE
		  else
			USE64BIT=
		  fi

		  IPV6='--disable-ipv6'
		  PTHREAD=-pthread
		  LPTHREAD=-lpthread
		  SYMTAB_FLAG=-gxcoff
		  TSFLAG=-DTHREAD_SAFE
		  ;;
	 *)
		  echo "ERROR running $0 (in $DIR/)"
		  echo "  platform $SYSTEM not supported yet"
		  echo "  see inmage-make-system-users-guid.txt for details on adding support"
		  exit 1
		  ;;
esac		  

# Finding the architecture and placing the zlib.a , libssl.a and libcrypto.a from the path
# thirpadrty_path/zlib/specific_version/debug/ and 
# thirpadrty_path/zlib/specific_version/release

case `uname -s` in
	SunOS)
		OS_ARCH=SunOS
	;;
	AIX)
		OS_ARCH=AIX
	;;
	Linux)
		case `uname -m` in
			i686|i586|i386)
				OS_ARCH=Linux_i686
			;;
			x86_64)
				OS_ARCH=Linux_x86_64
			;;
		esac
	
	;;	
esac

# set up defaults that will be used to pass on to configure
DEFAULT_CFLAGS="-D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -D_FILE_OFFSET_BITS=64 -DLIBSSH2_OPENSSL ${NOSSE2} ${USE64BIT} ${PTHREAD} ${SYMTAB_FLAG} ${TSFLAG}"

# create dirs as needed
mkdir -p lib
mkdir -p lib/${SPECIFIC_VERSION}
mkdir -p lib/${SPECIFIC_VERSION}/release
mkdir -p lib/${SPECIFIC_VERSION}/debug
mkdir -p config_release
mkdir -p config_debug

# configure debug
cd config_debug

CWD=`pwd`
cd ../../
THIRDPARTY_PATH=`pwd`
cd $CWD

. ${THIRDPARTY_PATH}/../build/scripts/general/OS_details.sh

INCOPENSSLDIR=-I${THIRDPARTY_PATH}/openssl-1.1.1n/include
if [ "${OS}" = "SLES11-64" ]; then
	LIBPATH="lib64"
else
	LIBPATH="lib"
fi

mkdir -p ../../zlib-1.2.12/bin/${OS_ARCH}/${LIBPATH}
mkdir -p ../../openssl-1.1.1n/bin/${OS_ARCH}/${LIBPATH}

cp ../../zlib-1.2.12/lib/${SPECIFIC_VERSION}/debug/libz.a ../../zlib-1.2.12/bin/${OS_ARCH}/${LIBPATH}
cp ../../openssl-1.1.1n/lib/${SPECIFIC_VERSION}/debug/libcrypto.a ../../openssl-1.1.1n/bin/${OS_ARCH}/${LIBPATH}
cp ../../openssl-1.1.1n/lib/${SPECIFIC_VERSION}/debug/libssl.a ../../openssl-1.1.1n/bin/${OS_ARCH}/${LIBPATH}

if [ `uname` = "AIX" ]; then
	LIBSSL_PATH=${THIRDPARTY_PATH}/openssl-1.1.1n/bin/${OS_ARCH}/lib
else
	LIBSSL_PATH=${THIRDPARTY_PATH}/openssl-1.1.1n/bin/${OS_ARCH}/
fi

LDFLAGS="${USE64BIT} ${PTHREAD} ${LPTHREAD} ${LDL} -L${LIBSSL_PATH}/${LIBPATH}"
export LDFLAGS

if [ ! -f ran_config ] ; then 
	 if [ -f Makefile ] ; then
		  gmake distclean
	 fi
	 CFLAGS="-DDEBUG -g -O0 ${DEFAULT_CFLAGS} ${INCOPENSSLDIR}"
	 export CFLAGS
	 ../configure --enable-debug=yes --with-libssl-prefix=${LIBSSL_PATH} --with-libz-prefix=${THIRDPARTY_PATH}/zlib-1.2.12/bin/${OS_ARCH} -enable-static=yes --enable-shared=no 
	 if [ 0 -ne $? ] ; then 
		  # possible had configure run in the top level dir, try to clean and re-run configure
		  cd ..
		  gmake distclean
		  cd config_debug
		  ../configure --enable-debug=yes --with-libssl-prefix=${LIBSSL_PATH} --with-libz-prefix=${THIRDPARTY_PATH}/zlib-1.2.12/bin/${OS_ARCH} -enable-static=yes --enable-shared=no 
		  if [ 0 -ne $? ] ; then 
				echo "error configuring libssh2"
				exit 1
		  fi		  
	 fi
	 touch ran_config
fi

# build debug
gmake

# copy files to final destination
cp ./src/.libs/libssh2.a ../lib/${SPECIFIC_VERSION}/debug

# back to top level of current package
cd ..

# configure release
cd config_release

cp ../../zlib-1.2.12/lib/${SPECIFIC_VERSION}/release/libz.a ../../zlib-1.2.12/bin/${OS_ARCH}/lib
cp ../../openssl-1.1.1n/lib/${SPECIFIC_VERSION}/release/libcrypto.a ../../openssl-1.1.1n/bin/${OS_ARCH}/lib
cp ../../openssl-1.1.1n/lib/${SPECIFIC_VERSION}/release/libssl.a ../../openssl-1.1.1n/bin/${OS_ARCH}/lib

if [ ! -f ran_config ] ; then 
	 if [ -f Makefile ] ; then
		  gmake distclean
	 fi
         CFLAGS="-DNDEBUG -O2 ${DEFAULT_CFLAGS} ${INCOPENSSLDIR}"
         export CFLAGS
	 ../configure --enable-debug=no --with-libssl-prefix=${LIBSSL_PATH} --with-libz-prefix=${THIRDPARTY_PATH}/zlib-1.2.12/bin/${OS_ARCH} -enable-static=yes --enable-shared=no 
	 if [ 0 -ne $? ] ; then 
		  # possible had configure run in the top level dir, try to clean and re-run configure
		  cd ..
		  gmake distclean
		  cd config_release
		  ../configure --enable-debug=no --with-libssl-prefix=${LIBSSL_PATH} --with-libz-prefix=${THIRDPARTY_PATH}/zlib-1.2.12/bin/${OS_ARCH} -enable-static=yes --enable-shared=no 
		  if [ 0 -ne $? ] ; then 
				echo "error configuring libssh2"
				exit 1
		  fi		  
	 fi
	 touch ran_config
fi

# bild release
gmake

# copy files to final destination
cp ./src/.libs/libssh2.a ../lib/${SPECIFIC_VERSION}/release

exit 0
