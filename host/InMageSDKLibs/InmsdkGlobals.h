//This header is common, and included in all the cpp files in this project
//So the common functionality can be declared here.
#ifndef INMSDK__GLOBALS__H
#define INMSDK__GLOBALS__H

#include <string>
#include <map>
#include <list>
#include <vector>


typedef enum INM_ERROR {
    E_FUNCTION_NOT_EXECUTED = -7,
    E_UNKNOWN = -6,
    E_INTERNAL,
    E_FUNCTION_NOT_SUPPORTED,
    E_AUTHORIZATION,
    E_AUTHENTICATION,
    E_FORMAT,
    E_SUCCESS = 0,
    E_INSUFFICIENT_PARAMS,
    E_WRONG_PARAM,
    E_NO_DATA_FOUND,
    E_INSUFFICIENT_BUFFER_SIZE,
    /*
    4-10 are reserved
    */
    E_UNKNOWN_FUNCTION,

    //HOST(11-100)

    E_NO_AGENT_WITH_GIUD = 11,
    E_HOST_UNDER_PRETECTION,
    E_NO_HOST_WITH_THE_NAME,
    E_NO_HOST_WITH_THE_IP,
    E_NO_HOSTS_FOUND,
    E_NO_HOST_WITH_THE_GUID,
    E_HOST_NOT_UNDER_PROTECTION,
    E_SERVICE_RUNNING,
    E_NO_FREESPACE,
    //VOLUMES(101-200)
    E_ENUMARATE_VOLUMES = 101,
    E_BOOT_VOLUME_CANNOT_EXCLUDE = 102,
    E_VOLUME_PROTECTION_INTACT = 103,
    E_NO_VOLUME_WITH_THE_NAME = 104,
    E_VOLUME_NOT_PROTECTED = 105, 
    E_VOLUME_NOT_ELIGIBLE_DUE_TO_LESS_CAPACITY = 106, 
    E_SYSTEM_VOLUME_CANNOT_EXCLUDE = 107,
    E_EXCLUDED_VOLUME_DOESNT_EXIST_ON_SYSTEM = 108,
    E_VOLUME_ALREADY_PAUSED = 109, 
    E_VOLUME_TRACKING_NOT_PAUSED = 110,
    E_PHYSICALSNAPSHOT_TARGET_SAME_AS_SOURCE_VOLUME = 111,
    E_PHYSICALSNAPSHOT_TARGET_IS_PROTECTED_VOLUME = 112,
    E_PHYSICALSNAPSHOT_TARGET_IS_INUSE = 113, 
    E_NO_VOLUMES_FOUND_FOR_SYSTEM = 114,
    E_MOUNT_POINT_ALREADY_INUSE = 115, 
    E_MOUNT_POINT_BASE_VOLUME_DOESNT_EXIST = 116,
    E_MOUNT_POINT_BASE_IS_NON_PHYSICAL_DEVICE = 117,
    E_VOLUME_STATE_UNRESUMABLE = 118,
    E_VOLUME_ALREADY_PROTECTED = 119,
	E_VOLUME_HAS_MOUNTPOINTS = 120,
    E_VOLUME_ALREADY_PAUSE_TRACKED = 121,
    E_VOLUME_NOT_OUTOFSYNC = 122,
	E_VOLUME_HAVING_MULTIPLE_ACCESS_POINTS = 123,
    E_NO_VOLUME_ELIGIBLE_FOR_ISSUE_CONSISTENCY = 124,
    E_VOLUME_QUEUED_FOR_RESYNC = 126,
    E_VOLUME_RAW = 127,    
    E_QUEUED_VOLUME_NOT_PROTECTED = 128,
    E_QUEUED_VOLUME_NOT_PAUSED = 129,
    E_VOLUME_RESIZED = 130,    
    //Errors related to Volume info xml parsing(150 - 200)
    E_INVALID_VOLUME_GUID = 150,
    E_INVALID_VOLUME_CAPCITY,
    E_MISSING_XML_FILE_NAME,
    E_PARSING_XML_FILE,
    E_REPOSITORY_VOLUME_CANNOTBE_PROTECTED,
	E_SAMEREPOSITORY_PROTECTEDVOL_DISK,
    //REPOSITORY(201-300)

    E_REPO_VOL_HAS_INSUCCICIENT_STORAGE = 201,
    E_NO_REPO_CONFIGERED = 202,
    E_NO_REPO_DEVICE_FOUND = 203 ,
    E_REPO_NAME_ALREADY_EXIST = 204,
    E_STORAGE_PATH_NOT_FOUND = 205,
    E_NO_REPO_WITH_THE_NAME = 206,
    E_REPO_ALREADY_CONFIGURED = 214,
    E_REPO_CREATION_INPROGRESS = 215, 
    E_REPO_UNSUPPORTED_SECTORSIZE = 216,
    //VM METADAT(301-400)

    E_NO_METADATA_FOUND = 301,

    //RESTORE(401-500)

    E_NO_RESTORE_POINT = 401,
    E_NO_COMMON_CONS_PNT_FOR_ALL_VOLS = 402,
    E_NO_RECOVERY_WITH_COMMON_TIME_FOR_ALL_VOLS = 403 ,
    E_NO_CONS_RESTORE_POINT = 404 ,
    E_NO_RENT_TIME_RANGE_WITH_GUARANTEED_ACCURACY = 405,

    //PROTECTION(501-600)

    E_NO_PROTECTIONS = 501,
    E_PROTECTIONS_FOUND = 502,
    E_DELETE_PROTECTION_INPROGRESS = 503,
    E_NO_VOLUME_OUTOFSYNC = 504,
    E_SYSTEM_PROTECTION_INTACT = 505,
    E_SYSTEM_ALREADY_PAUSED = 506,
	E_SYSTEM_RECOVERY_NOT_POSSIBLE = 507,
    E_VOLPACK_PROVISION_FAIL = 508,
    E_VOLPACK_UNPROVISION_FAIL = 511,
    E_ADD_VOLUME_PROTECTION_INPROGRESS = 512 , 
    E_SCENARIO_DELETION_INPROGRESS = 513,
    //RECOVERY(601-700)

    E_RECOVERY_VOL_FAIL = 601,
    E_RECOVERY_INPROGRESS = 602,

    //SNAPSHOT(701-800)

    E_EXPORT_SNAPSHOT_FAIL = 701,
    E_SNAPSHOT_VOL_FAIL,

    //MBR(801-900)
    E_REPO_NOT_AVAILABLE=800,
    E_NO_MBR_INFO = 801,
    E_SYSTEMBUSY = 802,
    E_WRITE_CACHE_ENABLED = 803,
	E_INVALID_CREDENTIALS = 804,
	E_REPO_NORW_ACCESS = 805,
	E_UNKNOWN_CREDENTIALS = 806,
	E_INVALID_REPOSITORY = 807,
	E_REPO_UNABLETOLOCK = 808

}INMAGE_ERROR_CODE;
//List of concrete Handlers
typedef enum _HANDLER{
    HANDLER_STUB,
    HANDLER_HOST,
    HANDLER_VM_ASSOCIATION,
    HANDLER_VOLUME,
    HANDLER_REPOSITORY,
    HANDLER_PROTECTION,
    HANDLER_MONITOR,
    HANDLER_RECOVERY,
    HANDLER_LICENSING,
    HANDLER_HOSTDISCOVERY,
    HANDLER_SETTINGS,
    HANDLER_APP_SETTINGS,
    HANDLER_RESYNC,
    HANDLER_SOURCE,
    HANDLER_TARGET,
    HANDLER_POLICY,
    HANDLER_PAIRCREATION,
    HANDLER_SNAPSHOTS

}RESOURCE_HANDLER,FUNCTION_HANDLER;

std::string getErrorMessage(INM_ERROR errCode);
std::string getStrErrCode(INM_ERROR errCode);
std::string md5(const std::string& pttern);
std::string strToUpper(const std::string& str);
bool RemoveHostIDEntry() ;
//INM_ERROR getHandlerFunctionMap(std::map<FUNCTION_HANDLER,std::list<std::string> >& handlerFuncMap);
std::string getVersion();











#endif /* __COMMON__H */
