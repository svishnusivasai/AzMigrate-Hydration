#ifndef _INMAGE_COMMON_H__
#define _INMAGE_COMMON_H__

extern "C"
{
#include "ntifs.h"
#include "ntddk.h"
#include "ntverp.h"
#include "ntdddisk.h"
#include "stdarg.h"
#include "stdio.h"
#include <ntddvol.h>
#include <wdmsec.h> // for IoCreateDeviceSecure


#include <mountdev.h>
#include <mountmgr.h>
#define NTSTRSAFE_LIB
#include <ntstrsafe.h>
}

#include "InMageDebug.h"


//Fix for Bug 28568
#define INITIALIZE_PNP_STATE(_Data_)    \
        (_Data_)->DevicePnPState =  NotStarted;\
        (_Data_)->PreviousPnPState = NotStarted;

#define SET_NEW_PNP_STATE(_Data_, _state_) \
        (_Data_)->PreviousPnPState =  (_Data_)->DevicePnPState;\
        (_Data_)->DevicePnPState = (_state_);

#define RESTORE_PREVIOUS_PNP_STATE(_Data_)   \
        (_Data_)->DevicePnPState =   (_Data_)->PreviousPnPState;

// Define all the tags used in the driver here.
#define TAG_ASYNCIO_OBJECT              'IAnI'
#define TAG_BASECLASS_OBJECT            'CBnI'
#define TAG_BASIC_DISK                  'DBnI'
#define TAG_BASIC_VOLUME                'VBnI'
#define TAG_BITMAP_WORK_ITEM            'WBnI'
#define TAG_BITRUN_LENOFFSET_POOL       'OBnI'
#define TAG_CHANGE_NODE_POOL            'NCnI'
#define TAG_CHANGE_BLOCK_POOL           'BCnI'
#define TAG_DIRTY_BLOCKS_POOL           'BDnI'
#define TAG_DATA_BLOCK                  'bDnI'
#define TAG_DATA_POOL_CHUNK             'PDnI'
#define TAG_FILESTREAM_OBJECT           'SFnI'
#define TAG_FSSEGMENTMAPPER_OBJECT      'MFnI'
#define TAG_FILE_WRITER_ENTRY           'WFnI'
#define TAG_FILE_WRITER_THREAD_ENTRY    'TFnI'
#define TAG_GENERIC_NON_PAGED           'NGnI'
#define TAG_GENERIC_PAGED               'PGnI'
#define TAG_IOBUFFER_OBJECT             'BInI'
#define TAG_IOBUFFER_DATA               'DInI'      // This is paged pool memory.
#define TAG_NONPAGED_ALLOCATED          'ANnI'
#define TAG_NODE_LIST_POOL              'LNnI'
#define TAG_REGISTRY_OBJECT             'GRnI'
#define TAG_REGISTRY_DATA               'DRnI'
#define TAG_REGISTRY_MULTISZ            'MRnI'
#define TAG_SEGMENTEDBITMAP_OBJECT      'BSnI'
#define TAG_TAG_BUFFER                  'aTnI'
#define TAG_VOLUME_BITMAP               'BVnI'
#define TAG_VOLUME_CONTEXT              'CVnI'
#define TAG_VALUE_DISTRIBUTION          'DVnI'
#define TAG_VALUE_LOG                   'LVnI'
#define TAG_VOLUME_NODE                 'NVnI'
#define TAG_WORK_QUEUE_ENTRY            'EWnI'
#define TAG_WRITER_NODE                 'NWnI'
#define TAG_TAG_NODE                    'NTnI'
//Fix for Bug 28568
#define TAG_REMOVE_LOCK                 'LRnI'

#define REG_CLUSTER_KEY                 L"\\REGISTRY\\MACHINE\\Cluster"
#define REG_CLUSDISK_KEY                L"\\REGISTRY\\MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ClusDisk"
#define REG_CLUSDISK_SIGNATURES_KEY     L"\\REGISTRY\\MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ClusDisk\\Parameters\\Signatures"
#define REG_CLUSDISK_PARAMETERS_KEY     L"\\REGISTRY\\MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ClusDisk\\Parameters"
#define DOS_DEVICES_VOLUME_PREFIX       L"\\DosDevices\\Volume{"
#define SYSTEM_ROOT_PATH                L"\\SystemRoot\\"

// Log file name format is Prefix + GUID + Suffix
#define LOG_FILE_NAME_PREFIX            L"InMage-"
#define LOG_FILE_NAME_SUFFIX            L".VolumeLog"
#define LOG_FILE_NAME_FOR_CLUSTER_VOLUME    LOG_FILE_NAME_PREFIX L"ClusterVolume" LOG_FILE_NAME_SUFFIX

#define DISK_NAME_PREFIX                L"\\Device\\Harddisk"

#define STRING_LEN_NULL_TERMINATED      0xFFFFFFFF

#define MAX_NUM_DRIVE_LETTERS   26

#define GIGABYTES           (1024*1024*1024)
#define MEGABYTES           (0x100000)      // (1024*1024)
#define KILOBYTES           (0x400)         // (1024)
#define FIVE_TWELVE_K_SIZE          (0x80000)
#define TWO_FIFTY_SIX_K_SIZE        (0x40000)
#define ONE_TWENTY_EIGHT_K_SIZE     (0x20000)
#define SIXTY_FOUR_K_SIZE           (0x10000)
#define THIRTY_TWO_K_SIZE           (0x8000)
#define SIXTEEN_K_SIZE              (0x4000)
#define EIGHT_K_SIZE                (0x2000)
#define FOUR_K_SIZE                 (0x1000)
#define HUNDRED_NANO_SECS_IN_SEC    (10 * 1000 * 1000)
#define SECONDS_IN_MINUTE           (60)

#define SECTOR_SIZE         512

#define SINGLE_MAX_WRITE_LENGTH     0x10000 // (64 KBytes)
#define MAX_LOG_PATHNAME            (0x200)

// InVolFltLog.mc contains message ID's that get autogenerated
// Add event log error's there

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN PCWSTR string1 = NULL,
    IN ULONG maxLength1 = 0,
    IN PCWSTR string2 = NULL,
    IN ULONG maxLength2 = 0,
    IN PCWSTR string3 = NULL,
    IN ULONG maxLength3 = 0,
    IN PCWSTR string4 = NULL,
    IN ULONG maxLength4 = 0,
    IN PCWSTR string5 = NULL,
    IN ULONG maxLength5 = 0,
    IN PCWSTR string6 = NULL,
    IN ULONG maxLength6 = 0
    );

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN PCWSTR string1,
    IN ULONG maxLength1,
    IN PCWSTR string2,
    IN ULONG maxLength2,
    IN ULONG InsertionValue3,
    IN ULONG InsertionValue4
    );

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN PCWSTR string1,
    IN ULONG maxLength1,
    IN PCWSTR string2,
    IN ULONG maxLength2,
    IN ULONGLONG InsertionValue3,
    IN ULONGLONG InsertionValue4 = 0
    );

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN PCWSTR string1,
    IN ULONG maxLength1,
    IN ULONGLONG InsertionValue3,
    IN ULONGLONG InsertionValue4,
    IN ULONGLONG InsertionValue5,
    IN ULONGLONG InsertionValue6
    );

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN PCWSTR string1,
    IN ULONG maxLength1,
    IN ULONGLONG InsertionValue3,
    IN ULONGLONG InsertionValue4,
    IN ULONGLONG InsertionValue5
    );

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN PCWSTR string1,
    IN ULONG maxLength1,
    IN PCWSTR string2,
    IN ULONG maxLength2,
    IN ULONG InsertionValue3
    );

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN PCWSTR string1,
    IN ULONG maxLength1,
    IN PCWSTR string2,
    IN ULONG maxLength2,
    IN PCWSTR string3,
    IN ULONG maxLength3,
    IN ULONG InsertionValue4
    );

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN ULONGLONG InsertionValue1,
    IN ULONG InsertionValue2,
    IN ULONGLONG InsertionValue3,
    IN ULONG InsertionValue4
    );

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN ULONG InsertionValue1,
    IN ULONG InsertionValue2 = 0,
    IN ULONG InsertionValue3 = 0,
    IN ULONG InsertionValue4 = 0
    );

VOID
InMageFltLogError(
    IN PDEVICE_OBJECT deviceObject,
    IN ULONG uniqueId,
    IN NTSTATUS messageId,
    IN NTSTATUS finalStatus,
    IN ULONGLONG InsertionValue1,
    IN ULONGLONG InsertionValue2,
    IN ULONG InsertionValue3,
    IN ULONG InsertionValue4
    );


// maximum number of event log messages to write per time interval
#define EVENTLOG_SQUELCH_MAXIMUM_EVENTS (50)
// time interval in system time units (100ns), 7200 seconds = 2 hours
#define EVENTLOG_SQUELCH_TIME_INTERVAL (10000000i64 * 7200i64)

extern ULONG    ulDebugLevelForAll;
extern ULONG    ulDebugLevel;
extern ULONG    ulDebugMask;

#if DBG
#define InVolDbgPrint(Level, Mod, x)                            \
{                                                               \
    if ((ulDebugLevelForAll >= (Level)) ||                      \
        ((ulDebugMask & (Mod)) && (ulDebugLevel >= (Level))))   \
        DbgPrint x;                                             \
}
#else
#define InVolDbgPrint(Level, Mod, x)  
#endif // DBG

#if (NTDDI_VERSION >= NTDDI_WINXP)
// Undocumented Calls.
extern "C" {
PCHAR   PsGetProcessImageFileName(PEPROCESS Process);
}

#endif

// Additional NTSTATUS Values
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag - We are setting this flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//  If Most significat nibble is 
//  0x2 - Success
//  0x6 - Informational
//  0xA - Warning
//  0xE - Error
//  Next Three Most Signifact nibbles are Facility.

#define INMAGE_FACILITY         0x800


#define STATUS_INMAGE_OBJECT_CREATED       ((NTSTATUS)0x28000001)

#include "InVolFlt.h"
#include "BitmapAPI.h"
#include "DirtyBlock.h"
#include "WorkQueue.h"
#include "DriverContext.h"
#include "Bypass.h"

// this .h is automatically generated from the InVolFltLog.mc message file
#include "InVolFltLog.h"

#endif //_INMAGE_COMMON_H__