
#ifndef DEFS_H
#define DEFS_H
#include <ace/Mutex.h>
#include <ace/Guard_T.h>
#include<ace/Message_Queue.h>
#include<boost/shared_ptr.hpp>

#include "logger.h"
#include "portable.h"


#define TRACKER_ENABLED 1

typedef ACE_Guard<ACE_Mutex> AutoMutexGuard ;
typedef ACE_Guard<ACE_Null_Mutex> AutoNullMutexGuard ;
typedef ACE_Message_Queue<ACE_MT_SYNCH> ACE_SHARED_MQ ;
typedef boost::shared_ptr<ACE_SHARED_MQ > ACE_SHARED_MQ_Ptr ;

#define SAFE_ACE_CLOSE_HANDLE(hd) do { if( hd !=  ACE_INVALID_HANDLE ) {  ACE_OS::close(hd) ; hd = ACE_INVALID_HANDLE; } } while(false)

#define ICAT_MSGPRIO_NORMAL 0x01
#define ICAT_MSGPRIO_HIGH   0x10 

enum ICAT_TRANSPORT_PROTOCOL 
{ 
	TRANS_PROTO_NONE, 
	TRANS_PROTO_HTTP, 
	TRANS_PROTO_NFS, 
	TRANS_PROTO_CIFS 
} ;
enum ICAT_OPERATION 
{ 
	ICAT_OPER_NONE, 
	ICAT_OPER_ARCH_FILE, 
	ICAT_OPER_ARCH_DIR, 
	ICAT_OPER_DEL_FILE, 
	ICAT_OPER_DEL_DIR, 
	ICAT_OPER_OVERWRITE,
	ICAT_OPER_LISTINTOFILE	
} ;

enum ICAT_MSG_TYPE 
{ 
	ICAT_MSG_FL_DONE,	
	ICAT_MSG_AP_DONE,
	ICAT_MSG_TRANSPORT_FAILED,
	ICAT_MSG_STOP
} ;


enum ICAT_WORKER_STATUS
{
	ICAT_WRKR_ACTIVE,
	ICAT_WRKR_PAUSED,
	ICAT_WRKR_INACTIVE
} ;

enum ICAT_OPER_STATUS
{ 
	ICAT_OPSTAT_NONE,
	ICAT_OPSTAT_FAILED,
	ICAT_OPSTAT_SUCCESS,
	ICAT_OPSTAT_ALREADY_EXISTS,
	ICAT_OPSTAT_DELETED,
	ICAT_OPSTAT_URI_TOOLONG,
	ICAT_OPSTAT_FILE_TOOLARGE,
	ICAT_OPSTAT_FORBIDDEN,
	ICAT_OPSTAT_BADREQUEST,
	ICAT_OPSTAT_SERVER_ERROR,
	ICAT_OPSTAT_SERVICE_UNAVAILABLE,
	ICAT_OPSTAT_BAD_TRANSPORT,
	ICAT_OPSTAT_NOTREADABLE,
	ICAT_OPSTAT_CONN_TIMEOUT,
	ICAT_OPSTAT_COULDNOT_CONNECT,
} ;
#define ICAT_FILEFILTER_SIZE 5
#define ICAT_WAIT_TIME 15
#define ICAT_DEQUEUE_WAIT_TIME 3
#endif

