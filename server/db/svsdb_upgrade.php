<?php
/**
 *$Header: /src/server/db/svsdb_upgrade.php,v 1.174.6.1 2017/11/22 09:39:23 srpatnan Exp $
 *================================================================= 
 * FILENAME
 *    svsdb_upgrade.php
 *
 * DESCRIPTION
 *    CS Database upgrade script
 *
 * With the supplied database schema, the script will create a 
 * temporary database, and will compare the structure/manual data 
 * against the existing database, and generate the Upgrade SQL, 
 * to run on the existing database.
 *
 * HISTORY
 *    Aug 09, 2012 - Padhi - Created 
 *=================================================================
 *                 Copyright (c) InMage Systems                    
 *=================================================================
 */
 
error_reporting(E_ALL & ~E_NOTICE);
set_time_limit(600);
ini_set('memory_limit', '500M');
ini_set('display_errors', '1');
set_error_handler ( 'errorHandler' );
date_default_timezone_set(@date_default_timezone_get());
//require_once('DbConstants.php');
//require_once('DbMerge.php');

try {

	// Configuration Data
	$db_name = DbConstants::DB_NAME;
	$db_name_tmp = DbConstants::DB_NAME_TMP;
	$upgrade_sql_file = DbConstants::UPGRADE_SQL_FILE; // Upgrade SQL, to be generated by the script
	$backup_sql_file = DbConstants::BACKUP_SQL_FILE; // DB backup, to be generated by the script
	$latest_sql_file = DbConstants::LATEST_SQL_FILE; // Latest DB Sql, should be kept in the same path as this script
	$generate_sql = DbConstants::GENERATE_SQL; // To generate a fresh upgrade Sql (1) , or use the existing upgrade Sql (0)

	$exclude_tables = DbConstants::$exclude_tables;
	
	$manual_data_tables['full_sync'] = (preg_match('/Windows/i', php_uname())) ? array_change_key_case(DbConstants::$manual_tables_full_sync) : DbConstants::$manual_tables_full_sync;
	$manual_data_tables['partial_sync'] = (preg_match('/Windows/i', php_uname())) ? array_change_key_case(DbConstants::$manual_tables_partial_sync) : DbConstants::$manual_tables_partial_sync;
	
	$sync_triggers = DbConstants::SYNC_TRIGGERS;
	$latest_sql_file_for_triggers = DbConstants::LATEST_SQL_FILE_FOR_TRIGGERS;
	$amethyst_vars = amethyst_values();    
	$mysql = $amethyst_vars['MYSQL_PATH']."\\bin\\mysql";
	$mysql_dump = $amethyst_vars['MYSQL_PATH']."\\bin\\mysqldump";
	$cat_path = $amethyst_vars['CYGWIN_PATH']."\\bin\\cat";
	$php_path = $amethyst_vars['PHP_PATH']."\\php";
	
	$config1 = array(
		'host' => $amethyst_vars['DB_HOST'],
		'user' => $amethyst_vars['DB_ROOT_USER'],
		'password' => $amethyst_vars['DB_ROOT_PASSWD'],
		'name' => $db_name
	);
		
	$config2 = array(
		'host' => $amethyst_vars['DB_HOST'],
		'user' => $amethyst_vars['DB_ROOT_USER'],
		'password' => $amethyst_vars['DB_ROOT_PASSWD'],
		'name' => $db_name_tmp
	);
	
	$mysql_cmd = "\"".$mysql."\" -u ".$amethyst_vars['DB_ROOT_USER']." -p".$amethyst_vars['DB_ROOT_PASSWD'];
    	$mysqldump_cmd = "\"".$mysql_dump."\" -u ".$amethyst_vars['DB_ROOT_USER']." -p".$amethyst_vars['DB_ROOT_PASSWD'];
	
	// Step 2: Drop Temporary database, if exists
	$cmd = $mysql_cmd." -e \"DROP DATABASE IF EXISTS {$db_name_tmp}\" 2>&1";
	$output = system($cmd, $ret_val);
	if($ret_val != 0) throw new Exception ( "$cmd \n$output", 102 );
	
	// Step 3: Create Temporary database
	$cmd = $mysql_cmd." -e \"CREATE DATABASE {$db_name_tmp}\" 2>&1";
	$output = system($cmd, $ret_val);
	if($ret_val != 0) throw new Exception ( "$cmd \n$output", 103 );
	
	// Step 4: Populate Temporary database
	#$cmd = "cat {$latest_sql_file} | $mysql_cmd {$db_name_tmp} 2>&1";
	$cmd = "\"".$cat_path."\" {$latest_sql_file} | $mysql_cmd {$db_name_tmp} 2>&1";
	$output = system($cmd, $ret_val);
	if($ret_val != 0) throw new Exception ( "$cmd \n$output", 104 );
	
	if($sync_triggers) {
		#$cmd = "cat {$latest_sql_file_for_triggers} | $mysql_cmd {$db_name_tmp} 2>&1";
		$cmd = "\"".$cat_path."\" {$latest_sql_file_for_triggers} | $mysql_cmd {$db_name_tmp} 2>&1";
		$output = system($cmd, $ret_val);
		if($ret_val != 0) throw new Exception ( "$cmd \n$output", 105 );
	}
	
	// Step 5: Take existing database backup
	$cmd = $mysqldump_cmd." {$db_name} > {$backup_sql_file}";
	$output = system($cmd, $ret_val);
	if($ret_val != 0) throw new Exception ( "$cmd \n$output", 106 );
	
	// Step 6: Generate Upgrade SQL
	$fresh_upgrade_sql_generated = 0;
	if($generate_sql == 1 ) {
		$obj = new DbMerge();
		list($sqls, $sqls_categorized) = $obj->generateSql($config1, $config2, $manual_data_tables, $sync_triggers, $exclude_tables);
		
		if(count($sqls_categorized)) {
			file_put_contents($upgrade_sql_file, implode("\n",$sqls));
			$fresh_upgrade_sql_generated = 1;
		}
	}
	
	// Step 7: Execute Upgrade SQL
	if(($fresh_upgrade_sql_generated == 1) || ($generate_sql == 0)) {
		if(file_exists($upgrade_sql_file)) {
			$cmd = "\"".$cat_path."\" $upgrade_sql_file | $mysql_cmd {$db_name} 2>&1";
			$output = system($cmd, $ret_val);
			if($ret_val != 0) throw new Exception ( "$cmd \n$output", 107 );
		}
	}
	
	// Step 8: Drop Temporary Database
	$cmd = $mysql_cmd." -e \"DROP DATABASE {$db_name_tmp}\" 2>&1";
	$output = system($cmd, $ret_val);
	if($ret_val != 0) throw new Exception ( "$cmd \n$output", 108 );
	
	
	
	// Step 9: Execute Post Script
	$upgrade_post_scripts = DbConstants::$upgrade_post_scripts;
	foreach($upgrade_post_scripts as $post_script)
	{
		$cmd = "\"".$php_path."\" $post_script 2>&1";
		$output = system($cmd, $ret_val);
		if($ret_val != 0) throw new Exception ( "$cmd \n$output", 109 );
	}
	
	/*
	// Step 10: Clean MySQL database for Restricted Access
	$cmd = $mysql_cmd." -e \"DELETE FROM mysql.user WHERE User='' OR Password='' OR Host='%'\" 2>&1";
	$output = system($cmd, $ret_val);
	if($ret_val != 0) throw new Exception ( "$cmd \n$output", 110 );    
	
	unlinkServiceRrd();
	*/
		
} catch ( Exception $e ) {

	processError($e);
	exit(111);
}


/**
 * Autoloading of classes
 */
function __autoload($class_name) {
	include $class_name . '.php';
}

/**
 * Error Handler
 */
function errorHandler($number, $string, $file = 'Unknown', $line = 0, $context = array()) {
	if (($number == E_NOTICE) || ($number == E_STRICT))
		return false;
	
	if (! error_reporting ())
		return false;
	
	throw new Exception ( $string, $number );
	
	return true;
}

/**
 * Process Error
 */
function processError($e) {
	
	$upgrade_log_file_path =  DbConstants::UPGRADE_LOG_FILE_PATH;
	
	$error_string = "Time : " . date("Y-m-d H:i:s");
	$error_string = "\nVersion : " . trim($version);
	$error_string .= "\nCode : " . $e->getCode();
	$error_string .= "\nMessage : " . $error_message = $e->getMessage();
	$error_string .= "\nFile : " . $e->getFile();
	$error_string .= "\nLine : " . $e->getLine();
	//$error_string .= "\nTrace : " . $e->getTrace();
	//$error_string .= "\nTraceString : " . $e->getTraceAsString();		

	error_log("$error_string\n\n", 3, $upgrade_log_file_path);
}

/**
 * Unlink Service RRD on Upgrade
 */
function unlinkServiceRrd() {
	
	$pid_healthmonitor = `ps -ef | grep healthmonitor.pl | grep -v "grep" | awk {'print $2'}`;
	if($pid_healthmonitor)
	{
		$kill_cmd = `kill -9 $pid_healthmonitor`;
	}
	
	if (preg_match('/Windows/i', php_uname()))
    {
      $rrd_path = "../SystemMonitorRrds/";	
    }
    else
    {
      $rrd_path = DbConstants::INSTALLATION_DIR."/SystemMonitorRrds/";	
    }
	
	
	$handle = opendir($rrd_path);
	while($file = readdir($handle))
	{
		if ($file != "." && $file != ".." && (preg_match('/-service\.rrd/',$file))) {
			unlink($rrd_path.$file);
		}
	}
}

//get cs version
function get_cs_version()
{
	$return_val = 0;
	$version_file = "/home/svsystems/etc/version";
	if(file_exists($version_file))
	{
		$fh=fopen($version_file,"r");
		if($fh)
		{
			while(($buffer = fgets($fh,1024)) != false)
			{
				$str_arr = explode("=",$buffer);
				if($str_arr[0] == 'VERSION')
				{
					$ver = explode('.',$str_arr[1]);
					$return_val =  intval($ver[0]);
					break;
				}
			}
		}
	}
	
	return $return_val;	
}

//get amethyst values
function amethyst_values()
{
    if (preg_match('/Windows/i', php_uname()))
    {
      $amethyst_conf = "..\\etc\\amethyst.conf";
    }
    else
    {
      $amethyst_conf = "/home/svsystems/etc/amethyst.conf";
    }
    
    if (file_exists($amethyst_conf))
    {
        $file = fopen ($amethyst_conf, 'r');
        $conf = fread ($file, filesize($amethyst_conf));
        fclose ($file);
        $conf_array = explode ("\n", $conf);
        foreach ($conf_array as $line)
        {
            if (!preg_match ("/^#/", $line))
            {
                list ($param, $value) = explode ("=", $line);
                $param = trim($param);
                $value = trim($value);
                $result[$param] = str_replace('"', '', $value);
            }
        }
    }
    return $result;
}
?>