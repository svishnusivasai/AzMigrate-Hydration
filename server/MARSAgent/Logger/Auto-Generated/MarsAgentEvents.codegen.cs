
// <copyright file="RcmAgentEvent.codegen.cs" company="Microsoft Corporation">
// Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// <autogenerated />

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Threading;

namespace MarsAgent.LoggerInterface
{
    public enum RcmAgentEventId
    {
        FetchedReplicationSettings = 2001,
        LogContextMissingEvent = 4001,
        ExceptionFetchingReplicationSettings = 4002,
        ServiceStarted = 2201,
        ServiceStopped = 2202,
        ServiceConfigured = 2203,
        ServiceRegistered = 2204,
        WebProxyUpdated = 2205,
        ServiceUnregistered = 2206,
        ServiceUnconfigured = 2207,
        SampleLifeCycleErrorEvent = 4201,
        ServiceConfigurationFailed = 4202,
        ServiceRegisterationFailed = 4203,
        WebProxyUpdationFailed = 4204,
        ServiceUnregisterationFailed = 4205,
        ServiceUnconfigurationFailed = 4206,
        SampleOperationSuccessEvent = 2101,
        SampleOperationErrorEvent = 4101,
    }

    public class RcmAgentEventMsgFormats
    {
        public static readonly string FetchedReplicationSettingsMsgFormat = "Fetched replication settings.";
        public static readonly string LogContextMissingEventMsgFormat = "Log context is not set on the current thread.";
        public static readonly string ExceptionFetchingReplicationSettingsMsgFormat = "Replication settings could not be fetched.| Params: {{exceptionType : {0}}} {{exceptionMessage : {1}}}";
        public static readonly string ServiceStartedMsgFormat = "Service started.| Params: {{Version : {0}}}";
        public static readonly string ServiceStoppedMsgFormat = "Service stopped.| Params: {{Version : {0}}}";
        public static readonly string ServiceConfiguredMsgFormat = "Service configured succesfully.";
        public static readonly string ServiceRegisteredMsgFormat = "Service registered succesfully.";
        public static readonly string WebProxyUpdatedMsgFormat = "Web proxy details updated succesfully.";
        public static readonly string ServiceUnregisteredMsgFormat = "Service unregistered succesfully.";
        public static readonly string ServiceUnconfiguredMsgFormat = "Service unconfigured succesfully.";
        public static readonly string SampleLifeCycleErrorEventMsgFormat = "Stuff did not work.";
        public static readonly string ServiceConfigurationFailedMsgFormat = "Service configuration failed.| Params: {{exceptionType : {0}}} {{exceptionMessage : {1}}}";
        public static readonly string ServiceRegisterationFailedMsgFormat = "Service registeration failed.| Params: {{exceptionType : {0}}} {{exceptionMessage : {1}}}";
        public static readonly string WebProxyUpdationFailedMsgFormat = "Web proxy details updation failed.| Params: {{exceptionType : {0}}} {{exceptionMessage : {1}}}";
        public static readonly string ServiceUnregisterationFailedMsgFormat = "Service unregisteration failed.| Params: {{exceptionType : {0}}} {{exceptionMessage : {1}}}";
        public static readonly string ServiceUnconfigurationFailedMsgFormat = "Service unconfiguration failed.| Params: {{exceptionType : {0}}} {{exceptionMessage : {1}}}";
        public static readonly string SampleOperationSuccessEventMsgFormat = "Stuff worked.";
        public static readonly string SampleOperationErrorEventMsgFormat = "Stuff did not work.";
    }

    public class RcmAgentEventInfo
    {
        public TraceEventType TraceLevel { get; set;}

        public string EventMessageFormat { get; set;}

        public RcmAgentEventInfo(TraceEventType level, string eventMessageFormat)
        {
            this.TraceLevel = level;
            this.EventMessageFormat = eventMessageFormat;
        }
    }

    public class EventInfoCollection
    {
        public static Dictionary<RcmAgentEventId, RcmAgentEventInfo> Collection { get; } = new Dictionary<RcmAgentEventId, RcmAgentEventInfo>()
        {
            {
                RcmAgentEventId.FetchedReplicationSettings,
                new RcmAgentEventInfo(TraceEventType.Information, RcmAgentEventMsgFormats.FetchedReplicationSettingsMsgFormat)
            },
            {
                RcmAgentEventId.LogContextMissingEvent,
                new RcmAgentEventInfo(TraceEventType.Warning, RcmAgentEventMsgFormats.LogContextMissingEventMsgFormat)
            },
            {
                RcmAgentEventId.ExceptionFetchingReplicationSettings,
                new RcmAgentEventInfo(TraceEventType.Warning, RcmAgentEventMsgFormats.ExceptionFetchingReplicationSettingsMsgFormat)
            },
            {
                RcmAgentEventId.ServiceStarted,
                new RcmAgentEventInfo(TraceEventType.Information, RcmAgentEventMsgFormats.ServiceStartedMsgFormat)
            },
            {
                RcmAgentEventId.ServiceStopped,
                new RcmAgentEventInfo(TraceEventType.Information, RcmAgentEventMsgFormats.ServiceStoppedMsgFormat)
            },
            {
                RcmAgentEventId.ServiceConfigured,
                new RcmAgentEventInfo(TraceEventType.Information, RcmAgentEventMsgFormats.ServiceConfiguredMsgFormat)
            },
            {
                RcmAgentEventId.ServiceRegistered,
                new RcmAgentEventInfo(TraceEventType.Information, RcmAgentEventMsgFormats.ServiceRegisteredMsgFormat)
            },
            {
                RcmAgentEventId.WebProxyUpdated,
                new RcmAgentEventInfo(TraceEventType.Information, RcmAgentEventMsgFormats.WebProxyUpdatedMsgFormat)
            },
            {
                RcmAgentEventId.ServiceUnregistered,
                new RcmAgentEventInfo(TraceEventType.Information, RcmAgentEventMsgFormats.ServiceUnregisteredMsgFormat)
            },
            {
                RcmAgentEventId.ServiceUnconfigured,
                new RcmAgentEventInfo(TraceEventType.Information, RcmAgentEventMsgFormats.ServiceUnconfiguredMsgFormat)
            },
            {
                RcmAgentEventId.SampleLifeCycleErrorEvent,
                new RcmAgentEventInfo(TraceEventType.Error, RcmAgentEventMsgFormats.SampleLifeCycleErrorEventMsgFormat)
            },
            {
                RcmAgentEventId.ServiceConfigurationFailed,
                new RcmAgentEventInfo(TraceEventType.Error, RcmAgentEventMsgFormats.ServiceConfigurationFailedMsgFormat)
            },
            {
                RcmAgentEventId.ServiceRegisterationFailed,
                new RcmAgentEventInfo(TraceEventType.Error, RcmAgentEventMsgFormats.ServiceRegisterationFailedMsgFormat)
            },
            {
                RcmAgentEventId.WebProxyUpdationFailed,
                new RcmAgentEventInfo(TraceEventType.Error, RcmAgentEventMsgFormats.WebProxyUpdationFailedMsgFormat)
            },
            {
                RcmAgentEventId.ServiceUnregisterationFailed,
                new RcmAgentEventInfo(TraceEventType.Error, RcmAgentEventMsgFormats.ServiceUnregisterationFailedMsgFormat)
            },
            {
                RcmAgentEventId.ServiceUnconfigurationFailed,
                new RcmAgentEventInfo(TraceEventType.Error, RcmAgentEventMsgFormats.ServiceUnconfigurationFailedMsgFormat)
            },
            {
                RcmAgentEventId.SampleOperationSuccessEvent,
                new RcmAgentEventInfo(TraceEventType.Information, RcmAgentEventMsgFormats.SampleOperationSuccessEventMsgFormat)
            },
            {
                RcmAgentEventId.SampleOperationErrorEvent,
                new RcmAgentEventInfo(TraceEventType.Error, RcmAgentEventMsgFormats.SampleOperationErrorEventMsgFormat)
            },
        };
    }

    public class RcmAgentEvent
    {
        public RcmAgentEventId Id { get; private set; }

        public string Message { get; private set; }

        public static RcmAgentEvent FetchedReplicationSettings()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.FetchedReplicationSettings,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.FetchedReplicationSettings].EventMessageFormat)
            };
        }
        public static RcmAgentEvent LogContextMissingEvent()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.LogContextMissingEvent,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.LogContextMissingEvent].EventMessageFormat)
            };
        }
        public static RcmAgentEvent ExceptionFetchingReplicationSettings(string exceptionType, string exceptionMessage)
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ExceptionFetchingReplicationSettings,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ExceptionFetchingReplicationSettings].EventMessageFormat, exceptionType, exceptionMessage)
            };
        }
        public static RcmAgentEvent ServiceStarted(string version)
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceStarted,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceStarted].EventMessageFormat, version)
            };
        }
        public static RcmAgentEvent ServiceStopped(string version)
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceStopped,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceStopped].EventMessageFormat, version)
            };
        }
        public static RcmAgentEvent ServiceConfigured()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceConfigured,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceConfigured].EventMessageFormat)
            };
        }
        public static RcmAgentEvent ServiceRegistered()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceRegistered,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceRegistered].EventMessageFormat)
            };
        }
        public static RcmAgentEvent WebProxyUpdated()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.WebProxyUpdated,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.WebProxyUpdated].EventMessageFormat)
            };
        }
        public static RcmAgentEvent ServiceUnregistered()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceUnregistered,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceUnregistered].EventMessageFormat)
            };
        }
        public static RcmAgentEvent ServiceUnconfigured()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceUnconfigured,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceUnconfigured].EventMessageFormat)
            };
        }
        public static RcmAgentEvent SampleLifeCycleErrorEvent()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.SampleLifeCycleErrorEvent,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.SampleLifeCycleErrorEvent].EventMessageFormat)
            };
        }
        public static RcmAgentEvent ServiceConfigurationFailed(string exceptionType, string exceptionMessage)
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceConfigurationFailed,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceConfigurationFailed].EventMessageFormat, exceptionType, exceptionMessage)
            };
        }
        public static RcmAgentEvent ServiceRegisterationFailed(string exceptionType, string exceptionMessage)
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceRegisterationFailed,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceRegisterationFailed].EventMessageFormat, exceptionType, exceptionMessage)
            };
        }
        public static RcmAgentEvent WebProxyUpdationFailed(string exceptionType, string exceptionMessage)
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.WebProxyUpdationFailed,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.WebProxyUpdationFailed].EventMessageFormat, exceptionType, exceptionMessage)
            };
        }
        public static RcmAgentEvent ServiceUnregisterationFailed(string exceptionType, string exceptionMessage)
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceUnregisterationFailed,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceUnregisterationFailed].EventMessageFormat, exceptionType, exceptionMessage)
            };
        }
        public static RcmAgentEvent ServiceUnconfigurationFailed(string exceptionType, string exceptionMessage)
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.ServiceUnconfigurationFailed,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.ServiceUnconfigurationFailed].EventMessageFormat, exceptionType, exceptionMessage)
            };
        }
        public static RcmAgentEvent SampleOperationSuccessEvent()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.SampleOperationSuccessEvent,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.SampleOperationSuccessEvent].EventMessageFormat)
            };
        }
        public static RcmAgentEvent SampleOperationErrorEvent()
        {
            return new RcmAgentEvent
            {
                Id = RcmAgentEventId.SampleOperationErrorEvent,
                Message = string.Format(CultureInfo.InvariantCulture, EventInfoCollection.Collection[RcmAgentEventId.SampleOperationErrorEvent].EventMessageFormat)
            };
        }
    }
}
