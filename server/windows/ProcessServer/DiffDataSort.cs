using Microsoft.Azure.SiteRecovery.ProcessServer.Core.Tracing;
using Microsoft.Azure.SiteRecovery.ProcessServer.Core.Utils;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;

namespace ProcessServer
{
    public enum DiffFileType
    {
        Unknown = 0,
        Default = 1,
        Tag = 2,
        TSO = 3
    }

    /// <summary>
    /// Sorts the diff files according to their names
    /// </summary>
    internal class DiffDataSort
    {
        public DiffDataSort(string dirPath, string prefix)
        {
            if (string.IsNullOrWhiteSpace(dirPath))
            {
                throw new ArgumentNullException(nameof(dirPath));
            }
            if (string.IsNullOrWhiteSpace(prefix))
            {
                throw new ArgumentNullException(nameof(prefix));
            }

            this.DirectoryPath = dirPath;
            this.FilePrefix = prefix;
        }

        /// <summary>
        /// This function performs actual sorting
        /// </summary>
        /// <returns>List of sorted diff files</returns>
        public List<string> SortFiles()
        {
            List<string> result = new List<string>();
            var diffFiles = FSUtils.GetFileList(DirectoryPath, FilePrefix + "*", SearchOption.TopDirectoryOnly);

            if(diffFiles == null || diffFiles.Count() <= 0)
            {
                return result;
            }

            List<DiffFileParser> parsedDiffFileList = new List<DiffFileParser>();
            foreach (var finfo in diffFiles)
            {
                int pos = finfo.FullName.LastIndexOf(".dat");
                string newFilename = finfo.FullName.Insert(pos,
                    "_" + new DateTimeOffset(finfo.CreationTimeUtc).ToUnixTimeMilliseconds());
                try
                {
                    var diffFileParserObj = new DiffFileParser(newFilename);
                    parsedDiffFileList.Add(diffFileParserObj);
                }
                catch(Exception ex)
                {
                    Tracers.PSDiffDataSort.TraceAdminLogV2Message(
                       TraceEventType.Error,
                       "Failed to parse diff file {0} with exception {1}{2}",
                       newFilename, Environment.NewLine, ex);
                    throw;
                }
            }

            parsedDiffFileList.Sort();

            foreach(var parsedfile in parsedDiffFileList)
            {
                string opfile = parsedfile.FileName;
                int pos1 = opfile.LastIndexOf(".dat");
                int pos2 = opfile.LastIndexOf("_");
                opfile = opfile.Remove(pos2, pos1 - pos2);
                result.Add(opfile);
            }

            return result;
        }

        public string DirectoryPath { get; }

        public string FilePrefix { get; }
    }

    internal class DiffFileParser : IComparable<DiffFileParser>, IEquatable<DiffFileParser>
    {
        private const string DAT_EXTENSION = ".dat";
        private const string DIFF_SUBSTR = "_diff_";
        private const string TAG_SUBSTR = "tag_";
        private const string TSO_SUBSTR = "tso_";

        public DiffFileParser(string fileName)
        {
            if (string.IsNullOrWhiteSpace(fileName))
                throw new ArgumentException(nameof(fileName));

            FileName = fileName;

            ParseFileName();
        }

        /// <summary>
        /// Parses the filename
        /// tokenizes the diff info id into the parts needed for sorting
        /// expects the id in one of the following formats
        /// completed_diff_[tso_/tag_]P<time>__<pn>_<pc>_E<time>_<n>_<MC|ME|WC|WE><continuation number>_<cx timestamp>].dat[.gz]
        /// where
        /// tso: indicates timestamps only
        /// P<time>: end timestamp of the previous diff
        /// <pn>: previous diff's end sequence number
        /// <pc>: previous diff's continuation number
        /// E<startTime>: timestamp from the dirty block for the end timestamp
        /// <n>: the sequence number from the dirty block for end timestamp
        /// <MC|ME|WC|WE>: is the continuation indicator
        ///      MC: meta data mode continuation more data coming with the same time stamps
        ///      ME: meta data mode continuation end
        ///      WC: write order mode continuation more data coming with the same time stamps
        ///      WE: write order mode continuation end
        /// <continuation number> : continuation number
        /// <cx timestamp>: timestamp generated by the cx when the diff file arrived
        /// .gz: indicates the file is compressed
        /// e.g. 
        ///  completed_diff_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040.dat
        ///  completed_diff_tag_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040.dat
        ///  completed_diff_tso_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040.dat
        ///  completed_diff_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040.dat.gz
        ///  completed_diff_tag_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040.dat.gz
        ///  completed_diff_tso_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040.dat.gz
        /// </summary>
        private void ParseFileName()
        {
            string diffFilename = Path.GetFileName(FileName);
            int extPos = diffFilename.LastIndexOf(DAT_EXTENSION, StringComparison.Ordinal);
            if(extPos < 0)
            {
                throw new ArgumentException($"The filename {diffFilename} does not have .dat extension");
            }

            string workingFilename = diffFilename.Substring(0, extPos);
            // working file name contains files in following format
            // completed_diff_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040
            // completed_diff_tag_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040
            // completed_diff_tso_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040

            int diffPos = workingFilename.IndexOf(DIFF_SUBSTR, StringComparison.Ordinal);
            if(diffPos < 0)
            {
                throw new ArgumentException($"The filename {diffFilename} does not have _diff_ substring");
            }

            workingFilename = workingFilename.Substring(diffPos + DIFF_SUBSTR.Length);
            // working file name contains files in following format
            // P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040
            // tag_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040
            // tso_P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040

            int tagPos, tsoPos;
            if ((tagPos = workingFilename.IndexOf(TAG_SUBSTR)) >= 0)
            {
                Filetype = DiffFileType.Tag;
                workingFilename = workingFilename.Substring(tagPos + TAG_SUBSTR.Length);
            }
            else if((tsoPos = workingFilename.IndexOf(TSO_SUBSTR)) >= 0)
            {
                Filetype = DiffFileType.TSO;
                workingFilename = workingFilename.Substring(tsoPos + TSO_SUBSTR.Length);
            }
            else
            {
                Filetype = DiffFileType.Default;
            }
            // working file name contains files in following format
            // P127794935171250000_1000_5_E127794935212187500_2000_ME1_1549f93984040

            string[] fileArray = workingFilename.Split(new char[] { '_' }, StringSplitOptions.None);
            if(fileArray.Length != 7)
            {
                throw new ArgumentException($"The filename {diffFilename} is not a valid filename");
            }
            if(fileArray[0].ElementAt(0) != 'P')
            {
                throw new ArgumentException($"Previous timestamp {fileArray[0]} should start with P");
            }
            if(fileArray[3].ElementAt(0) != 'E')
            {
                throw new ArgumentException($"End timestamp {fileArray[3]} should start with E");
            }

            if (!ulong.TryParse(
                fileArray[0].Substring(1), NumberStyles.Integer,
                CultureInfo.InvariantCulture, out ulong PreviousTimeStamp))
            {
                throw new ArgumentException(
                    $"Failed to parse previous timestamp {fileArray[0]} from diff file name {diffFilename}");
            }
            else
            {
                PrevTimestamp = PreviousTimeStamp;
            }

            if (!ulong.TryParse(fileArray[1], NumberStyles.Integer,
                CultureInfo.InvariantCulture, out ulong PreviousSequenceNumber))
            {
                throw new ArgumentException(
                    $"Failed to parse previous sequence number {fileArray[1]} from diff file name {diffFilename}");
            }
            else
            {
                PrevSequenceNumber = PreviousSequenceNumber;
            }

            PrevContinuationId = long.Parse(fileArray[2],
                CultureInfo.InvariantCulture);

            if (!ulong.TryParse(
                fileArray[3].Substring(1), NumberStyles.Integer,
                CultureInfo.InvariantCulture, out ulong EndTimeStamp))
            {
                throw new ArgumentException(
                    $"Failed to parse end timestamp {fileArray[3]} from diff file name {diffFilename}");
            }
            else
            {
                EndTimestamp = EndTimeStamp;
            }

            if (!ulong.TryParse(fileArray[4], NumberStyles.Integer,
                CultureInfo.InvariantCulture, out ulong EndSeqNumber))
            {
                throw new ArgumentException(
                    $"Failed to parse end sequence number {fileArray[4]} from diff file name {diffFilename}");
            }
            else
            {
                EndSequenceNumber = EndSeqNumber;
            }

            EndContinuationId = long.Parse(fileArray[5].Substring(2),
                CultureInfo.InvariantCulture);
            WriteOrderState = fileArray[5].Substring(0, 2);
            // the values will be as follows
            // PrevTimestamp = 127794935171250000
            // PrevSequenceNumber = 1000
            // PrevContinuationId = 5
            // CurrTimestamp = 127794935212187500
            // CurrSequenceNumber = 2000
            // CurrContinuationId = 1
            // WriteOrderState = 1549f93984040
        }

        public int CompareTo(DiffFileParser toCompareObj)
        {
            if(this.EndTimestamp != toCompareObj.EndTimestamp)
            {
                return this.EndTimestamp.CompareTo(toCompareObj.EndTimestamp);
            }

            if(this.EndSequenceNumber != toCompareObj.EndSequenceNumber)
            {
                return this.EndSequenceNumber.CompareTo(toCompareObj.EndSequenceNumber);
            }

            if(this.EndContinuationId != toCompareObj.EndContinuationId)
            {
                return this.EndContinuationId.CompareTo(toCompareObj.EndContinuationId);
            }

            return this.CxTimestamp.CompareTo(toCompareObj.CxTimestamp);
        }

        public bool Equals(DiffFileParser diffFileParser)
        {
            return this.FileName.Equals(diffFileParser.FileName, 
                StringComparison.OrdinalIgnoreCase);
        }

        public string FileName { get; private set; }

        public long PrevContinuationId { get; private set; }

        public ulong PrevSequenceNumber { get; private set; }

        public ulong PrevTimestamp { get; private set; }

        public long EndContinuationId { get; private set; }

        public ulong EndSequenceNumber { get; private set; }

        public ulong EndTimestamp { get; private set; }

        public long CxTimestamp { get; private set; }

        public DiffFileType Filetype { get; private set; }

        public string WriteOrderState { get; private set; }
    }
}
