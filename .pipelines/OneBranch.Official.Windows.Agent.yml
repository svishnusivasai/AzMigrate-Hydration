# Yaml configuration file for generating Windows agent official builds.
trigger: none
schedules:
- cron: "30 19 * * *"
  displayName: Daily Build @01:00 AM IST
  branches:
    include:
    - develop
  always: true

variables:
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  VISTADRIVERSNUGETPATH: $(REPOROOT)\host\drivers\InVolFlt\windows\DiskFlt
  BRANCHNAME: $(Build.SourceBranchName)
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2019:latest'
  CDP_BUILD_TAG: windowsagent

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates
  parameters:
    cloudvault:
      enabled: true
      runmode: stage
      artifacts:
        - drop_build_main
    globalSdl:
      tsa:
        enabled: true
      binskim:
        break: false
      policheck:
        break: true

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: windows

        variables:
          ob_outputDirectory: '$(Build.SourcesDirectory)\Out'
          ob_symbolsPublishing_enabled: true
          ob_symbolsPublishing_symbolsFolder: '$(OUTPUTROOT)\Symbols'

        steps:
          # Restore NuGet packages.
          - task: NuGetCommand@2
            displayName: 'Restore NuGet Packages'
            inputs:
              command: 'restore'
              restoreSolution: '$(REPOROOT)\host\host.sln'
              feedsToUse: 'config'
              nugetConfigPath: '$(REPOROOT)\.config\NuGet.config'

          # Generate version files.
          - task: PowerShell@2
            displayName: 'Generate Version Files'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\GenerateVersionFiles.ps1
              arguments: '-SourcesRootDirectory $(REPOROOT)'
              
          # Get version details from VersionData.txt
          - task: PowerShell@2
            displayName: "Get Version Data"
            inputs:
              targetType: 'inline'
              script: |
                $VersionDataContents = Get-Content -Path "$(Build.SourcesDirectory)\VersionData.txt" -Raw | ConvertFrom-StringData
                $AgentVersion = $VersionDataContents.BuildVersion
                $AgentInstallerName = $VersionDataContents.AgentInstallerName
                Write-Host "##vso[task.setvariable variable=AGENTVERSION;]$AgentVersion"
                Write-Host "##vso[task.setvariable variable=AGENTINSTALLERNAME;]$AgentInstallerName"
          
          # Restore NuGet packages.
          - task: NuGetCommand@2
            displayName: 'Downlaod Driver package'
            inputs:
              command: custom
              arguments: 'install VistaDrivers -OutputDirectory $(VISTADRIVERSNUGETPATH) -ConfigFile "$(REPOROOT)\.config\NuGet.config"'

          # Copy vista drivers.
          - task: PowerShell@2
            displayName: 'Copy vista drivers'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\CopyVistaDrivers.ps1
              arguments: '-SourceDirectory $(VISTADRIVERSNUGETPATH) -DriverDirectoryName VistaDrivers'
              
          # Build 32-bit sqlite3x.
          - task: MSBuild@1
            displayName: 'Build 32-bit sqlite3x'
            inputs:
              solution: '$(REPOROOT)\thirdparty\sqlite3x\sqlite3x.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'win32'
              configuration: 'release'
              msbuildArguments: '/t:sqlite3x /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\sqlite3x_32bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\sqlite3x_32bit.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true
              
          # Build 64-bit sqlite3x.
          - task: MSBuild@1
            displayName: 'Build 64-bit sqlite3x'
            inputs:
              solution: '$(REPOROOT)\thirdparty\sqlite3x\sqlite3x.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'release'
              msbuildArguments: '/t:sqlite3x /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\sqlite3x_64bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\sqlite3x_64bit.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true
              
          # Copy sqlite3x binaries.
          - task: PowerShell@2
            displayName: 'Copy sqlite3x binaries'
            inputs:
              targetType: 'inline'
              script: |
                if(!(Test-Path -path $(REPOROOT)\host\packages\sqlite3x))
                {
                  New-Item -ItemType directory -Path $(REPOROOT)\host\packages\sqlite3x\lib\win32\release
                  New-Item -ItemType directory -Path $(REPOROOT)\host\packages\sqlite3x\lib\x64\release
                }
                
                Copy-Item -Path $(REPOROOT)\thirdparty\sqlite3x\sqlite3x\lib\win32\Release\sqlite3x.lib -Destination $(REPOROOT)\host\packages\sqlite3x\lib\win32\release\sqlite3x.lib
                Copy-Item -Path $(REPOROOT)\thirdparty\sqlite3x\sqlite3x\lib\win32\Release\sqlite3x.pdb -Destination $(REPOROOT)\host\packages\sqlite3x\lib\win32\release\sqlite3x.pdb   
                Copy-Item -Path $(REPOROOT)\thirdparty\sqlite3x\sqlite3x\lib\x64\Release\sqlite3x.lib -Destination $(REPOROOT)\host\packages\sqlite3x\lib\x64\release\sqlite3x.lib
                Copy-Item -Path $(REPOROOT)\thirdparty\sqlite3x\sqlite3x\lib\x64\Release\sqlite3x.pdb -Destination $(REPOROOT)\host\packages\sqlite3x\lib\x64\release\sqlite3x.pdb
              workingDirectory: '$(REPOROOT)'
              
          # Build 32-bit agent binaries.
          - task: MSBuild@1
            displayName: 'Build 32-bit Agent Binaries'
            inputs:
              solution: '$(REPOROOT)\host\host.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'win32'
              configuration: 'release'
              msbuildArguments: '/t:unified_agent /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\AgentExes_32-bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\AgentExes_32-bit.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Build 64-bit agent binaries.
          - task: MSBuild@1
            displayName: 'Build 64-bit Agent Binaries'
            inputs:
              solution: '$(REPOROOT)\host\host.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'release'
              msbuildArguments: '/t:vacp;InMageVssProvider /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\AgentExes_64-bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\AgentExes_64-bit.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Generate DMSUPloader binaries.
          - task: MSBuild@1
            displayName: 'Generate DMSUPloader binaries'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\ASRSetup.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'Any CPU'
              configuration: 'release'
              msbuildArguments: '/t:DMSUploader /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\DMSUploader.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\DMSUploader.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true
              
          # Install Windows Driver Kit(WDK).
          - task: PowerShell@2
            displayName: 'Install WDK'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\InstallWDK.ps1

          # Build Win-7 driver.
          - task: MSBuild@1
            displayName: 'Build Win-7 Driver'
            inputs:
              solution: '$(REPOROOT)\host\drivers\InVolFlt\windows\DiskFlt\DiskFlt.vcxproj'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'Win7 Release'
              msbuildArguments: '/v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\DriverBuild-Win7.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\DriverBuild-Win7.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Build Win-8 driver.
          - task: MSBuild@1
            displayName: 'Build Win-8 Driver'
            inputs:
              solution: '$(REPOROOT)\host\drivers\InVolFlt\windows\DiskFlt\DiskFlt.vcxproj'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'Win8 Release'
              msbuildArguments: '/v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\DriverBuild-Win8.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\DriverBuild-Win8.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Build Win-8.1 driver.
          - task: MSBuild@1
            displayName: 'Build Win-8.1 Driver'
            inputs:
              solution: '$(REPOROOT)\host\drivers\InVolFlt\windows\DiskFlt\DiskFlt.vcxproj'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'Win8.1 Release'
              msbuildArguments: '/v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\DriverBuild-Win8.1.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\DriverBuild-Win8.1.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Sign exes/dlls/sys files.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-1'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'  #https://onebranch.visualstudio.com/Build/_git/OneBranch.Sign?path=/ESRP/Templates/operations/280.json&_a=contents&version=GBmaster
              disable_strong_name_signing: true
              files_to_sign: 'host/**/*.exe;Solutions/**/*.exe;host/**/*.dll;host/drivers/**/*.sys;!host/packages/**;!host/Utilities/Windows/scsicmdutil/Release/scsicmdutil.exe'
              search_root: '$(REPOROOT)/'

          # Sign rest of the agent files.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-2'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              file_list_path: $(REPOROOT)/.pipelines/SignListAgent.txt

          # Copy DMSUploader artifacts.
          - task: PowerShell@2
            displayName: 'Copy DMSUploader Artifacts'
            inputs:
              targetType: 'inline'
              script: |
                if(!(Test-Path -path $(OUTPUTROOT)\DMSUploader))
                {
                  New-Item -ItemType directory -Path $(OUTPUTROOT)\DMSUploader
                }
                Copy-Item -Path $(REPOROOT)\host\ASRSetup\DMSUploader\bin\Release\* -Destination $(OUTPUTROOT)\DMSUploader\ -Recurse -PassThru
                Copy-Item -Path $(REPOROOT)\build\AgentUpload\* -Destination $(OUTPUTROOT)\DMSUploader\ -Recurse -PassThru
              workingDirectory: '$(REPOROOT)'
              
          # Install WiX toolset.
          - task: PowerShell@2
            displayName: 'Install WiX Toolset'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\InstallWiXToolset.ps1

          # Copy WiX target files.
          - task: PowerShell@2
            displayName: 'Copy WiX Targets Files'
            inputs:
              targetType: 'inline'
              script: |
                  New-Item -Path 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\WiX\v3.x\' -ItemType Directory -Force
                  Copy-Item '$(REPOROOT)\.pipelines\wix.targets' -Destination 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\WiX\v3.x\' -Force
                  Copy-Item '$(REPOROOT)\.pipelines\wix.ca.targets' -Destination 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\WiX\v3.x\' -Force
                  Copy-Item '$(REPOROOT)\.pipelines\wix.nativeca.targets' -Destination 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\WiX\v3.x\' -Force

          # Build UnifiedAgentInstaller project.
          - task: MSBuild@1
            displayName: 'Build UnifiedAgentInstaller Project'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\ASRSetup.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'win32'
              configuration: 'release'
              msbuildArguments: '/t:UnifiedAgentInstaller /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\UnifiedAgentInstaller.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\UnifiedAgentInstaller.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Sign UnifiedAgentInstaller exes/dlls.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-3'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/**/*.exe;host/ASRSetup/**/*.dll;!host/ASRSetup/**/Newtonsoft.Json.dll;'
              search_root: '$(REPOROOT)/'

          # Build UnifiedAgentCustomActions.dll.
          - task: PowerShell@2
            displayName: 'Build UnifiedAgentCustomActions.dll'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\BuildCustomActions.ps1
              arguments: '-MsBuildExePath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe" -Project "$(REPOROOT)\host\ASRSetup\UnifiedAgentCustomActions\UnifiedAgentCustomActions.csproj" -Platform x86 -LogsFolder $(OUTPUTROOT)\logs\'

          # Sign UnifiedAgentCustomActions.dll.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-4'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/UnifiedAgentCustomActions/obj/x86/Release/UnifiedAgentCustomActions.dll'
              search_root: '$(REPOROOT)/'

          # Build UnifiedAgentCustomActions.CA.dll.
          - task: MSBuild@1
            displayName: 'Build UnifiedAgentCustomActions.CA.dll'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\UnifiedAgentCustomActions\UnifiedAgentCustomActions.csproj'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x86'
              configuration: 'release'
              msbuildArguments: '-t:build /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\CustomActionsFinal.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\CustomActionsFinal.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Sign UnifiedAgentCustomActions.CA.dll.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-5'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/UnifiedAgentCustomActions/bin/Release/UnifiedAgentCustomActions.CA.dll'
              search_root: '$(REPOROOT)/'

          # Build 32-bit MSI.
          - task: MSBuild@1
            displayName: 'Build 32-bit MSI'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\ASRSetup.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x86'
              configuration: 'release'
              msbuildArguments: '/t:UnifiedAgentMSI /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\MSI_32-bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\MSI_32-bit.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Build 64-bit MSI.
          - task: MSBuild@1
            displayName: 'Build 64-bit MSI'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\ASRSetup.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'release'
              msbuildArguments: '/t:UnifiedAgentMSI /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\MSI_64-bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\MSI_64-bit.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Sign 32-bit and 64-bit MSIs.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-6'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/UnifiedAgentMSI/**/*.msi;'
              search_root: '$(REPOROOT)/'

          # Generate Unified Agent package.
          - task: MSBuild@1
            displayName: 'Generate Unified Agent Package'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\ASRSetup.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'Any CPU'
              configuration: 'release'
              msbuildArguments: '/t:PackagerUnifiedAgent /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\PackagerUnifiedAgent.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\PackagerUnifiedAgent.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Sign Unified Agent package.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-7'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/PackagerUnifiedAgent/bin/Release/MicrosoftAzureSiteRecoveryUnifiedAgent.exe;'
              search_root: '$(REPOROOT)/'

          # Copy build artifacts.
          - task: PowerShell@2
            displayName: 'Copy Build Artifacts'
            inputs:
              targetType: 'inline'
              script: |
                Copy-Item -Path $(REPOROOT)\host\ASRSetup\PackagerUnifiedAgent\bin\Release\MicrosoftAzureSiteRecoveryUnifiedAgent.exe -Destination $(OUTPUTROOT)\$(AGENTINSTALLERNAME)
                if(!(Test-Path -path $(OUTPUTROOT)\cxcli))
                {
                  New-Item -ItemType directory -Path $(OUTPUTROOT)\cxcli
                }
                Copy-Item -Path $(REPOROOT)\host\cxcli\Release\cxcli.exe -Destination $(OUTPUTROOT)\cxcli\cxcli.exe
                if(!(Test-Path -path $(OUTPUTROOT)\AgentInstaller))
                {
                  New-Item -ItemType directory -Path $(OUTPUTROOT)\AgentInstaller
                }
                Copy-Item -Path $(REPOROOT)\host\ASRSetup\UnifiedAgentInstaller\bin\Release\Interop.COMAdmin.dll -Destination $(OUTPUTROOT)\AgentInstaller\Interop.COMAdmin.dll
                Copy-Item -Path $(REPOROOT)\host\ASRSetup\UnifiedAgentInstaller\bin\Release\UnifiedAgentInstaller.exe -Destination $(OUTPUTROOT)\AgentInstaller\UnifiedAgentInstaller.exe
                Copy-Item -Path $(REPOROOT)\host\ASRSetup\UnifiedAgentInstaller\bin\Release\UnifiedAgentInstaller.exe.config -Destination $(OUTPUTROOT)\AgentInstaller\UnifiedAgentInstaller.exe.config
                Copy-Item -Path $(REPOROOT)\host\ASRSetup\WrapperUnifiedAgent\bin\Release\UnifiedAgent.exe -Destination $(OUTPUTROOT)\AgentInstaller\UnifiedAgent.exe
                Copy-Item -Path $(REPOROOT)\host\ASRSetup\WrapperUnifiedAgent\bin\Release\UnifiedAgent.exe.config -Destination $(OUTPUTROOT)\AgentInstaller\UnifiedAgent.exe.config
                Copy-Item -Path $(REPOROOT)\host\ASRSetup\UnifiedAgentMSI\x64\bin\Release\UnifiedAgentMSI.msi -Destination $(OUTPUTROOT)\AgentInstaller\UnifiedAgentMSI.msi
                Write-Output $(AGENTVERSION) | Out-File $(OUTPUTROOT)\Build_details.txt
                Write-Output $(AGENTINSTALLERNAME) | Out-File -Append $(OUTPUTROOT)\Build_details.txt 
                if(!(Test-Path -path $(OUTPUTROOT)\DataProtectionBinaries))
                {
                  New-Item -ItemType directory -Path $(OUTPUTROOT)\DataProtectionBinaries
                }
                Copy-Item -Path $(REPOROOT)\host\DataProtectionSyncRcm\release\DataProtectionSyncRcm.exe -Destination $(OUTPUTROOT)\DataProtectionBinaries\DataProtectionSyncRcm.exe
                Copy-Item -Path $(REPOROOT)\host\DataProtectionSyncRcm\release\DataProtectionSyncRcm.pdb -Destination $(OUTPUTROOT)\DataProtectionBinaries\DataProtectionSyncRcm.pdb
              workingDirectory: '$(REPOROOT)'

          # Capture symbol files.
          - task: PowerShell@2
            displayName: 'Capture Symbol Files'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\CaptureSymbols.ps1
              arguments: '-SymbolsFilesList $(REPOROOT)\.pipelines\PdbListAgent.txt -SourceFolder $(REPOROOT) -TargetFolder $(OUTPUTROOT)\Symbols'
              
          # Create nuspec file for DataProtectionBinaries.
          - task: PowerShell@2
            displayName: 'Create nuspec file for DataProtectionBinaries'
            inputs:
              targetType: 'inline'
              script: |
                $files = Get-ChildItem $(OUTPUTROOT)\DataProtectionBinaries\*
                Write-Host $files.FullName
                $fileCount = $files | Measure-Object | %{$_.Count}
                $pkgName = "ASR_DP_BINARIES_" + "$(BRANCHNAME)"
                $nugetTemplatespec = "$(REPOROOT)\.pipelines\nuget_template.nuspec"
                $nuspec = [xml](Get-Content $nugetTemplatespec)
                $nuspec.package.metadata.id = $pkgName
                $nuspec.package.metadata.description = $pkgName
                $nuspec.package.metadata.version = "$(AGENTVERSION)"
                $filesElement = $nuspec.CreateElement("files", $nuspec.DocumentElement.NamespaceURI)
                For ($i=0; $i -lt $fileCount; $i++) {
                    $filePath = $files[$i]
                    $fileName = [System.IO.Path]::GetFileName($filePath)
                    $fileElement = $nuspec.CreateElement("file", $nuspec.DocumentElement.NamespaceURI)
                    $fileElement.SetAttribute("src","$filePath")
                    $fileElement.SetAttribute("target","$fileName")
                    $filesElement.AppendChild($fileElement)
                }
                $nuspec.package.AppendChild($filesElement)
                $nuspecName = -Join ($pkgName,".","nuspec")
                $nuspecPath = -Join ("$(REPOROOT)","\",$nuspecName)
                $nuspec.Save($nuspecPath);
              workingDirectory: '$(REPOROOT)'
                
          - task: NuGetCommand@2
            displayName: 'Package DataProtectionBinaries nuget'
            inputs:
              command: pack
              packagesToPack: '$(REPOROOT)\*.nuspec'
              packDestination: '$(Build.SourcesDirectory)\out\packages'
              allowPackageConflicts: true
            
          - task: NuGetCommand@2
            displayName: 'Nuget Push to One/ASRDPNugetFeed'
            inputs:
              command: 'push'
              packagesToPush: '$(Build.SourcesDirectory)\out\packages\*.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: 'One/ASRDPNugetFeed'
              allowPackageConflicts: true
          
          # - task: NuGetCommand@2
            # displayName: 'Package agent nuget'
            # inputs:
              # command: pack
              # packagesToPack: '$(Build.SourcesDirectory)\.pipelines\Agent.nuspec'
              # packDestination: '$(Build.SourcesDirectory)\out\packages'
              # buildProperties: 'NugetVersion=$(AGENTVERSION);id=Windows_$(Build.SourceBranchName);agentPath=$(OUTPUTROOT)\$(AGENTINSTALLERNAME)'
              # allowPackageConflicts: true
            
          # - task: NuGetCommand@2
            # displayName: 'Nuget Push to One/ASRDPNugetFeed'
            # inputs:
              # command: 'push'
              # packagesToPush: '$(Build.SourcesDirectory)\out\packages\*.nupkg'
              # nuGetFeedType: 'internal'
              # publishVstsFeed: 'One/ASRDPNugetFeed'
