#################################################################################
#                        OneBranch Pipelines - Buddy                            #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none # https://aka.ms/obpipelines/triggers

variables:
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  VISTADRIVERSNUGETPATH: $(REPOROOT)\host\drivers\InVolFlt\windows\DiskFlt
  BRANCHNAME: $(Build.SourceBranchName)
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2019:latest'
  CDP_BUILD_TAG: windowsagent

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    cloudvault:
      enabled: true
      runmode: stage
      artifacts:
        - drop_build_main
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # credscan:
      #   suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      binskim:
        break: false # always break the build on binskim issues. You can disable it by setting to 'false'
      policheck:
        break: false # always break the build on policheck issues. You can disable it by setting to 'false'
      # suppression:
      #   suppressionFile: $(Build.SourcesDirectory)\.gdn\global.gdnsuppress

    stages:
    - stage: build
      jobs:
      - job: main
        pool:
          type: windows

        variables:
          ob_outputDirectory: '$(REPOROOT)\Out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts

        steps:
          # Restore NuGet packages.
          - task: NuGetCommand@2
            displayName: 'Restore NuGet Packages'
            inputs:
              command: 'restore'
              restoreSolution: '$(REPOROOT)\host\host.sln'
              feedsToUse: 'config'
              nugetConfigPath: '$(REPOROOT)\.config\NuGet.config'

          # Generate version files.
          - task: PowerShell@2
            displayName: 'Generate Version Files'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\GenerateVersionFiles.ps1
              arguments: '-SourcesRootDirectory $(REPOROOT)'
              
          # Get version details from VersionData.txt
          - task: PowerShell@2
            displayName: "Get Version Data"
            inputs:
              targetType: 'inline'
              script: |
                $VersionDataContents = Get-Content -Path "$(Build.SourcesDirectory)\VersionData.txt" -Raw | ConvertFrom-StringData
                $AgentVersion = $VersionDataContents.BuildVersion
                $AgentInstallerName = $VersionDataContents.AgentInstallerName
                Write-Host "##vso[task.setvariable variable=AGENTVERSION;]$AgentVersion"
                Write-Host "##vso[task.setvariable variable=AGENTINSTALLERNAME;]$AgentInstallerName"
          
          # Restore NuGet packages.
          - task: NuGetCommand@2
            displayName: 'Downlaod Driver package'
            inputs:
              command: custom
              arguments: 'install VistaDrivers -OutputDirectory $(VISTADRIVERSNUGETPATH) -ConfigFile "$(REPOROOT)\.config\NuGet.config"'

          # Copy vista drivers.
          - task: PowerShell@2
            displayName: 'Copy vista drivers'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\CopyVistaDrivers.ps1
              arguments: '-SourceDirectory $(VISTADRIVERSNUGETPATH) -DriverDirectoryName VistaDrivers'
              
          # Build 32-bit sqlite3x.
          - task: MSBuild@1
            displayName: 'Build 32-bit sqlite3x'
            inputs:
              solution: '$(REPOROOT)\thirdparty\sqlite3x\sqlite3x.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'win32'
              configuration: 'release'
              msbuildArguments: '/t:sqlite3x /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\sqlite3x_32bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\sqlite3x_32bit.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true
              
          # Build 64-bit sqlite3x.
          - task: MSBuild@1
            displayName: 'Build 64-bit sqlite3x'
            inputs:
              solution: '$(REPOROOT)\thirdparty\sqlite3x\sqlite3x.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'release'
              msbuildArguments: '/t:sqlite3x /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\sqlite3x_64bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\sqlite3x_64bit.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true
              
          # Copy sqlite3x binaries.
          - task: PowerShell@2
            displayName: 'Copy sqlite3x binaries'
            inputs:
              targetType: 'inline'
              script: |
                if(!(Test-Path -path $(REPOROOT)\host\packages\sqlite3x))
                {
                  New-Item -ItemType directory -Path $(REPOROOT)\host\packages\sqlite3x\lib\win32\release
                  New-Item -ItemType directory -Path $(REPOROOT)\host\packages\sqlite3x\lib\x64\release
                }
                
                Copy-Item -Path $(REPOROOT)\thirdparty\sqlite3x\sqlite3x\lib\win32\Release\sqlite3x.lib -Destination $(REPOROOT)\host\packages\sqlite3x\lib\win32\release\sqlite3x.lib
                Copy-Item -Path $(REPOROOT)\thirdparty\sqlite3x\sqlite3x\lib\win32\Release\sqlite3x.pdb -Destination $(REPOROOT)\host\packages\sqlite3x\lib\win32\release\sqlite3x.pdb   
                Copy-Item -Path $(REPOROOT)\thirdparty\sqlite3x\sqlite3x\lib\x64\Release\sqlite3x.lib -Destination $(REPOROOT)\host\packages\sqlite3x\lib\x64\release\sqlite3x.lib
                Copy-Item -Path $(REPOROOT)\thirdparty\sqlite3x\sqlite3x\lib\x64\Release\sqlite3x.pdb -Destination $(REPOROOT)\host\packages\sqlite3x\lib\x64\release\sqlite3x.pdb
              workingDirectory: '$(REPOROOT)'
              
          # Build 32-bit agent binaries.
          - task: MSBuild@1
            displayName: 'Build 32-bit Agent Binaries'
            inputs:
              solution: '$(REPOROOT)\host\host.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'win32'
              configuration: 'release'
              msbuildArguments: '/t:unified_agent /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\AgentExes_32-bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\AgentExes_32-bit.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Build 64-bit agent binaries.
          - task: MSBuild@1
            displayName: 'Build 64-bit Agent Binaries'
            inputs:
              solution: '$(REPOROOT)\host\host.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'release'
              msbuildArguments: '/t:vacp;InMageVssProvider /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\AgentExes_64-bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\AgentExes_64-bit.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Install Windows Driver Kit(WDK).
          - task: PowerShell@2
            displayName: 'Install WDK'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\InstallWDK.ps1

          # Build Win-7 driver.
          - task: MSBuild@1
            displayName: 'Build Win-7 Driver'
            inputs:
              solution: '$(REPOROOT)\host\drivers\InVolFlt\windows\DiskFlt\DiskFlt.vcxproj'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'Win7 Release'
              msbuildArguments: '/v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\DriverBuild-Win7.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\DriverBuild-Win7.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Build Win-8 driver.
          - task: MSBuild@1
            displayName: 'Build Win-8 Driver'
            inputs:
              solution: '$(REPOROOT)\host\drivers\InVolFlt\windows\DiskFlt\DiskFlt.vcxproj'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'Win8 Release'
              msbuildArguments: '/v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\DriverBuild-Win8.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\DriverBuild-Win8.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Build Win-8.1 driver.
          - task: MSBuild@1
            displayName: 'Build Win-8.1 Driver'
            inputs:
              solution: '$(REPOROOT)\host\drivers\InVolFlt\windows\DiskFlt\DiskFlt.vcxproj'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'Win8.1 Release'
              msbuildArguments: '/v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\DriverBuild-Win8.1.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\DriverBuild-Win8.1.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Sign exes/dlls/sys files.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-1'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'  #https://onebranch.visualstudio.com/Build/_git/OneBranch.Sign?path=/ESRP/Templates/operations/280.json&_a=contents&version=GBmaster
              disable_strong_name_signing: true
              files_to_sign: 'host/**/*.exe;Solutions/**/*.exe;host/**/*.dll;host/drivers/**/*.sys;!host/packages/**;!host/Utilities/Windows/scsicmdutil/Release/scsicmdutil.exe'
              search_root: '$(REPOROOT)/'

          # Sign rest of the agent files.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-2'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              file_list_path: $(REPOROOT)/.pipelines/SignListAgent.txt

          # Install WiX toolset.
          - task: PowerShell@2
            displayName: 'Install WiX Toolset'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\InstallWiXToolset.ps1

          # Copy WiX target files.
          - task: PowerShell@2
            displayName: 'Copy WiX Targets Files'
            inputs:
              targetType: 'inline'
              script: |
                  New-Item -Path 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\WiX\v3.x\' -ItemType Directory -Force
                  Copy-Item '$(REPOROOT)\.pipelines\wix.targets' -Destination 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\WiX\v3.x\' -Force
                  Copy-Item '$(REPOROOT)\.pipelines\wix.ca.targets' -Destination 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\WiX\v3.x\' -Force
                  Copy-Item '$(REPOROOT)\.pipelines\wix.nativeca.targets' -Destination 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\WiX\v3.x\' -Force

          # Build UnifiedAgentInstaller project.
          - task: MSBuild@1
            displayName: 'Build UnifiedAgentInstaller Project'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\ASRSetup.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'win32'
              configuration: 'release'
              msbuildArguments: '/t:UnifiedAgentInstaller /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\UnifiedAgentInstaller.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\UnifiedAgentInstaller.err;errorsonly'
              clean: true
              maximumCpuCount: true
              logProjectEvents: true

          # Sign UnifiedAgentInstaller exes/dlls.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-3'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/**/*.exe;host/ASRSetup/**/*.dll;!host/ASRSetup/**/Newtonsoft.Json.dll;'
              search_root: '$(REPOROOT)/'

          # Build UnifiedAgentCustomActions.dll.
          - task: PowerShell@2
            displayName: 'Build UnifiedAgentCustomActions.dll'
            inputs:
              targetType: 'filePath'
              filePath: $(REPOROOT)\.pipelines\BuildCustomActions.ps1
              arguments: '-MsBuildExePath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe" -Project "$(REPOROOT)\host\ASRSetup\UnifiedAgentCustomActions\UnifiedAgentCustomActions.csproj" -Platform x86 -LogsFolder $(OUTPUTROOT)\logs\'

          # Sign UnifiedAgentCustomActions.dll.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-4'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/UnifiedAgentCustomActions/obj/x86/Release/UnifiedAgentCustomActions.dll'
              search_root: '$(REPOROOT)/'

          # Build UnifiedAgentCustomActions.CA.dll.
          - task: MSBuild@1
            displayName: 'Build UnifiedAgentCustomActions.CA.dll'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\UnifiedAgentCustomActions\UnifiedAgentCustomActions.csproj'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x86'
              configuration: 'release'
              msbuildArguments: '-t:build /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\CustomActionsFinal.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\CustomActionsFinal.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Sign UnifiedAgentCustomActions.CA.dll.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-5'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/UnifiedAgentCustomActions/bin/Release/UnifiedAgentCustomActions.CA.dll'
              search_root: '$(REPOROOT)/'

          # Build 32-bit MSI.
          - task: MSBuild@1
            displayName: 'Build 32-bit MSI'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\ASRSetup.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x86'
              configuration: 'release'
              msbuildArguments: '/t:UnifiedAgentMSI /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\MSI_32-bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\MSI_32-bit.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Build 64-bit MSI.
          - task: MSBuild@1
            displayName: 'Build 64-bit MSI'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\ASRSetup.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'x64'
              configuration: 'release'
              msbuildArguments: '/t:UnifiedAgentMSI /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\MSI_64-bit.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\MSI_64-bit.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Sign 32-bit and 64-bit MSIs.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-6'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/UnifiedAgentMSI/**/*.msi;'
              search_root: '$(REPOROOT)/'

          # Generate Unified Agent package.
          - task: MSBuild@1
            displayName: 'Generate Unified Agent Package'
            inputs:
              solution: '$(REPOROOT)\host\ASRSetup\ASRSetup.sln'
              msbuildLocationMethod: 'location'
              msbuildLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
              platform: 'Any CPU'
              configuration: 'release'
              msbuildArguments: '/t:PackagerUnifiedAgent /v:n /nr:false /flp1:Verbosity=n;LogFile=$(OUTPUTROOT)\logs\PackagerUnifiedAgent.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\PackagerUnifiedAgent.err;errorsonly'
              clean: false
              maximumCpuCount: true
              logProjectEvents: true

          # Sign Unified Agent package.
          - task: onebranch.pipeline.signing@1
            displayName: 'Code Signing Phase-7'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              signing_profile: ''
              cp_code: '280'
              disable_strong_name_signing: true
              files_to_sign: 'host/ASRSetup/PackagerUnifiedAgent/bin/Release/MicrosoftAzureSiteRecoveryUnifiedAgent.exe;'
              search_root: '$(REPOROOT)/'

          # Copy build artifacts.
          - task: PowerShell@2
            displayName: 'Copy Build Artifacts'
            inputs:
              targetType: 'inline'
              script: |
                Copy-Item -Path $(REPOROOT)\host\ASRSetup\PackagerUnifiedAgent\bin\Release\MicrosoftAzureSiteRecoveryUnifiedAgent.exe -Destination $(OUTPUTROOT)\$(AGENTINSTALLERNAME)
              workingDirectory: '$(REPOROOT)'