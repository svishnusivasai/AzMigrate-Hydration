<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * rules Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:29 +0530	
 * Pattern Version:1.0
 */

class RulesVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $ruleId;
public $rule;
public $dayType;
public $perpetual;
public $startDate;
public $endDate;
public $singleDate;
public $runType;
public $startTime;
public $endTime;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function RulesVO(){

}

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->ruleId="0";
	$this->rule="0";
	$this->dayType="ALL";
	$this->perpetual="1";
	$this->startDate="0000-00-00";
	$this->endDate="0000-00-00";
	$this->singleDate="0000-00-00";
	$this->runType="ALLDAY";
	$this->startTime="00:00:00";
	$this->endTime="00:00:00";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_rule_id() {
	return $this->ruleId;
}
function set_rule_id($ruleIdIn) { 
	$this->ruleId=$ruleIdIn;
}

function isset_rule_id() {
	return isset($this->ruleId);
}


function get_rule() {
	return $this->rule;
}
function set_rule($ruleIn) { 
	$this->rule=$ruleIn;
}

function isset_rule() {
	return isset($this->rule);
}


function get_day_type() {
	return $this->dayType;
}
function set_day_type($dayTypeIn) { 
	$this->dayType=$dayTypeIn;
}

function isset_day_type() {
	return isset($this->dayType);
}


function get_perpetual() {
	return $this->perpetual;
}
function set_perpetual($perpetualIn) { 
	$this->perpetual=$perpetualIn;
}

function isset_perpetual() {
	return isset($this->perpetual);
}


function get_start_date() {
	return $this->startDate;
}
function set_start_date($startDateIn) { 
	$this->startDate=$startDateIn;
}

function isset_start_date() {
	return isset($this->startDate);
}


function get_end_date() {
	return $this->endDate;
}
function set_end_date($endDateIn) { 
	$this->endDate=$endDateIn;
}

function isset_end_date() {
	return isset($this->endDate);
}


function get_single_date() {
	return $this->singleDate;
}
function set_single_date($singleDateIn) { 
	$this->singleDate=$singleDateIn;
}

function isset_single_date() {
	return isset($this->singleDate);
}


function get_run_type() {
	return $this->runType;
}
function set_run_type($runTypeIn) { 
	$this->runType=$runTypeIn;
}

function isset_run_type() {
	return isset($this->runType);
}


function get_start_time() {
	return $this->startTime;
}
function set_start_time($startTimeIn) { 
	$this->startTime=$startTimeIn;
}

function isset_start_time() {
	return isset($this->startTime);
}


function get_end_time() {
	return $this->endTime;
}
function set_end_time($endTimeIn) { 
	$this->endTime=$endTimeIn;
}

function isset_end_time() {
	return isset($this->endTime);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($ruleIdIn,$ruleIn,$dayTypeIn,$perpetualIn,$startDateIn,$endDateIn,$singleDateIn,$runTypeIn,$startTimeIn,$endTimeIn){
	$this->ruleId=$ruleIdIn;
	$this->rule=$ruleIn;
	$this->dayType=$dayTypeIn;
	$this->perpetual=$perpetualIn;
	$this->startDate=$startDateIn;
	$this->endDate=$endDateIn;
	$this->singleDate=$singleDateIn;
	$this->runType=$runTypeIn;
	$this->startTime=$startTimeIn;
	$this->endTime=$endTimeIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->ruleId=$ary["ruleId"];
	$this->rule=$ary["rule"];
	$this->dayType=$ary["dayType"];
	$this->perpetual=$ary["perpetual"];
	$this->startDate=$ary["startDate"];
	$this->endDate=$ary["endDate"];
	$this->singleDate=$ary["singleDate"];
	$this->runType=$ary["runType"];
	$this->startTime=$ary["startTime"];
	$this->endTime=$ary["endTime"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["ruleId"]=$this->ruleId;
		$oAry["rule"]=$this->rule;
		$oAry["dayType"]=$this->dayType;
		$oAry["perpetual"]=$this->perpetual;
		$oAry["startDate"]=$this->startDate;
		$oAry["endDate"]=$this->endDate;
		$oAry["singleDate"]=$this->singleDate;
		$oAry["runType"]=$this->runType;
		$oAry["startTime"]=$this->startTime;
		$oAry["endTime"]=$this->endTime;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_rule_id() != $this->ruleId) {
		return(false);
	}
	if ($valueObject->get_rule() != $this->rule) {
		return(false);
	}
	if ($valueObject->get_day_type() != $this->dayType) {
		return(false);
	}
	if ($valueObject->get_perpetual() != $this->perpetual) {
		return(false);
	}
	if ($valueObject->get_start_date() != $this->startDate) {
		return(false);
	}
	if ($valueObject->get_end_date() != $this->endDate) {
		return(false);
	}
	if ($valueObject->get_single_date() != $this->singleDate) {
		return(false);
	}
	if ($valueObject->get_run_type() != $this->runType) {
		return(false);
	}
	if ($valueObject->get_start_time() != $this->startTime) {
		return(false);
	}
	if ($valueObject->get_end_time() != $this->endTime) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass RulesVO, mapping to table rules\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."ruleId = ".$this->ruleId."\n";
	$out = $out."rule = ".$this->rule."\n";
	$out = $out."dayType = ".$this->dayType."\n";
	$out = $out."perpetual = ".$this->perpetual."\n";
	$out = $out."startDate = ".$this->startDate."\n";
	$out = $out."endDate = ".$this->endDate."\n";
	$out = $out."singleDate = ".$this->singleDate."\n";
	$out = $out."runType = ".$this->runType."\n";
	$out = $out."startTime = ".$this->startTime."\n";
	$out = $out."endTime = ".$this->endTime."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new RulesVO();
	
	 $cloned->set_rule_id($this->ruleId);
	 $cloned->set_rule($this->rule);
	 $cloned->set_day_type($this->dayType);
	 $cloned->set_perpetual($this->perpetual);
	 $cloned->set_start_date($this->startDate);
	 $cloned->set_end_date($this->endDate);
	 $cloned->set_single_date($this->singleDate);
	 $cloned->set_run_type($this->runType);
	 $cloned->set_start_time($this->startTime);
	 $cloned->set_end_time($this->endTime);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
