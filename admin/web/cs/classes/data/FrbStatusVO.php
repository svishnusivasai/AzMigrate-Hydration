<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * frbStatus Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:26 +0530	
 * Pattern Version:1.0
 */

class FrbStatusVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $jobConfigId;
public $startTime;
public $endTime;
public $exitCode;
public $exitReason;
public $statusUpdateTime;
public $totalProgressBytes;
public $currentProgressBytes;
public $compressTotalBytes;
public $compressDifferentialBytes;
public $compressSentBytes;
public $log;
public $logOffset;
public $logComplete;
public $lastProgressTime;
public $rollOverLine;
public $daemonLogPath;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function FrbStatusVO(){

}

/*
	function FrbStatusVO(idIn){
 this->id=$idIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->jobConfigId="0";
	$this->startTime="0000-00-00 00:00:00";
	$this->endTime="0000-00-00 00:00:00";
	$this->exitCode="0";
	$this->exitReason="exit_none";
	$this->statusUpdateTime="0000-00-00 00:00:00";
	$this->totalProgressBytes="0";
	$this->currentProgressBytes="0";
	$this->compressTotalBytes="0";
	$this->compressDifferentialBytes="0";
	$this->compressSentBytes="0";
	$this->logOffset="0";
	$this->logComplete="0";
	$this->lastProgressTime="0000-00-00 00:00:00";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_job_config_id() {
	return $this->jobConfigId;
}
function set_job_config_id($jobConfigIdIn) { 
	$this->jobConfigId=$jobConfigIdIn;
}

function isset_job_config_id() {
	return isset($this->jobConfigId);
}


function get_start_time() {
	return $this->startTime;
}
function set_start_time($startTimeIn) { 
	$this->startTime=$startTimeIn;
}

function isset_start_time() {
	return isset($this->startTime);
}


function get_end_time() {
	return $this->endTime;
}
function set_end_time($endTimeIn) { 
	$this->endTime=$endTimeIn;
}

function isset_end_time() {
	return isset($this->endTime);
}


function get_exit_code() {
	return $this->exitCode;
}
function set_exit_code($exitCodeIn) { 
	$this->exitCode=$exitCodeIn;
}

function isset_exit_code() {
	return isset($this->exitCode);
}


function get_exit_reason() {
	return $this->exitReason;
}
function set_exit_reason($exitReasonIn) { 
	$this->exitReason=$exitReasonIn;
}

function isset_exit_reason() {
	return isset($this->exitReason);
}


function get_status_update_time() {
	return $this->statusUpdateTime;
}
function set_status_update_time($statusUpdateTimeIn) { 
	$this->statusUpdateTime=$statusUpdateTimeIn;
}

function isset_status_update_time() {
	return isset($this->statusUpdateTime);
}


function get_total_progress_bytes() {
	return $this->totalProgressBytes;
}
function set_total_progress_bytes($totalProgressBytesIn) { 
	$this->totalProgressBytes=$totalProgressBytesIn;
}

function isset_total_progress_bytes() {
	return isset($this->totalProgressBytes);
}


function get_current_progress_bytes() {
	return $this->currentProgressBytes;
}
function set_current_progress_bytes($currentProgressBytesIn) { 
	$this->currentProgressBytes=$currentProgressBytesIn;
}

function isset_current_progress_bytes() {
	return isset($this->currentProgressBytes);
}


function get_compress_total_bytes() {
	return $this->compressTotalBytes;
}
function set_compress_total_bytes($compressTotalBytesIn) { 
	$this->compressTotalBytes=$compressTotalBytesIn;
}

function isset_compress_total_bytes() {
	return isset($this->compressTotalBytes);
}


function get_compress_differential_bytes() {
	return $this->compressDifferentialBytes;
}
function set_compress_differential_bytes($compressDifferentialBytesIn) { 
	$this->compressDifferentialBytes=$compressDifferentialBytesIn;
}

function isset_compress_differential_bytes() {
	return isset($this->compressDifferentialBytes);
}


function get_compress_sent_bytes() {
	return $this->compressSentBytes;
}
function set_compress_sent_bytes($compressSentBytesIn) { 
	$this->compressSentBytes=$compressSentBytesIn;
}

function isset_compress_sent_bytes() {
	return isset($this->compressSentBytes);
}


function get_log() {
	return $this->log;
}
function set_log($logIn) { 
	$this->log=$logIn;
}

function isset_log() {
	return isset($this->log);
}


function get_log_offset() {
	return $this->logOffset;
}
function set_log_offset($logOffsetIn) { 
	$this->logOffset=$logOffsetIn;
}

function isset_log_offset() {
	return isset($this->logOffset);
}


function get_log_complete() {
	return $this->logComplete;
}
function set_log_complete($logCompleteIn) { 
	$this->logComplete=$logCompleteIn;
}

function isset_log_complete() {
	return isset($this->logComplete);
}


function get_last_progress_time() {
	return $this->lastProgressTime;
}
function set_last_progress_time($lastProgressTimeIn) { 
	$this->lastProgressTime=$lastProgressTimeIn;
}

function isset_last_progress_time() {
	return isset($this->lastProgressTime);
}


function get_roll_over_line() {
	return $this->rollOverLine;
}
function set_roll_over_line($rollOverLineIn) { 
	$this->rollOverLine=$rollOverLineIn;
}

function isset_roll_over_line() {
	return isset($this->rollOverLine);
}


function get_daemon_log_path() {
	return $this->daemonLogPath;
}
function set_daemon_log_path($daemonLogPathIn) { 
	$this->daemonLogPath=$daemonLogPathIn;
}

function isset_daemon_log_path() {
	return isset($this->daemonLogPath);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$jobConfigIdIn,$startTimeIn,$endTimeIn,$exitCodeIn,$exitReasonIn,$statusUpdateTimeIn,$totalProgressBytesIn,$currentProgressBytesIn,$compressTotalBytesIn,$compressDifferentialBytesIn,$compressSentBytesIn,$logIn,$logOffsetIn,$logCompleteIn,$lastProgressTimeIn,$rollOverLineIn,$daemonLogPathIn){
	$this->id=$idIn;
	$this->jobConfigId=$jobConfigIdIn;
	$this->startTime=$startTimeIn;
	$this->endTime=$endTimeIn;
	$this->exitCode=$exitCodeIn;
	$this->exitReason=$exitReasonIn;
	$this->statusUpdateTime=$statusUpdateTimeIn;
	$this->totalProgressBytes=$totalProgressBytesIn;
	$this->currentProgressBytes=$currentProgressBytesIn;
	$this->compressTotalBytes=$compressTotalBytesIn;
	$this->compressDifferentialBytes=$compressDifferentialBytesIn;
	$this->compressSentBytes=$compressSentBytesIn;
	$this->log=$logIn;
	$this->logOffset=$logOffsetIn;
	$this->logComplete=$logCompleteIn;
	$this->lastProgressTime=$lastProgressTimeIn;
	$this->rollOverLine=$rollOverLineIn;
	$this->daemonLogPath=$daemonLogPathIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->jobConfigId=$ary["jobConfigId"];
	$this->startTime=$ary["startTime"];
	$this->endTime=$ary["endTime"];
	$this->exitCode=$ary["exitCode"];
	$this->exitReason=$ary["exitReason"];
	$this->statusUpdateTime=$ary["statusUpdateTime"];
	$this->totalProgressBytes=$ary["totalProgressBytes"];
	$this->currentProgressBytes=$ary["currentProgressBytes"];
	$this->compressTotalBytes=$ary["compressTotalBytes"];
	$this->compressDifferentialBytes=$ary["compressDifferentialBytes"];
	$this->compressSentBytes=$ary["compressSentBytes"];
	$this->log=$ary["log"];
	$this->logOffset=$ary["logOffset"];
	$this->logComplete=$ary["logComplete"];
	$this->lastProgressTime=$ary["lastProgressTime"];
	$this->rollOverLine=$ary["rollOverLine"];
	$this->daemonLogPath=$ary["daemonLogPath"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["jobConfigId"]=$this->jobConfigId;
		$oAry["startTime"]=$this->startTime;
		$oAry["endTime"]=$this->endTime;
		$oAry["exitCode"]=$this->exitCode;
		$oAry["exitReason"]=$this->exitReason;
		$oAry["statusUpdateTime"]=$this->statusUpdateTime;
		$oAry["totalProgressBytes"]=$this->totalProgressBytes;
		$oAry["currentProgressBytes"]=$this->currentProgressBytes;
		$oAry["compressTotalBytes"]=$this->compressTotalBytes;
		$oAry["compressDifferentialBytes"]=$this->compressDifferentialBytes;
		$oAry["compressSentBytes"]=$this->compressSentBytes;
		$oAry["log"]=$this->log;
		$oAry["logOffset"]=$this->logOffset;
		$oAry["logComplete"]=$this->logComplete;
		$oAry["lastProgressTime"]=$this->lastProgressTime;
		$oAry["rollOverLine"]=$this->rollOverLine;
		$oAry["daemonLogPath"]=$this->daemonLogPath;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_job_config_id() != $this->jobConfigId) {
		return(false);
	}
	if ($valueObject->get_start_time() != $this->startTime) {
		return(false);
	}
	if ($valueObject->get_end_time() != $this->endTime) {
		return(false);
	}
	if ($valueObject->get_exit_code() != $this->exitCode) {
		return(false);
	}
	if ($valueObject->get_exit_reason() != $this->exitReason) {
		return(false);
	}
	if ($valueObject->get_status_update_time() != $this->statusUpdateTime) {
		return(false);
	}
	if ($valueObject->get_total_progress_bytes() != $this->totalProgressBytes) {
		return(false);
	}
	if ($valueObject->get_current_progress_bytes() != $this->currentProgressBytes) {
		return(false);
	}
	if ($valueObject->get_compress_total_bytes() != $this->compressTotalBytes) {
		return(false);
	}
	if ($valueObject->get_compress_differential_bytes() != $this->compressDifferentialBytes) {
		return(false);
	}
	if ($valueObject->get_compress_sent_bytes() != $this->compressSentBytes) {
		return(false);
	}
	if ($valueObject->get_log() != $this->log) {
		return(false);
	}
	if ($valueObject->get_log_offset() != $this->logOffset) {
		return(false);
	}
	if ($valueObject->get_log_complete() != $this->logComplete) {
		return(false);
	}
	if ($valueObject->get_last_progress_time() != $this->lastProgressTime) {
		return(false);
	}
	if ($valueObject->get_roll_over_line() != $this->rollOverLine) {
		return(false);
	}
	if ($valueObject->get_daemon_log_path() != $this->daemonLogPath) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass FrbStatusVO, mapping to table frbStatus\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."jobConfigId = ".$this->jobConfigId."\n";
	$out = $out."startTime = ".$this->startTime."\n";
	$out = $out."endTime = ".$this->endTime."\n";
	$out = $out."exitCode = ".$this->exitCode."\n";
	$out = $out."exitReason = ".$this->exitReason."\n";
	$out = $out."statusUpdateTime = ".$this->statusUpdateTime."\n";
	$out = $out."totalProgressBytes = ".$this->totalProgressBytes."\n";
	$out = $out."currentProgressBytes = ".$this->currentProgressBytes."\n";
	$out = $out."compressTotalBytes = ".$this->compressTotalBytes."\n";
	$out = $out."compressDifferentialBytes = ".$this->compressDifferentialBytes."\n";
	$out = $out."compressSentBytes = ".$this->compressSentBytes."\n";
	$out = $out."log = ".$this->log."\n";
	$out = $out."logOffset = ".$this->logOffset."\n";
	$out = $out."logComplete = ".$this->logComplete."\n";
	$out = $out."lastProgressTime = ".$this->lastProgressTime."\n";
	$out = $out."rollOverLine = ".$this->rollOverLine."\n";
	$out = $out."daemonLogPath = ".$this->daemonLogPath."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new FrbStatusVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_job_config_id($this->jobConfigId);
	 $cloned->set_start_time($this->startTime);
	 $cloned->set_end_time($this->endTime);
	 $cloned->set_exit_code($this->exitCode);
	 $cloned->set_exit_reason($this->exitReason);
	 $cloned->set_status_update_time($this->statusUpdateTime);
	 $cloned->set_total_progress_bytes($this->totalProgressBytes);
	 $cloned->set_current_progress_bytes($this->currentProgressBytes);
	 $cloned->set_compress_total_bytes($this->compressTotalBytes);
	 $cloned->set_compress_differential_bytes($this->compressDifferentialBytes);
	 $cloned->set_compress_sent_bytes($this->compressSentBytes);
	 $cloned->set_log($this->log);
	 $cloned->set_log_offset($this->logOffset);
	 $cloned->set_log_complete($this->logComplete);
	 $cloned->set_last_progress_time($this->lastProgressTime);
	 $cloned->set_roll_over_line($this->rollOverLine);
	 $cloned->set_daemon_log_path($this->daemonLogPath);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
