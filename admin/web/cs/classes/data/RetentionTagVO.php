<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * retentionTag Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:28 +0530	
 * Pattern Version:1.0
 */

class RetentionTagVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $HostId;
public $deviceName;
public $tagTimeStamp;
public $appName;
public $userTag;
public $ruleId;
public $paddedTagTimeStamp;
public $accuracy;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function RetentionTagVO(){

}

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->ruleId="0";
	$this->paddedTagTimeStamp="0";
	$this->accuracy="0";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_host_id() {
	return $this->HostId;
}
function set_host_id($HostIdIn) { 
	$this->HostId=$HostIdIn;
}

function isset_host_id() {
	return isset($this->HostId);
}


function get_device_name() {
	return $this->deviceName;
}
function set_device_name($deviceNameIn) { 
	$this->deviceName=$deviceNameIn;
}

function isset_device_name() {
	return isset($this->deviceName);
}


function get_tag_time_stamp() {
	return $this->tagTimeStamp;
}
function set_tag_time_stamp($tagTimeStampIn) { 
	$this->tagTimeStamp=$tagTimeStampIn;
}

function isset_tag_time_stamp() {
	return isset($this->tagTimeStamp);
}


function get_app_name() {
	return $this->appName;
}
function set_app_name($appNameIn) { 
	$this->appName=$appNameIn;
}

function isset_app_name() {
	return isset($this->appName);
}


function get_user_tag() {
	return $this->userTag;
}
function set_user_tag($userTagIn) { 
	$this->userTag=$userTagIn;
}

function isset_user_tag() {
	return isset($this->userTag);
}


function get_rule_id() {
	return $this->ruleId;
}
function set_rule_id($ruleIdIn) { 
	$this->ruleId=$ruleIdIn;
}

function isset_rule_id() {
	return isset($this->ruleId);
}


function get_padded_tag_time_stamp() {
	return $this->paddedTagTimeStamp;
}
function set_padded_tag_time_stamp($paddedTagTimeStampIn) { 
	$this->paddedTagTimeStamp=$paddedTagTimeStampIn;
}

function isset_padded_tag_time_stamp() {
	return isset($this->paddedTagTimeStamp);
}


function get_accuracy() {
	return $this->accuracy;
}
function set_accuracy($accuracyIn) { 
	$this->accuracy=$accuracyIn;
}

function isset_accuracy() {
	return isset($this->accuracy);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($HostIdIn,$deviceNameIn,$tagTimeStampIn,$appNameIn,$userTagIn,$ruleIdIn,$paddedTagTimeStampIn,$accuracyIn){
	$this->HostId=$HostIdIn;
	$this->deviceName=$deviceNameIn;
	$this->tagTimeStamp=$tagTimeStampIn;
	$this->appName=$appNameIn;
	$this->userTag=$userTagIn;
	$this->ruleId=$ruleIdIn;
	$this->paddedTagTimeStamp=$paddedTagTimeStampIn;
	$this->accuracy=$accuracyIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->HostId=$ary["HostId"];
	$this->deviceName=$ary["deviceName"];
	$this->tagTimeStamp=$ary["tagTimeStamp"];
	$this->appName=$ary["appName"];
	$this->userTag=$ary["userTag"];
	$this->ruleId=$ary["ruleId"];
	$this->paddedTagTimeStamp=$ary["paddedTagTimeStamp"];
	$this->accuracy=$ary["accuracy"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["HostId"]=$this->HostId;
		$oAry["deviceName"]=$this->deviceName;
		$oAry["tagTimeStamp"]=$this->tagTimeStamp;
		$oAry["appName"]=$this->appName;
		$oAry["userTag"]=$this->userTag;
		$oAry["ruleId"]=$this->ruleId;
		$oAry["paddedTagTimeStamp"]=$this->paddedTagTimeStamp;
		$oAry["accuracy"]=$this->accuracy;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_host_id() != $this->HostId) {
		return(false);
	}
	if ($valueObject->get_device_name() != $this->deviceName) {
		return(false);
	}
	if ($valueObject->get_tag_time_stamp() != $this->tagTimeStamp) {
		return(false);
	}
	if ($valueObject->get_app_name() != $this->appName) {
		return(false);
	}
	if ($valueObject->get_user_tag() != $this->userTag) {
		return(false);
	}
	if ($valueObject->get_rule_id() != $this->ruleId) {
		return(false);
	}
	if ($valueObject->get_padded_tag_time_stamp() != $this->paddedTagTimeStamp) {
		return(false);
	}
	if ($valueObject->get_accuracy() != $this->accuracy) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass RetentionTagVO, mapping to table retentionTag\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."HostId = ".$this->HostId."\n";
	$out = $out."deviceName = ".$this->deviceName."\n";
	$out = $out."tagTimeStamp = ".$this->tagTimeStamp."\n";
	$out = $out."appName = ".$this->appName."\n";
	$out = $out."userTag = ".$this->userTag."\n";
	$out = $out."ruleId = ".$this->ruleId."\n";
	$out = $out."paddedTagTimeStamp = ".$this->paddedTagTimeStamp."\n";
	$out = $out."accuracy = ".$this->accuracy."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new RetentionTagVO();
	
	 $cloned->set_host_id($this->HostId);
	 $cloned->set_device_name($this->deviceName);
	 $cloned->set_tag_time_stamp($this->tagTimeStamp);
	 $cloned->set_app_name($this->appName);
	 $cloned->set_user_tag($this->userTag);
	 $cloned->set_rule_id($this->ruleId);
	 $cloned->set_padded_tag_time_stamp($this->paddedTagTimeStamp);
	 $cloned->set_accuracy($this->accuracy);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
