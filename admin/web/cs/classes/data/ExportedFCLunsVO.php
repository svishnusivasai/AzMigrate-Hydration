<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * exportedFCLuns Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 17 Jun 2008 14:28:35 +0530	
 * Pattern Version:1.0
 */

class ExportedFCLunsVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $exportedFCLunId;
public $exportedDeviceName;
public $hostId;
public $lunCapacity;
public $blockSize;
public $vendorName;
public $modelNumber;
public $lunLabel;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function ExportedFCLunsVO(){

}

/*
	function ExportedFCLunsVO(exportedDeviceNameIn,exportedFCLunIdIn,hostIdIn){
 this->exportedDeviceName=$exportedDeviceNameIn;
 this->exportedFCLunId=$exportedFCLunIdIn;
 this->hostId=$hostIdIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_exported_f_c_lun_id() {
	return $this->exportedFCLunId;
}
function set_exported_f_c_lun_id($exportedFCLunIdIn) { 
	$this->exportedFCLunId=$exportedFCLunIdIn;
}

function isset_exported_f_c_lun_id() {
	return isset($this->exportedFCLunId);
}


function get_exported_device_name() {
	return $this->exportedDeviceName;
}
function set_exported_device_name($exportedDeviceNameIn) { 
	$this->exportedDeviceName=$exportedDeviceNameIn;
}

function isset_exported_device_name() {
	return isset($this->exportedDeviceName);
}


function get_host_id() {
	return $this->hostId;
}
function set_host_id($hostIdIn) { 
	$this->hostId=$hostIdIn;
}

function isset_host_id() {
	return isset($this->hostId);
}


function get_lun_capacity() {
	return $this->lunCapacity;
}
function set_lun_capacity($lunCapacityIn) { 
	$this->lunCapacity=$lunCapacityIn;
}

function isset_lun_capacity() {
	return isset($this->lunCapacity);
}


function get_block_size() {
	return $this->blockSize;
}
function set_block_size($blockSizeIn) { 
	$this->blockSize=$blockSizeIn;
}

function isset_block_size() {
	return isset($this->blockSize);
}


function get_vendor_name() {
	return $this->vendorName;
}
function set_vendor_name($vendorNameIn) { 
	$this->vendorName=$vendorNameIn;
}

function isset_vendor_name() {
	return isset($this->vendorName);
}


function get_model_number() {
	return $this->modelNumber;
}
function set_model_number($modelNumberIn) { 
	$this->modelNumber=$modelNumberIn;
}

function isset_model_number() {
	return isset($this->modelNumber);
}


function get_lun_label() {
	return $this->lunLabel;
}
function set_lun_label($lunLabelIn) { 
	$this->lunLabel=$lunLabelIn;
}

function isset_lun_label() {
	return isset($this->lunLabel);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($exportedFCLunIdIn,$exportedDeviceNameIn,$hostIdIn,$lunCapacityIn,$blockSizeIn,$vendorNameIn,$modelNumberIn,$lunLabelIn){
	$this->exportedFCLunId=$exportedFCLunIdIn;
	$this->exportedDeviceName=$exportedDeviceNameIn;
	$this->hostId=$hostIdIn;
	$this->lunCapacity=$lunCapacityIn;
	$this->blockSize=$blockSizeIn;
	$this->vendorName=$vendorNameIn;
	$this->modelNumber=$modelNumberIn;
	$this->lunLabel=$lunLabelIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->exportedFCLunId=$ary["exportedFCLunId"];
	$this->exportedDeviceName=$ary["exportedDeviceName"];
	$this->hostId=$ary["hostId"];
	$this->lunCapacity=$ary["lunCapacity"];
	$this->blockSize=$ary["blockSize"];
	$this->vendorName=$ary["vendorName"];
	$this->modelNumber=$ary["modelNumber"];
	$this->lunLabel=$ary["lunLabel"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["exportedFCLunId"]=$this->exportedFCLunId;
		$oAry["exportedDeviceName"]=$this->exportedDeviceName;
		$oAry["hostId"]=$this->hostId;
		$oAry["lunCapacity"]=$this->lunCapacity;
		$oAry["blockSize"]=$this->blockSize;
		$oAry["vendorName"]=$this->vendorName;
		$oAry["modelNumber"]=$this->modelNumber;
		$oAry["lunLabel"]=$this->lunLabel;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_exported_f_c_lun_id() != $this->exportedFCLunId) {
		return(false);
	}
	if ($valueObject->get_exported_device_name() != $this->exportedDeviceName) {
		return(false);
	}
	if ($valueObject->get_host_id() != $this->hostId) {
		return(false);
	}
	if ($valueObject->get_lun_capacity() != $this->lunCapacity) {
		return(false);
	}
	if ($valueObject->get_block_size() != $this->blockSize) {
		return(false);
	}
	if ($valueObject->get_vendor_name() != $this->vendorName) {
		return(false);
	}
	if ($valueObject->get_model_number() != $this->modelNumber) {
		return(false);
	}
	if ($valueObject->get_lun_label() != $this->lunLabel) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass ExportedFCLunsVO, mapping to table exportedFCLuns\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."exportedFCLunId = ".$this->exportedFCLunId."\n";
	$out = $out."exportedDeviceName = ".$this->exportedDeviceName."\n";
	$out = $out."hostId = ".$this->hostId."\n";
	$out = $out."lunCapacity = ".$this->lunCapacity."\n";
	$out = $out."blockSize = ".$this->blockSize."\n";
	$out = $out."vendorName = ".$this->vendorName."\n";
	$out = $out."modelNumber = ".$this->modelNumber."\n";
	$out = $out."lunLabel = ".$this->lunLabel."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new ExportedFCLunsVO();
	
	 $cloned->set_exported_f_c_lun_id($this->exportedFCLunId);
	 $cloned->set_exported_device_name($this->exportedDeviceName);
	 $cloned->set_host_id($this->hostId);
	 $cloned->set_lun_capacity($this->lunCapacity);
	 $cloned->set_block_size($this->blockSize);
	 $cloned->set_vendor_name($this->vendorName);
	 $cloned->set_model_number($this->modelNumber);
	 $cloned->set_lun_label($this->lunLabel);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
