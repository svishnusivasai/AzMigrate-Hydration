<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * snapShots Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:29 +0530	
 * Pattern Version:1.0
 */

class SnapShotsVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $srcHostid;
public $virtualsnapShotid;
public $srcDeviceName;
public $destHostid;
public $destDeviceName;
public $pending;
public $bytesSent;
public $status;
public $snapshotId;
public $executionState;
public $snaptype;
public $recoveryOption;
public $errMessage;
public $actualRecoveryPoint;
public $startTime;
public $endTime;
public $isMounted;
public $deleteLog;
public $readWrite;
public $dataLogPath;
public $lastUpdateTime;
public $recoveryType;
public $mountedOn;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function SnapShotsVO(){

}

/*
	function SnapShotsVO(idIn){
 this->id=$idIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->virtualsnapShotid="0";
	$this->pending="0";
	$this->bytesSent="0";
	$this->status="0";
	$this->snapshotId="0";
	$this->snaptype="0";
	$this->isMounted="0";
	$this->deleteLog="0";
	$this->readWrite="0";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_src_hostid() {
	return $this->srcHostid;
}
function set_src_hostid($srcHostidIn) { 
	$this->srcHostid=$srcHostidIn;
}

function isset_src_hostid() {
	return isset($this->srcHostid);
}


function get_virtualsnap_shotid() {
	return $this->virtualsnapShotid;
}
function set_virtualsnap_shotid($virtualsnapShotidIn) { 
	$this->virtualsnapShotid=$virtualsnapShotidIn;
}

function isset_virtualsnap_shotid() {
	return isset($this->virtualsnapShotid);
}


function get_src_device_name() {
	return $this->srcDeviceName;
}
function set_src_device_name($srcDeviceNameIn) { 
	$this->srcDeviceName=$srcDeviceNameIn;
}

function isset_src_device_name() {
	return isset($this->srcDeviceName);
}


function get_dest_hostid() {
	return $this->destHostid;
}
function set_dest_hostid($destHostidIn) { 
	$this->destHostid=$destHostidIn;
}

function isset_dest_hostid() {
	return isset($this->destHostid);
}


function get_dest_device_name() {
	return $this->destDeviceName;
}
function set_dest_device_name($destDeviceNameIn) { 
	$this->destDeviceName=$destDeviceNameIn;
}

function isset_dest_device_name() {
	return isset($this->destDeviceName);
}


function get_pending() {
	return $this->pending;
}
function set_pending($pendingIn) { 
	$this->pending=$pendingIn;
}

function isset_pending() {
	return isset($this->pending);
}


function get_bytes_sent() {
	return $this->bytesSent;
}
function set_bytes_sent($bytesSentIn) { 
	$this->bytesSent=$bytesSentIn;
}

function isset_bytes_sent() {
	return isset($this->bytesSent);
}


function get_status() {
	return $this->status;
}
function set_status($statusIn) { 
	$this->status=$statusIn;
}

function isset_status() {
	return isset($this->status);
}


function get_snapshot_id() {
	return $this->snapshotId;
}
function set_snapshot_id($snapshotIdIn) { 
	$this->snapshotId=$snapshotIdIn;
}

function isset_snapshot_id() {
	return isset($this->snapshotId);
}


function get_execution_state() {
	return $this->executionState;
}
function set_execution_state($executionStateIn) { 
	$this->executionState=$executionStateIn;
}

function isset_execution_state() {
	return isset($this->executionState);
}


function get_snaptype() {
	return $this->snaptype;
}
function set_snaptype($snaptypeIn) { 
	$this->snaptype=$snaptypeIn;
}

function isset_snaptype() {
	return isset($this->snaptype);
}


function get_recovery_option() {
	return $this->recoveryOption;
}
function set_recovery_option($recoveryOptionIn) { 
	$this->recoveryOption=$recoveryOptionIn;
}

function isset_recovery_option() {
	return isset($this->recoveryOption);
}


function get_err_message() {
	return $this->errMessage;
}
function set_err_message($errMessageIn) { 
	$this->errMessage=$errMessageIn;
}

function isset_err_message() {
	return isset($this->errMessage);
}


function get_actual_recovery_point() {
	return $this->actualRecoveryPoint;
}
function set_actual_recovery_point($actualRecoveryPointIn) { 
	$this->actualRecoveryPoint=$actualRecoveryPointIn;
}

function isset_actual_recovery_point() {
	return isset($this->actualRecoveryPoint);
}


function get_start_time() {
	return $this->startTime;
}
function set_start_time($startTimeIn) { 
	$this->startTime=$startTimeIn;
}

function isset_start_time() {
	return isset($this->startTime);
}


function get_end_time() {
	return $this->endTime;
}
function set_end_time($endTimeIn) { 
	$this->endTime=$endTimeIn;
}

function isset_end_time() {
	return isset($this->endTime);
}


function get_is_mounted() {
	return $this->isMounted;
}
function set_is_mounted($isMountedIn) { 
	$this->isMounted=$isMountedIn;
}

function isset_is_mounted() {
	return isset($this->isMounted);
}


function get_delete_log() {
	return $this->deleteLog;
}
function set_delete_log($deleteLogIn) { 
	$this->deleteLog=$deleteLogIn;
}

function isset_delete_log() {
	return isset($this->deleteLog);
}


function get_read_write() {
	return $this->readWrite;
}
function set_read_write($readWriteIn) { 
	$this->readWrite=$readWriteIn;
}

function isset_read_write() {
	return isset($this->readWrite);
}


function get_data_log_path() {
	return $this->dataLogPath;
}
function set_data_log_path($dataLogPathIn) { 
	$this->dataLogPath=$dataLogPathIn;
}

function isset_data_log_path() {
	return isset($this->dataLogPath);
}


function get_last_update_time() {
	return $this->lastUpdateTime;
}
function set_last_update_time($lastUpdateTimeIn) { 
	$this->lastUpdateTime=$lastUpdateTimeIn;
}

function isset_last_update_time() {
	return isset($this->lastUpdateTime);
}


function get_recovery_type() {
	return $this->recoveryType;
}
function set_recovery_type($recoveryTypeIn) { 
	$this->recoveryType=$recoveryTypeIn;
}

function isset_recovery_type() {
	return isset($this->recoveryType);
}


function get_mounted_on() {
	return $this->mountedOn;
}
function set_mounted_on($mountedOnIn) { 
	$this->mountedOn=$mountedOnIn;
}

function isset_mounted_on() {
	return isset($this->mountedOn);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$srcHostidIn,$virtualsnapShotidIn,$srcDeviceNameIn,$destHostidIn,$destDeviceNameIn,$pendingIn,$bytesSentIn,$statusIn,$snapshotIdIn,$executionStateIn,$snaptypeIn,$recoveryOptionIn,$errMessageIn,$actualRecoveryPointIn,$startTimeIn,$endTimeIn,$isMountedIn,$deleteLogIn,$readWriteIn,$dataLogPathIn,$lastUpdateTimeIn,$recoveryTypeIn,$mountedOnIn){
	$this->id=$idIn;
	$this->srcHostid=$srcHostidIn;
	$this->virtualsnapShotid=$virtualsnapShotidIn;
	$this->srcDeviceName=$srcDeviceNameIn;
	$this->destHostid=$destHostidIn;
	$this->destDeviceName=$destDeviceNameIn;
	$this->pending=$pendingIn;
	$this->bytesSent=$bytesSentIn;
	$this->status=$statusIn;
	$this->snapshotId=$snapshotIdIn;
	$this->executionState=$executionStateIn;
	$this->snaptype=$snaptypeIn;
	$this->recoveryOption=$recoveryOptionIn;
	$this->errMessage=$errMessageIn;
	$this->actualRecoveryPoint=$actualRecoveryPointIn;
	$this->startTime=$startTimeIn;
	$this->endTime=$endTimeIn;
	$this->isMounted=$isMountedIn;
	$this->deleteLog=$deleteLogIn;
	$this->readWrite=$readWriteIn;
	$this->dataLogPath=$dataLogPathIn;
	$this->lastUpdateTime=$lastUpdateTimeIn;
	$this->recoveryType=$recoveryTypeIn;
	$this->mountedOn=$mountedOnIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->srcHostid=$ary["srcHostid"];
	$this->virtualsnapShotid=$ary["virtualsnapShotid"];
	$this->srcDeviceName=$ary["srcDeviceName"];
	$this->destHostid=$ary["destHostid"];
	$this->destDeviceName=$ary["destDeviceName"];
	$this->pending=$ary["pending"];
	$this->bytesSent=$ary["bytesSent"];
	$this->status=$ary["status"];
	$this->snapshotId=$ary["snapshotId"];
	$this->executionState=$ary["executionState"];
	$this->snaptype=$ary["snaptype"];
	$this->recoveryOption=$ary["recoveryOption"];
	$this->errMessage=$ary["errMessage"];
	$this->actualRecoveryPoint=$ary["actualRecoveryPoint"];
	$this->startTime=$ary["startTime"];
	$this->endTime=$ary["endTime"];
	$this->isMounted=$ary["isMounted"];
	$this->deleteLog=$ary["deleteLog"];
	$this->readWrite=$ary["readWrite"];
	$this->dataLogPath=$ary["dataLogPath"];
	$this->lastUpdateTime=$ary["lastUpdateTime"];
	$this->recoveryType=$ary["recoveryType"];
	$this->mountedOn=$ary["mountedOn"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["srcHostid"]=$this->srcHostid;
		$oAry["virtualsnapShotid"]=$this->virtualsnapShotid;
		$oAry["srcDeviceName"]=$this->srcDeviceName;
		$oAry["destHostid"]=$this->destHostid;
		$oAry["destDeviceName"]=$this->destDeviceName;
		$oAry["pending"]=$this->pending;
		$oAry["bytesSent"]=$this->bytesSent;
		$oAry["status"]=$this->status;
		$oAry["snapshotId"]=$this->snapshotId;
		$oAry["executionState"]=$this->executionState;
		$oAry["snaptype"]=$this->snaptype;
		$oAry["recoveryOption"]=$this->recoveryOption;
		$oAry["errMessage"]=$this->errMessage;
		$oAry["actualRecoveryPoint"]=$this->actualRecoveryPoint;
		$oAry["startTime"]=$this->startTime;
		$oAry["endTime"]=$this->endTime;
		$oAry["isMounted"]=$this->isMounted;
		$oAry["deleteLog"]=$this->deleteLog;
		$oAry["readWrite"]=$this->readWrite;
		$oAry["dataLogPath"]=$this->dataLogPath;
		$oAry["lastUpdateTime"]=$this->lastUpdateTime;
		$oAry["recoveryType"]=$this->recoveryType;
		$oAry["mountedOn"]=$this->mountedOn;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_src_hostid() != $this->srcHostid) {
		return(false);
	}
	if ($valueObject->get_virtualsnap_shotid() != $this->virtualsnapShotid) {
		return(false);
	}
	if ($valueObject->get_src_device_name() != $this->srcDeviceName) {
		return(false);
	}
	if ($valueObject->get_dest_hostid() != $this->destHostid) {
		return(false);
	}
	if ($valueObject->get_dest_device_name() != $this->destDeviceName) {
		return(false);
	}
	if ($valueObject->get_pending() != $this->pending) {
		return(false);
	}
	if ($valueObject->get_bytes_sent() != $this->bytesSent) {
		return(false);
	}
	if ($valueObject->get_status() != $this->status) {
		return(false);
	}
	if ($valueObject->get_snapshot_id() != $this->snapshotId) {
		return(false);
	}
	if ($valueObject->get_execution_state() != $this->executionState) {
		return(false);
	}
	if ($valueObject->get_snaptype() != $this->snaptype) {
		return(false);
	}
	if ($valueObject->get_recovery_option() != $this->recoveryOption) {
		return(false);
	}
	if ($valueObject->get_err_message() != $this->errMessage) {
		return(false);
	}
	if ($valueObject->get_actual_recovery_point() != $this->actualRecoveryPoint) {
		return(false);
	}
	if ($valueObject->get_start_time() != $this->startTime) {
		return(false);
	}
	if ($valueObject->get_end_time() != $this->endTime) {
		return(false);
	}
	if ($valueObject->get_is_mounted() != $this->isMounted) {
		return(false);
	}
	if ($valueObject->get_delete_log() != $this->deleteLog) {
		return(false);
	}
	if ($valueObject->get_read_write() != $this->readWrite) {
		return(false);
	}
	if ($valueObject->get_data_log_path() != $this->dataLogPath) {
		return(false);
	}
	if ($valueObject->get_last_update_time() != $this->lastUpdateTime) {
		return(false);
	}
	if ($valueObject->get_recovery_type() != $this->recoveryType) {
		return(false);
	}
	if ($valueObject->get_mounted_on() != $this->mountedOn) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass SnapShotsVO, mapping to table snapShots\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."srcHostid = ".$this->srcHostid."\n";
	$out = $out."virtualsnapShotid = ".$this->virtualsnapShotid."\n";
	$out = $out."srcDeviceName = ".$this->srcDeviceName."\n";
	$out = $out."destHostid = ".$this->destHostid."\n";
	$out = $out."destDeviceName = ".$this->destDeviceName."\n";
	$out = $out."pending = ".$this->pending."\n";
	$out = $out."bytesSent = ".$this->bytesSent."\n";
	$out = $out."status = ".$this->status."\n";
	$out = $out."snapshotId = ".$this->snapshotId."\n";
	$out = $out."executionState = ".$this->executionState."\n";
	$out = $out."snaptype = ".$this->snaptype."\n";
	$out = $out."recoveryOption = ".$this->recoveryOption."\n";
	$out = $out."errMessage = ".$this->errMessage."\n";
	$out = $out."actualRecoveryPoint = ".$this->actualRecoveryPoint."\n";
	$out = $out."startTime = ".$this->startTime."\n";
	$out = $out."endTime = ".$this->endTime."\n";
	$out = $out."isMounted = ".$this->isMounted."\n";
	$out = $out."deleteLog = ".$this->deleteLog."\n";
	$out = $out."readWrite = ".$this->readWrite."\n";
	$out = $out."dataLogPath = ".$this->dataLogPath."\n";
	$out = $out."lastUpdateTime = ".$this->lastUpdateTime."\n";
	$out = $out."recoveryType = ".$this->recoveryType."\n";
	$out = $out."mountedOn = ".$this->mountedOn."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new SnapShotsVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_src_hostid($this->srcHostid);
	 $cloned->set_virtualsnap_shotid($this->virtualsnapShotid);
	 $cloned->set_src_device_name($this->srcDeviceName);
	 $cloned->set_dest_hostid($this->destHostid);
	 $cloned->set_dest_device_name($this->destDeviceName);
	 $cloned->set_pending($this->pending);
	 $cloned->set_bytes_sent($this->bytesSent);
	 $cloned->set_status($this->status);
	 $cloned->set_snapshot_id($this->snapshotId);
	 $cloned->set_execution_state($this->executionState);
	 $cloned->set_snaptype($this->snaptype);
	 $cloned->set_recovery_option($this->recoveryOption);
	 $cloned->set_err_message($this->errMessage);
	 $cloned->set_actual_recovery_point($this->actualRecoveryPoint);
	 $cloned->set_start_time($this->startTime);
	 $cloned->set_end_time($this->endTime);
	 $cloned->set_is_mounted($this->isMounted);
	 $cloned->set_delete_log($this->deleteLog);
	 $cloned->set_read_write($this->readWrite);
	 $cloned->set_data_log_path($this->dataLogPath);
	 $cloned->set_last_update_time($this->lastUpdateTime);
	 $cloned->set_recovery_type($this->recoveryType);
	 $cloned->set_mounted_on($this->mountedOn);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
