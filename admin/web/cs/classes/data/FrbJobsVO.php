<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * frbJobs Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:25 +0530	
 * Pattern Version:1.0
 */

class FrbJobsVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $jobConfigId;
public $assignedState;
public $currentState;
public $daemonState;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function FrbJobsVO(){

}

/*
	function FrbJobsVO(idIn){
 this->id=$idIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->jobConfigId="0";
	$this->assignedState="0";
	$this->currentState="0";
	$this->daemonState="0";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_job_config_id() {
	return $this->jobConfigId;
}
function set_job_config_id($jobConfigIdIn) { 
	$this->jobConfigId=$jobConfigIdIn;
}

function isset_job_config_id() {
	return isset($this->jobConfigId);
}


function get_assigned_state() {
	return $this->assignedState;
}
function set_assigned_state($assignedStateIn) { 
	$this->assignedState=$assignedStateIn;
}

function isset_assigned_state() {
	return isset($this->assignedState);
}


function get_current_state() {
	return $this->currentState;
}
function set_current_state($currentStateIn) { 
	$this->currentState=$currentStateIn;
}

function isset_current_state() {
	return isset($this->currentState);
}


function get_daemon_state() {
	return $this->daemonState;
}
function set_daemon_state($daemonStateIn) { 
	$this->daemonState=$daemonStateIn;
}

function isset_daemon_state() {
	return isset($this->daemonState);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$jobConfigIdIn,$assignedStateIn,$currentStateIn,$daemonStateIn){
	$this->id=$idIn;
	$this->jobConfigId=$jobConfigIdIn;
	$this->assignedState=$assignedStateIn;
	$this->currentState=$currentStateIn;
	$this->daemonState=$daemonStateIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->jobConfigId=$ary["jobConfigId"];
	$this->assignedState=$ary["assignedState"];
	$this->currentState=$ary["currentState"];
	$this->daemonState=$ary["daemonState"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["jobConfigId"]=$this->jobConfigId;
		$oAry["assignedState"]=$this->assignedState;
		$oAry["currentState"]=$this->currentState;
		$oAry["daemonState"]=$this->daemonState;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_job_config_id() != $this->jobConfigId) {
		return(false);
	}
	if ($valueObject->get_assigned_state() != $this->assignedState) {
		return(false);
	}
	if ($valueObject->get_current_state() != $this->currentState) {
		return(false);
	}
	if ($valueObject->get_daemon_state() != $this->daemonState) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass FrbJobsVO, mapping to table frbJobs\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."jobConfigId = ".$this->jobConfigId."\n";
	$out = $out."assignedState = ".$this->assignedState."\n";
	$out = $out."currentState = ".$this->currentState."\n";
	$out = $out."daemonState = ".$this->daemonState."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new FrbJobsVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_job_config_id($this->jobConfigId);
	 $cloned->set_assigned_state($this->assignedState);
	 $cloned->set_current_state($this->currentState);
	 $cloned->set_daemon_state($this->daemonState);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
