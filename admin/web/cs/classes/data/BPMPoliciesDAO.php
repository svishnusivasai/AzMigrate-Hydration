<?php
/**
  * This sourcecode has been generated by InMage Source Code Generator version 1.0
  * The usage of generated code is restricted to InMage Systems Inc.
  *
  * BPMPolicies Data Access Object[DAO]
  * This class contains all database handling that is needed to 
  * permanently store and retrieve BPMPolicies object instances. 
  * Generated Date:	Tue, 27 Nov 2007 14:01:23 +0530	
  * Pattern Version:1.0
  */
class BPMPoliciesDAO
{

/**
 * createValueObject-method. This method is used when the Dao class needs
 * to create new value object instance. The reason why this method exists
 * is that sometimes the programmer may want to extend also the valueObject
 * and then this method can be overrided to return extended valueObject.
 * NOTE: If you extend the valueObject class, make sure to override the
 * clone() method in it!
 */
function createValueObject() {
	return new BPMPoliciesVO();
 }

/**
 * getObject-method. This will create and load valueObject contents from database 
 * using given Primary-Key as identifier. This method is just a convenience method 
 * for the real load-method which accepts the valueObject as a parameter. Returned
 * valueObject will be created using the createValueObject() method.
 */
function getObject($conn,$Id) {
	$valueObject = $this->createValueObject();
	$valueObject->set_id($Id);
	$this->findByPrimaryKey($conn,$valueObject);
	return $valueObject;
}

/**
 * findbyPrimaryKey-method. This will load valueObject contents from database using
 * Primary-Key as identifier. Upper layer should use this so that valueObject
 * instance is created and only primary-key should be specified. Then call
 * this method to complete other persistent information. This method will
 * overwrite all other fields except primary-key and possible runtime variables.
 * If load can not find matching row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be loaded.
 *                     Primary-key field must be set for this to work properly.
 */
function findByPrimaryKey($conn, $valueObject) {

	if (!$valueObject->get_id()) {
    	//print "Can not select without Primary-Key!";
		return false;
	}

	$sql = "SELECT * FROM BPMPolicies WHERE (Id = '".$valueObject->get_id()."') "; 
	if ($this->singleQuery($conn, $sql, $valueObject)){
    	return true;
    }
    else{
    	return false;
	}
}

/**
 * findAll-method. This will read all contents from database table and
 * build an Vector containing valueObjects. Please note, that this method
 * will consume huge amounts of resources if table has lot's of rows. 
 * This should only be used when target tables have only small amounts
 * of data.
 *
 * @param conn         This method requires working database connection.
 */
function findAll($conn) {
	
	$sql = "SELECT * FROM BPMPolicies ORDER BY Id ASC ";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
}

/**
 * create-method. This will create new row in database according to supplied
 * valueObject contents. Make sure that values for all NOT NULL columns are
 * correctly specified. Also, if this table does not use automatic surrogate-keys
 * the primary-key must be specified. After INSERT command this method will 
 * read the generated primary-key back to valueObject if automatic surrogate-keys
 * were used. 
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be created.
 *                     If automatic surrogate-keys are not used the Primary-key 
 *                     field must be set for this to work properly.
 */
function create($conn, $valueObject) {
	 $count = 0;
     $sql1 = "INSERT INTO BPMPolicies(";
     $sql3 = ") VALUES ("; 
	 
	 if ($valueObject->isset_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."Id";
 	    $sql4 = $sql4."'".$valueObject->get_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_policy_name())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."PolicyName";
 	    $sql4 = $sql4."'".$valueObject->get_policy_name()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_policy_descr_iption())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."PolicyDescription";
 	    $sql4 = $sql4."'".$valueObject->get_policy_descr_iption()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_type())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."Type";
 	    $sql4 = $sql4."'".$valueObject->get_type()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_default_policy())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."DefaultPolicy";
 	    $sql4 = $sql4."'".$valueObject->get_default_policy()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_source_ip())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."SourceIP";
 	    $sql4 = $sql4."'".$valueObject->get_source_ip()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_status())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."Status";
 	    $sql4 = $sql4."'".$valueObject->get_status()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_priority())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."Priority";
 	    $sql4 = $sql4."'".$valueObject->get_priority()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_share())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."Share";
 	    $sql4 = $sql4."'".$valueObject->get_share()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_cumulative_bandwidth())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."CumulativeBandwidth";
 	    $sql4 = $sql4."'".$valueObject->get_cumulative_bandwidth()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_schedule_type())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ScheduleType";
 	    $sql4 = $sql4."'".$valueObject->get_schedule_type()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_schedule_from_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ScheduleFromTime";
 	    $sql4 = $sql4."'".$valueObject->get_schedule_from_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_schedule_to_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ScheduleTOTime";
 	    $sql4 = $sql4."'".$valueObject->get_schedule_to_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_schedule())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."Schedule";
 	    $sql4 = $sql4."'".$valueObject->get_schedule()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_last_run_date())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."lastRunDate";
 	    $sql4 = $sql4."'".$valueObject->get_last_run_date()."'"; 	
 		$count++;
 	 }
	 
	$sql = $sql1 . $sql2. $sql3. $sql4.")";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * update-method. This method will save the current state of valueObject to database.
 * Save can not be used to create new instances in database, so upper layer must
 * make sure that the primary-key is correctly specified. Primary-key will indicate
 * which instance is going to be updated in database. If save can not find matching 
 * row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be saved.
 *                     Primary-key field must be set for this to work properly.
 */
function update($conn, $valueObject) {
	$count = 0;
	$sql = "UPDATE BPMPolicies SET ";
	if ($valueObject->isset_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."Id = '".$valueObject->get_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_policy_name())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."PolicyName = '".$valueObject->get_policy_name()."'";
		$count++;
	}
	
	if ($valueObject->isset_policy_descr_iption())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."PolicyDescription = '".$valueObject->get_policy_descr_iption()."'";
		$count++;
	}
	
	if ($valueObject->isset_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."Type = '".$valueObject->get_type()."'";
		$count++;
	}
	
	if ($valueObject->isset_default_policy())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."DefaultPolicy = '".$valueObject->get_default_policy()."'";
		$count++;
	}
	
	if ($valueObject->isset_source_ip())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."SourceIP = '".$valueObject->get_source_ip()."'";
		$count++;
	}
	
	if ($valueObject->isset_status())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."Status = '".$valueObject->get_status()."'";
		$count++;
	}
	
	if ($valueObject->isset_priority())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."Priority = '".$valueObject->get_priority()."'";
		$count++;
	}
	
	if ($valueObject->isset_share())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."Share = '".$valueObject->get_share()."'";
		$count++;
	}
	
	if ($valueObject->isset_cumulative_bandwidth())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."CumulativeBandwidth = '".$valueObject->get_cumulative_bandwidth()."'";
		$count++;
	}
	
	if ($valueObject->isset_schedule_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ScheduleType = '".$valueObject->get_schedule_type()."'";
		$count++;
	}
	
	if ($valueObject->isset_schedule_from_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ScheduleFromTime = '".$valueObject->get_schedule_from_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_schedule_to_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ScheduleTOTime = '".$valueObject->get_schedule_to_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_schedule())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."Schedule = '".$valueObject->get_schedule()."'";
		$count++;
	}
	
	if ($valueObject->isset_last_run_date())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."lastRunDate = '".$valueObject->get_last_run_date()."'";
		$count++;
	}
	
	$sql = $sql." WHERE (Id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}

/**
 * delete-method. This method will remove the information from database as identified by
 * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
 * be restored by calling save. Restoring can only be done using create method but if 
 * database is using automatic surrogate-keys, the resulting object will have different 
 * primary-key than what it was in the deleted object. If delete can not find matching row,
 * NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be deleted.
 *                     Primary-key field must be set for this to work properly.
 */
function delete($conn, $valueObject) {
	
	if (!$valueObject->get_id()) {
         //print "Can not delete without Primary-Key!";
         return false;
    }
	$sql = "DELETE FROM BPMPolicies WHERE (Id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
         //print "PrimaryKey Error when updating DB!";
          return false;
    }
 	return true;
}

/**
 * deleteAll-method. This method will remove all information from the table that matches
 * this DAO and ValueObject couple. This should be the most efficient way to clear table.
 * Once deleteAll has been called, no valueObject that has been created before can be 
 * restored by calling save. Restoring can only be done using create method but if database 
 * is using automatic surrogate-keys, the resulting object will have different primary-key 
 * than what it was in the deleted object. (Note, the implementation of this method should
 * be different with different DB backends.)
 *
 * @param conn         This method requires working database connection.
 */
function deleteAll($conn) {
	$sql = "DELETE FROM BPMPolicies";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * coutAll-method. This method will return the number of all rows from table that matches
 * this Dao. The implementation will simply execute "select count(primarykey) from table".
 * If table is empty, the return value is 0. This method should be used before calling
 * findAll, to make sure table has not too many rows.
 *
 * @param conn         This method requires working database connection.
 */
function countAll($conn) {
	$sql = "SELECT count(*) FROM BPMPolicies";
	$allRows = 0;
	$result = $conn->execute($sql);
    if ($row = $conn->nextRow($result))
    	$allRows = $row[0];
    return $allRows;
}

/** 
 * searchMatching-Method. This method provides searching capability to 
 * get matching valueObjects from database. It works by searching all 
 * objects that match permanent instance variables of given object.
 * Upper layer should use this by setting some parameters in valueObject
 * and then  call searchMatching. The result will be 0-N objects in vector, 
 * all matching those criteria you specified. Those instance-variables that
 * have NULL values are excluded in search-criteria.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance where search will be based.
 *                     Primary-key field should not be set.
 */
function searchMatching($conn, $valueObject) {
	$first = true;
    $sql = "SELECT * FROM BPMPolicies WHERE 1=1 ";
	
	if ($valueObject->get_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND Id LIKE '".$valueObject->get_id()."%' ";
    }
	
	if ($valueObject->get_policy_name() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND PolicyName LIKE '".$valueObject->get_policy_name()."%' ";
    }
	
	if ($valueObject->get_policy_descr_iption() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND PolicyDescription LIKE '".$valueObject->get_policy_descr_iption()."%' ";
    }
	
	if ($valueObject->get_type() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND Type LIKE '".$valueObject->get_type()."%' ";
    }
	
	if ($valueObject->get_default_policy() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND DefaultPolicy LIKE '".$valueObject->get_default_policy()."%' ";
    }
	
	if ($valueObject->get_source_ip() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND SourceIP LIKE '".$valueObject->get_source_ip()."%' ";
    }
	
	if ($valueObject->get_status() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND Status LIKE '".$valueObject->get_status()."%' ";
    }
	
	if ($valueObject->get_priority() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND Priority LIKE '".$valueObject->get_priority()."%' ";
    }
	
	if ($valueObject->get_share() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND Share LIKE '".$valueObject->get_share()."%' ";
    }
	
	if ($valueObject->get_cumulative_bandwidth() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND CumulativeBandwidth LIKE '".$valueObject->get_cumulative_bandwidth()."%' ";
    }
	
	if ($valueObject->get_schedule_type() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ScheduleType LIKE '".$valueObject->get_schedule_type()."%' ";
    }
	
	if ($valueObject->get_schedule_from_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ScheduleFromTime LIKE '".$valueObject->get_schedule_from_time()."%' ";
    }
	
	if ($valueObject->get_schedule_to_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ScheduleTOTime LIKE '".$valueObject->get_schedule_to_time()."%' ";
    }
	
	if ($valueObject->get_schedule() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND Schedule LIKE '".$valueObject->get_schedule()."%' ";
    }
	
	if ($valueObject->get_last_run_date() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND lastRunDate LIKE '".$valueObject->get_last_run_date()."%' ";
    }
	
	$sql = $sql." ORDER BY ";
	$sql = $sql."Id ASC ";
    // Prevent accidential full table results.
    // Use findAll if all rows must be returned.
    if ($first)
    	return array();

    $searchResults = $this->listQuery($conn, $sql);
    return $searchResults;
}

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return only one row. The resultset will be converted
 * to valueObject. If no rows were found, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 * @param valueObject  Class-instance where resulting data will be stored.
 */
 function singleQuery($conn, $sql, $valueObject) {
 	$result = $conn->execute($sql);
	if ($row = $conn->nextRow($result)) {
		$valueObject->setAry($row);
     } else {
        //print " Object Not Found!";
     	return false;
     }
     return true;
 }

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. The resultset will be converted
 * to the List of valueObjects. If no rows were found, an empty List will be returned.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQuery($conn, $sql) {
	$searchResults = array();
    $result = $conn->execute($sql);
    while ($row = $conn->nextRow($result)) {
    	$temp = $this->createValueObject();
    	$temp->setAry($row);
        array_push($searchResults, $temp);
	}
	return $searchResults;
}
/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. However the results will be unstructured
 * i.e. Not formatted as VO Objects 
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQueryResultset($conn,$sql)
{
	$searchResults = array();
    $result = $conn->execute($sql);
	while ($row = $conn->nextRow($result)) {
        array_push($searchResults, $row);
	}
	return $searchResults;
}

/**
 * databaseUpdate-method. This method is a helper method for internal use. It will execute
 * all database handling that will change the information in tables. SELECT queries will
 * not be executed here however. The return value indicates how many rows were affected.
 * This method will also make sure that if cache is used, it will reset when data changes.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 */
function databaseUpdate($conn, $sql) {
	$result = $conn->execute($sql);
	return $result;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPDAO-1.9";
 }

}
?>
