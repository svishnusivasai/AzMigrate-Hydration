<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * sanITLNexus Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 8 Jul 2008 16:01:47 +0530	
 * Pattern Version:1.0
 */

class SanITLNexusVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $sanInitiatorPortWwn;
public $sanTargetPortWwn;
public $sanLunId;
public $sanLunNumber;
public $fabricId;
public $replicationState;
public $deleteState;
public $resyncRequired;
public $applianceTargetPathState;
public $applianceTargetPathStateChangeCount;
public $applianceTargetPathStateAckCount;
public $applianceTargetPathIoFailureCount;
public $applianceTargetPathIoFailureAckCount;
public $physicalTargetPathState;
public $physicalTargetPathStatechangecount;
public $physicalTargetPathStateAckcount;
public $physicalTargetPathIoFailureCount;
public $physicalTargetPathIoFailureAckCount;
public $state;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function SanITLNexusVO(){

}

/*
	function SanITLNexusVO(fabricIdIn,sanInitiatorPortWwnIn,sanLunIdIn,sanLunNumberIn,sanTargetPortWwnIn){
 this->fabricId=$fabricIdIn;
 this->sanInitiatorPortWwn=$sanInitiatorPortWwnIn;
 this->sanLunId=$sanLunIdIn;
 this->sanLunNumber=$sanLunNumberIn;
 this->sanTargetPortWwn=$sanTargetPortWwnIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_san_initiator_port_wwn() {
	return $this->sanInitiatorPortWwn;
}
function set_san_initiator_port_wwn($sanInitiatorPortWwnIn) { 
	$this->sanInitiatorPortWwn=$sanInitiatorPortWwnIn;
}

function isset_san_initiator_port_wwn() {
	return isset($this->sanInitiatorPortWwn);
}


function get_san_target_port_wwn() {
	return $this->sanTargetPortWwn;
}
function set_san_target_port_wwn($sanTargetPortWwnIn) { 
	$this->sanTargetPortWwn=$sanTargetPortWwnIn;
}

function isset_san_target_port_wwn() {
	return isset($this->sanTargetPortWwn);
}


function get_san_lun_id() {
	return $this->sanLunId;
}
function set_san_lun_id($sanLunIdIn) { 
	$this->sanLunId=$sanLunIdIn;
}

function isset_san_lun_id() {
	return isset($this->sanLunId);
}


function get_san_lun_number() {
	return $this->sanLunNumber;
}
function set_san_lun_number($sanLunNumberIn) { 
	$this->sanLunNumber=$sanLunNumberIn;
}

function isset_san_lun_number() {
	return isset($this->sanLunNumber);
}


function get_fabric_id() {
	return $this->fabricId;
}
function set_fabric_id($fabricIdIn) { 
	$this->fabricId=$fabricIdIn;
}

function isset_fabric_id() {
	return isset($this->fabricId);
}


function get_replication_state() {
	return $this->replicationState;
}
function set_replication_state($replicationStateIn) { 
	$this->replicationState=$replicationStateIn;
}

function isset_replication_state() {
	return isset($this->replicationState);
}


function get_delete_state() {
	return $this->deleteState;
}
function set_delete_state($deleteStateIn) { 
	$this->deleteState=$deleteStateIn;
}

function isset_delete_state() {
	return isset($this->deleteState);
}


function get_resync_required() {
	return $this->resyncRequired;
}
function set_resync_required($resyncRequiredIn) { 
	$this->resyncRequired=$resyncRequiredIn;
}

function isset_resync_required() {
	return isset($this->resyncRequired);
}


function get_appliance_target_path_state() {
	return $this->applianceTargetPathState;
}
function set_appliance_target_path_state($applianceTargetPathStateIn) { 
	$this->applianceTargetPathState=$applianceTargetPathStateIn;
}

function isset_appliance_target_path_state() {
	return isset($this->applianceTargetPathState);
}


function get_appliance_target_path_state_change_count() {
	return $this->applianceTargetPathStateChangeCount;
}
function set_appliance_target_path_state_change_count($applianceTargetPathStateChangeCountIn) { 
	$this->applianceTargetPathStateChangeCount=$applianceTargetPathStateChangeCountIn;
}

function isset_appliance_target_path_state_change_count() {
	return isset($this->applianceTargetPathStateChangeCount);
}


function get_appliance_target_path_state_ack_count() {
	return $this->applianceTargetPathStateAckCount;
}
function set_appliance_target_path_state_ack_count($applianceTargetPathStateAckCountIn) { 
	$this->applianceTargetPathStateAckCount=$applianceTargetPathStateAckCountIn;
}

function isset_appliance_target_path_state_ack_count() {
	return isset($this->applianceTargetPathStateAckCount);
}


function get_appliance_target_path_io_failure_count() {
	return $this->applianceTargetPathIoFailureCount;
}
function set_appliance_target_path_io_failure_count($applianceTargetPathIoFailureCountIn) { 
	$this->applianceTargetPathIoFailureCount=$applianceTargetPathIoFailureCountIn;
}

function isset_appliance_target_path_io_failure_count() {
	return isset($this->applianceTargetPathIoFailureCount);
}


function get_appliance_target_path_io_failure_ack_count() {
	return $this->applianceTargetPathIoFailureAckCount;
}
function set_appliance_target_path_io_failure_ack_count($applianceTargetPathIoFailureAckCountIn) { 
	$this->applianceTargetPathIoFailureAckCount=$applianceTargetPathIoFailureAckCountIn;
}

function isset_appliance_target_path_io_failure_ack_count() {
	return isset($this->applianceTargetPathIoFailureAckCount);
}


function get_physical_target_path_state() {
	return $this->physicalTargetPathState;
}
function set_physical_target_path_state($physicalTargetPathStateIn) { 
	$this->physicalTargetPathState=$physicalTargetPathStateIn;
}

function isset_physical_target_path_state() {
	return isset($this->physicalTargetPathState);
}


function get_physical_target_path_statechangecount() {
	return $this->physicalTargetPathStatechangecount;
}
function set_physical_target_path_statechangecount($physicalTargetPathStatechangecountIn) { 
	$this->physicalTargetPathStatechangecount=$physicalTargetPathStatechangecountIn;
}

function isset_physical_target_path_statechangecount() {
	return isset($this->physicalTargetPathStatechangecount);
}


function get_physical_target_path_state_ackcount() {
	return $this->physicalTargetPathStateAckcount;
}
function set_physical_target_path_state_ackcount($physicalTargetPathStateAckcountIn) { 
	$this->physicalTargetPathStateAckcount=$physicalTargetPathStateAckcountIn;
}

function isset_physical_target_path_state_ackcount() {
	return isset($this->physicalTargetPathStateAckcount);
}


function get_physical_target_path_io_failure_count() {
	return $this->physicalTargetPathIoFailureCount;
}
function set_physical_target_path_io_failure_count($physicalTargetPathIoFailureCountIn) { 
	$this->physicalTargetPathIoFailureCount=$physicalTargetPathIoFailureCountIn;
}

function isset_physical_target_path_io_failure_count() {
	return isset($this->physicalTargetPathIoFailureCount);
}


function get_physical_target_path_io_failure_ack_count() {
	return $this->physicalTargetPathIoFailureAckCount;
}
function set_physical_target_path_io_failure_ack_count($physicalTargetPathIoFailureAckCountIn) { 
	$this->physicalTargetPathIoFailureAckCount=$physicalTargetPathIoFailureAckCountIn;
}

function isset_physical_target_path_io_failure_ack_count() {
	return isset($this->physicalTargetPathIoFailureAckCount);
}


function get_state() {
	return $this->state;
}
function set_state($stateIn) { 
	$this->state=$stateIn;
}

function isset_state() {
	return isset($this->state);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($sanInitiatorPortWwnIn,$sanTargetPortWwnIn,$sanLunIdIn,$sanLunNumberIn,$fabricIdIn,$replicationStateIn,$deleteStateIn,$resyncRequiredIn,$applianceTargetPathStateIn,$applianceTargetPathStateChangeCountIn,$applianceTargetPathStateAckCountIn,$applianceTargetPathIoFailureCountIn,$applianceTargetPathIoFailureAckCountIn,$physicalTargetPathStateIn,$physicalTargetPathStatechangecountIn,$physicalTargetPathStateAckcountIn,$physicalTargetPathIoFailureCountIn,$physicalTargetPathIoFailureAckCountIn,$stateIn){
	$this->sanInitiatorPortWwn=$sanInitiatorPortWwnIn;
	$this->sanTargetPortWwn=$sanTargetPortWwnIn;
	$this->sanLunId=$sanLunIdIn;
	$this->sanLunNumber=$sanLunNumberIn;
	$this->fabricId=$fabricIdIn;
	$this->replicationState=$replicationStateIn;
	$this->deleteState=$deleteStateIn;
	$this->resyncRequired=$resyncRequiredIn;
	$this->applianceTargetPathState=$applianceTargetPathStateIn;
	$this->applianceTargetPathStateChangeCount=$applianceTargetPathStateChangeCountIn;
	$this->applianceTargetPathStateAckCount=$applianceTargetPathStateAckCountIn;
	$this->applianceTargetPathIoFailureCount=$applianceTargetPathIoFailureCountIn;
	$this->applianceTargetPathIoFailureAckCount=$applianceTargetPathIoFailureAckCountIn;
	$this->physicalTargetPathState=$physicalTargetPathStateIn;
	$this->physicalTargetPathStatechangecount=$physicalTargetPathStatechangecountIn;
	$this->physicalTargetPathStateAckcount=$physicalTargetPathStateAckcountIn;
	$this->physicalTargetPathIoFailureCount=$physicalTargetPathIoFailureCountIn;
	$this->physicalTargetPathIoFailureAckCount=$physicalTargetPathIoFailureAckCountIn;
	$this->state=$stateIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->sanInitiatorPortWwn=$ary["sanInitiatorPortWwn"];
	$this->sanTargetPortWwn=$ary["sanTargetPortWwn"];
	$this->sanLunId=$ary["sanLunId"];
	$this->sanLunNumber=$ary["sanLunNumber"];
	$this->fabricId=$ary["fabricId"];
	$this->replicationState=$ary["replicationState"];
	$this->deleteState=$ary["deleteState"];
	$this->resyncRequired=$ary["resyncRequired"];
	$this->applianceTargetPathState=$ary["applianceTargetPathState"];
	$this->applianceTargetPathStateChangeCount=$ary["applianceTargetPathStateChangeCount"];
	$this->applianceTargetPathStateAckCount=$ary["applianceTargetPathStateAckCount"];
	$this->applianceTargetPathIoFailureCount=$ary["applianceTargetPathIoFailureCount"];
	$this->applianceTargetPathIoFailureAckCount=$ary["applianceTargetPathIoFailureAckCount"];
	$this->physicalTargetPathState=$ary["physicalTargetPathState"];
	$this->physicalTargetPathStatechangecount=$ary["physicalTargetPathStatechangecount"];
	$this->physicalTargetPathStateAckcount=$ary["physicalTargetPathStateAckcount"];
	$this->physicalTargetPathIoFailureCount=$ary["physicalTargetPathIoFailureCount"];
	$this->physicalTargetPathIoFailureAckCount=$ary["physicalTargetPathIoFailureAckCount"];
	$this->state=$ary["state"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["sanInitiatorPortWwn"]=$this->sanInitiatorPortWwn;
		$oAry["sanTargetPortWwn"]=$this->sanTargetPortWwn;
		$oAry["sanLunId"]=$this->sanLunId;
		$oAry["sanLunNumber"]=$this->sanLunNumber;
		$oAry["fabricId"]=$this->fabricId;
		$oAry["replicationState"]=$this->replicationState;
		$oAry["deleteState"]=$this->deleteState;
		$oAry["resyncRequired"]=$this->resyncRequired;
		$oAry["applianceTargetPathState"]=$this->applianceTargetPathState;
		$oAry["applianceTargetPathStateChangeCount"]=$this->applianceTargetPathStateChangeCount;
		$oAry["applianceTargetPathStateAckCount"]=$this->applianceTargetPathStateAckCount;
		$oAry["applianceTargetPathIoFailureCount"]=$this->applianceTargetPathIoFailureCount;
		$oAry["applianceTargetPathIoFailureAckCount"]=$this->applianceTargetPathIoFailureAckCount;
		$oAry["physicalTargetPathState"]=$this->physicalTargetPathState;
		$oAry["physicalTargetPathStatechangecount"]=$this->physicalTargetPathStatechangecount;
		$oAry["physicalTargetPathStateAckcount"]=$this->physicalTargetPathStateAckcount;
		$oAry["physicalTargetPathIoFailureCount"]=$this->physicalTargetPathIoFailureCount;
		$oAry["physicalTargetPathIoFailureAckCount"]=$this->physicalTargetPathIoFailureAckCount;
		$oAry["state"]=$this->state;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_san_initiator_port_wwn() != $this->sanInitiatorPortWwn) {
		return(false);
	}
	if ($valueObject->get_san_target_port_wwn() != $this->sanTargetPortWwn) {
		return(false);
	}
	if ($valueObject->get_san_lun_id() != $this->sanLunId) {
		return(false);
	}
	if ($valueObject->get_san_lun_number() != $this->sanLunNumber) {
		return(false);
	}
	if ($valueObject->get_fabric_id() != $this->fabricId) {
		return(false);
	}
	if ($valueObject->get_replication_state() != $this->replicationState) {
		return(false);
	}
	if ($valueObject->get_delete_state() != $this->deleteState) {
		return(false);
	}
	if ($valueObject->get_resync_required() != $this->resyncRequired) {
		return(false);
	}
	if ($valueObject->get_appliance_target_path_state() != $this->applianceTargetPathState) {
		return(false);
	}
	if ($valueObject->get_appliance_target_path_state_change_count() != $this->applianceTargetPathStateChangeCount) {
		return(false);
	}
	if ($valueObject->get_appliance_target_path_state_ack_count() != $this->applianceTargetPathStateAckCount) {
		return(false);
	}
	if ($valueObject->get_appliance_target_path_io_failure_count() != $this->applianceTargetPathIoFailureCount) {
		return(false);
	}
	if ($valueObject->get_appliance_target_path_io_failure_ack_count() != $this->applianceTargetPathIoFailureAckCount) {
		return(false);
	}
	if ($valueObject->get_physical_target_path_state() != $this->physicalTargetPathState) {
		return(false);
	}
	if ($valueObject->get_physical_target_path_statechangecount() != $this->physicalTargetPathStatechangecount) {
		return(false);
	}
	if ($valueObject->get_physical_target_path_state_ackcount() != $this->physicalTargetPathStateAckcount) {
		return(false);
	}
	if ($valueObject->get_physical_target_path_io_failure_count() != $this->physicalTargetPathIoFailureCount) {
		return(false);
	}
	if ($valueObject->get_physical_target_path_io_failure_ack_count() != $this->physicalTargetPathIoFailureAckCount) {
		return(false);
	}
	if ($valueObject->get_state() != $this->state) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass SanITLNexusVO, mapping to table sanITLNexus\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."sanInitiatorPortWwn = ".$this->sanInitiatorPortWwn."\n";
	$out = $out."sanTargetPortWwn = ".$this->sanTargetPortWwn."\n";
	$out = $out."sanLunId = ".$this->sanLunId."\n";
	$out = $out."sanLunNumber = ".$this->sanLunNumber."\n";
	$out = $out."fabricId = ".$this->fabricId."\n";
	$out = $out."replicationState = ".$this->replicationState."\n";
	$out = $out."deleteState = ".$this->deleteState."\n";
	$out = $out."resyncRequired = ".$this->resyncRequired."\n";
	$out = $out."applianceTargetPathState = ".$this->applianceTargetPathState."\n";
	$out = $out."applianceTargetPathStateChangeCount = ".$this->applianceTargetPathStateChangeCount."\n";
	$out = $out."applianceTargetPathStateAckCount = ".$this->applianceTargetPathStateAckCount."\n";
	$out = $out."applianceTargetPathIoFailureCount = ".$this->applianceTargetPathIoFailureCount."\n";
	$out = $out."applianceTargetPathIoFailureAckCount = ".$this->applianceTargetPathIoFailureAckCount."\n";
	$out = $out."physicalTargetPathState = ".$this->physicalTargetPathState."\n";
	$out = $out."physicalTargetPathStatechangecount = ".$this->physicalTargetPathStatechangecount."\n";
	$out = $out."physicalTargetPathStateAckcount = ".$this->physicalTargetPathStateAckcount."\n";
	$out = $out."physicalTargetPathIoFailureCount = ".$this->physicalTargetPathIoFailureCount."\n";
	$out = $out."physicalTargetPathIoFailureAckCount = ".$this->physicalTargetPathIoFailureAckCount."\n";
	$out = $out."state = ".$this->state."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new SanITLNexusVO();
	
	 $cloned->set_san_initiator_port_wwn($this->sanInitiatorPortWwn);
	 $cloned->set_san_target_port_wwn($this->sanTargetPortWwn);
	 $cloned->set_san_lun_id($this->sanLunId);
	 $cloned->set_san_lun_number($this->sanLunNumber);
	 $cloned->set_fabric_id($this->fabricId);
	 $cloned->set_replication_state($this->replicationState);
	 $cloned->set_delete_state($this->deleteState);
	 $cloned->set_resync_required($this->resyncRequired);
	 $cloned->set_appliance_target_path_state($this->applianceTargetPathState);
	 $cloned->set_appliance_target_path_state_change_count($this->applianceTargetPathStateChangeCount);
	 $cloned->set_appliance_target_path_state_ack_count($this->applianceTargetPathStateAckCount);
	 $cloned->set_appliance_target_path_io_failure_count($this->applianceTargetPathIoFailureCount);
	 $cloned->set_appliance_target_path_io_failure_ack_count($this->applianceTargetPathIoFailureAckCount);
	 $cloned->set_physical_target_path_state($this->physicalTargetPathState);
	 $cloned->set_physical_target_path_statechangecount($this->physicalTargetPathStatechangecount);
	 $cloned->set_physical_target_path_state_ackcount($this->physicalTargetPathStateAckcount);
	 $cloned->set_physical_target_path_io_failure_count($this->physicalTargetPathIoFailureCount);
	 $cloned->set_physical_target_path_io_failure_ack_count($this->physicalTargetPathIoFailureAckCount);
	 $cloned->set_state($this->state);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
