<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * logicalVolumes Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Thu, 15 May 2008 04:32:29 +0530	
 * Pattern Version:1.0
 */

class LogicalVolumesVO
{

/**
 * Global variables 
 */
 
 var $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

var $hostId;
var $deviceName;
var $fileSystemType;
var $capacity;
var $systemVolume;
var $bootVolume;
var $cacheVolume;
var $lastSentinelChange;
var $lastOutpostAgentChange;
var $lastDeviceUpdateTime;
var $dpsId;
var $farLineProtected;
var $returnHomeEnabled;
var $doResync;
var $startingPhysicalOffset;
var $tmId;
var $visible;
var $deviceLocked;
var $deviceFlagInUse;
var $freeSpace;
var $readwritemode;
var $preDriveState;
var $isVisible;
var $volumeType;
var $transProtocol;
var $volumeLabel;
var $maxDiffFilesThreshold;
var $mountPoint;
var $Phy_Lunid;
var $lun_state;
var $offset;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function LogicalVolumesVO(){

}

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->capacity="0";
	$this->systemVolume="0";
	$this->bootVolume="0";
	$this->cacheVolume="0";
	$this->lastSentinelChange="0000-00-00 00:00:00";
	$this->lastOutpostAgentChange="0000-00-00 00:00:00";
	$this->lastDeviceUpdateTime="0";
	$this->farLineProtected="0";
	$this->returnHomeEnabled="0";
	$this->doResync="0";
	$this->startingPhysicalOffset="0";
	$this->tmId="0";
	$this->visible="0";
	$this->deviceLocked="0";
	$this->deviceFlagInUse="0";
	$this->freeSpace="0";
	$this->readwritemode="0";
	$this->preDriveState="0";
	$this->isVisible="0";
	$this->volumeType="0";
	$this->transProtocol="0";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_host_id() {
	return $this->hostId;
}
function set_host_id($hostIdIn) { 
	$this->hostId=$hostIdIn;
}

function isset_host_id() {
	return isset($this->hostId);
}


function get_device_name() {
	return $this->deviceName;
}
function set_device_name($deviceNameIn) { 
	$this->deviceName=$deviceNameIn;
}

function isset_device_name() {
	return isset($this->deviceName);
}


function get_file_system_type() {
	return $this->fileSystemType;
}
function set_file_system_type($fileSystemTypeIn) { 
	$this->fileSystemType=$fileSystemTypeIn;
}

function isset_file_system_type() {
	return isset($this->fileSystemType);
}


function get_capacity() {
	return $this->capacity;
}
function set_capacity($capacityIn) { 
	$this->capacity=$capacityIn;
}

function isset_capacity() {
	return isset($this->capacity);
}


function get_system_volume() {
	return $this->systemVolume;
}
function set_system_volume($systemVolumeIn) { 
	$this->systemVolume=$systemVolumeIn;
}

function isset_system_volume() {
	return isset($this->systemVolume);
}


function get_boot_volume() {
	return $this->bootVolume;
}
function set_boot_volume($bootVolumeIn) { 
	$this->bootVolume=$bootVolumeIn;
}

function isset_boot_volume() {
	return isset($this->bootVolume);
}


function get_cache_volume() {
	return $this->cacheVolume;
}
function set_cache_volume($cacheVolumeIn) { 
	$this->cacheVolume=$cacheVolumeIn;
}

function isset_cache_volume() {
	return isset($this->cacheVolume);
}


function get_last_sentinel_change() {
	return $this->lastSentinelChange;
}
function set_last_sentinel_change($lastSentinelChangeIn) { 
	$this->lastSentinelChange=$lastSentinelChangeIn;
}

function isset_last_sentinel_change() {
	return isset($this->lastSentinelChange);
}


function get_last_outpost_agent_change() {
	return $this->lastOutpostAgentChange;
}
function set_last_outpost_agent_change($lastOutpostAgentChangeIn) { 
	$this->lastOutpostAgentChange=$lastOutpostAgentChangeIn;
}

function isset_last_outpost_agent_change() {
	return isset($this->lastOutpostAgentChange);
}


function get_last_device_update_time() {
	return $this->lastDeviceUpdateTime;
}
function set_last_device_update_time($lastDeviceUpdateTimeIn) { 
	$this->lastDeviceUpdateTime=$lastDeviceUpdateTimeIn;
}

function isset_last_device_update_time() {
	return isset($this->lastDeviceUpdateTime);
}


function get_dps_id() {
	return $this->dpsId;
}
function set_dps_id($dpsIdIn) { 
	$this->dpsId=$dpsIdIn;
}

function isset_dps_id() {
	return isset($this->dpsId);
}


function get_far_line_protected() {
	return $this->farLineProtected;
}
function set_far_line_protected($farLineProtectedIn) { 
	$this->farLineProtected=$farLineProtectedIn;
}

function isset_far_line_protected() {
	return isset($this->farLineProtected);
}


function get_return_home_enabled() {
	return $this->returnHomeEnabled;
}
function set_return_home_enabled($returnHomeEnabledIn) { 
	$this->returnHomeEnabled=$returnHomeEnabledIn;
}

function isset_return_home_enabled() {
	return isset($this->returnHomeEnabled);
}


function get_do_resync() {
	return $this->doResync;
}
function set_do_resync($doResyncIn) { 
	$this->doResync=$doResyncIn;
}

function isset_do_resync() {
	return isset($this->doResync);
}


function get_starting_physical_offset() {
	return $this->startingPhysicalOffset;
}
function set_starting_physical_offset($startingPhysicalOffsetIn) { 
	$this->startingPhysicalOffset=$startingPhysicalOffsetIn;
}

function isset_starting_physical_offset() {
	return isset($this->startingPhysicalOffset);
}


function get_tm_id() {
	return $this->tmId;
}
function set_tm_id($tmIdIn) { 
	$this->tmId=$tmIdIn;
}

function isset_tm_id() {
	return isset($this->tmId);
}


function get_visible() {
	return $this->visible;
}
function set_visible($visibleIn) { 
	$this->visible=$visibleIn;
}

function isset_visible() {
	return isset($this->visible);
}


function get_device_locked() {
	return $this->deviceLocked;
}
function set_device_locked($deviceLockedIn) { 
	$this->deviceLocked=$deviceLockedIn;
}

function isset_device_locked() {
	return isset($this->deviceLocked);
}


function get_device_flag_in_use() {
	return $this->deviceFlagInUse;
}
function set_device_flag_in_use($deviceFlagInUseIn) { 
	$this->deviceFlagInUse=$deviceFlagInUseIn;
}

function isset_device_flag_in_use() {
	return isset($this->deviceFlagInUse);
}


function get_free_space() {
	return $this->freeSpace;
}
function set_free_space($freeSpaceIn) { 
	$this->freeSpace=$freeSpaceIn;
}

function isset_free_space() {
	return isset($this->freeSpace);
}


function get_readwritemode() {
	return $this->readwritemode;
}
function set_readwritemode($readwritemodeIn) { 
	$this->readwritemode=$readwritemodeIn;
}

function isset_readwritemode() {
	return isset($this->readwritemode);
}


function get_pre_drive_state() {
	return $this->preDriveState;
}
function set_pre_drive_state($preDriveStateIn) { 
	$this->preDriveState=$preDriveStateIn;
}

function isset_pre_drive_state() {
	return isset($this->preDriveState);
}


function get_is_visible() {
	return $this->isVisible;
}
function set_is_visible($isVisibleIn) { 
	$this->isVisible=$isVisibleIn;
}

function isset_is_visible() {
	return isset($this->isVisible);
}


function get_volume_type() {
	return $this->volumeType;
}
function set_volume_type($volumeTypeIn) { 
	$this->volumeType=$volumeTypeIn;
}

function isset_volume_type() {
	return isset($this->volumeType);
}


function get_trans_protocol() {
	return $this->transProtocol;
}
function set_trans_protocol($transProtocolIn) { 
	$this->transProtocol=$transProtocolIn;
}

function isset_trans_protocol() {
	return isset($this->transProtocol);
}


function get_volume_label() {
	return $this->volumeLabel;
}
function set_volume_label($volumeLabelIn) { 
	$this->volumeLabel=$volumeLabelIn;
}

function isset_volume_label() {
	return isset($this->volumeLabel);
}


function get_max_diff_files_threshold() {
	return $this->maxDiffFilesThreshold;
}
function set_max_diff_files_threshold($maxDiffFilesThresholdIn) { 
	$this->maxDiffFilesThreshold=$maxDiffFilesThresholdIn;
}

function isset_max_diff_files_threshold() {
	return isset($this->maxDiffFilesThreshold);
}


function get_mount_point() {
	return $this->mountPoint;
}
function set_mount_point($mountPointIn) { 
	$this->mountPoint=$mountPointIn;
}

function isset_mount_point() {
	return isset($this->mountPoint);
}


function get_phy__lunid() {
	return $this->Phy_Lunid;
}
function set_phy__lunid($Phy_LunidIn) { 
	$this->Phy_Lunid=$Phy_LunidIn;
}

function isset_phy__lunid() {
	return isset($this->Phy_Lunid);
}


function get_lun_state() {
	return $this->lun_state;
}
function set_lun_state($lun_stateIn) { 
	$this->lun_state=$lun_stateIn;
}

function isset_lun_state() {
	return isset($this->lun_state);
}


function get_offset() {
	return $this->offset;
}
function set_offset($offsetIn) { 
	$this->offset=$offsetIn;
}

function isset_offset() {
	return isset($this->offset);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($hostIdIn,$deviceNameIn,$fileSystemTypeIn,$capacityIn,$systemVolumeIn,$bootVolumeIn,$cacheVolumeIn,$lastSentinelChangeIn,$lastOutpostAgentChangeIn,$lastDeviceUpdateTimeIn,$dpsIdIn,$farLineProtectedIn,$returnHomeEnabledIn,$doResyncIn,$startingPhysicalOffsetIn,$tmIdIn,$visibleIn,$deviceLockedIn,$deviceFlagInUseIn,$freeSpaceIn,$readwritemodeIn,$preDriveStateIn,$isVisibleIn,$volumeTypeIn,$transProtocolIn,$volumeLabelIn,$maxDiffFilesThresholdIn,$mountPointIn,$Phy_LunidIn,$lun_stateIn,$offsetIn){
	$this->hostId=$hostIdIn;
	$this->deviceName=$deviceNameIn;
	$this->fileSystemType=$fileSystemTypeIn;
	$this->capacity=$capacityIn;
	$this->systemVolume=$systemVolumeIn;
	$this->bootVolume=$bootVolumeIn;
	$this->cacheVolume=$cacheVolumeIn;
	$this->lastSentinelChange=$lastSentinelChangeIn;
	$this->lastOutpostAgentChange=$lastOutpostAgentChangeIn;
	$this->lastDeviceUpdateTime=$lastDeviceUpdateTimeIn;
	$this->dpsId=$dpsIdIn;
	$this->farLineProtected=$farLineProtectedIn;
	$this->returnHomeEnabled=$returnHomeEnabledIn;
	$this->doResync=$doResyncIn;
	$this->startingPhysicalOffset=$startingPhysicalOffsetIn;
	$this->tmId=$tmIdIn;
	$this->visible=$visibleIn;
	$this->deviceLocked=$deviceLockedIn;
	$this->deviceFlagInUse=$deviceFlagInUseIn;
	$this->freeSpace=$freeSpaceIn;
	$this->readwritemode=$readwritemodeIn;
	$this->preDriveState=$preDriveStateIn;
	$this->isVisible=$isVisibleIn;
	$this->volumeType=$volumeTypeIn;
	$this->transProtocol=$transProtocolIn;
	$this->volumeLabel=$volumeLabelIn;
	$this->maxDiffFilesThreshold=$maxDiffFilesThresholdIn;
	$this->mountPoint=$mountPointIn;
	$this->Phy_Lunid=$Phy_LunidIn;
	$this->lun_state=$lun_stateIn;
	$this->offset=$offsetIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->hostId=$ary["hostId"];
	$this->deviceName=$ary["deviceName"];
	$this->fileSystemType=$ary["fileSystemType"];
	$this->capacity=$ary["capacity"];
	$this->systemVolume=$ary["systemVolume"];
	$this->bootVolume=$ary["bootVolume"];
	$this->cacheVolume=$ary["cacheVolume"];
	$this->lastSentinelChange=$ary["lastSentinelChange"];
	$this->lastOutpostAgentChange=$ary["lastOutpostAgentChange"];
	$this->lastDeviceUpdateTime=$ary["lastDeviceUpdateTime"];
	$this->dpsId=$ary["dpsId"];
	$this->farLineProtected=$ary["farLineProtected"];
	$this->returnHomeEnabled=$ary["returnHomeEnabled"];
	$this->doResync=$ary["doResync"];
	$this->startingPhysicalOffset=$ary["startingPhysicalOffset"];
	$this->tmId=$ary["tmId"];
	$this->visible=$ary["visible"];
	$this->deviceLocked=$ary["deviceLocked"];
	$this->deviceFlagInUse=$ary["deviceFlagInUse"];
	$this->freeSpace=$ary["freeSpace"];
	$this->readwritemode=$ary["readwritemode"];
	$this->preDriveState=$ary["preDriveState"];
	$this->isVisible=$ary["isVisible"];
	$this->volumeType=$ary["volumeType"];
	$this->transProtocol=$ary["transProtocol"];
	$this->volumeLabel=$ary["volumeLabel"];
	$this->maxDiffFilesThreshold=$ary["maxDiffFilesThreshold"];
	$this->mountPoint=$ary["mountPoint"];
	$this->Phy_Lunid=$ary["Phy_Lunid"];
	$this->lun_state=$ary["lun_state"];
	$this->offset=$ary["offset"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["hostId"]=$this->hostId;
		$oAry["deviceName"]=$this->deviceName;
		$oAry["fileSystemType"]=$this->fileSystemType;
		$oAry["capacity"]=$this->capacity;
		$oAry["systemVolume"]=$this->systemVolume;
		$oAry["bootVolume"]=$this->bootVolume;
		$oAry["cacheVolume"]=$this->cacheVolume;
		$oAry["lastSentinelChange"]=$this->lastSentinelChange;
		$oAry["lastOutpostAgentChange"]=$this->lastOutpostAgentChange;
		$oAry["lastDeviceUpdateTime"]=$this->lastDeviceUpdateTime;
		$oAry["dpsId"]=$this->dpsId;
		$oAry["farLineProtected"]=$this->farLineProtected;
		$oAry["returnHomeEnabled"]=$this->returnHomeEnabled;
		$oAry["doResync"]=$this->doResync;
		$oAry["startingPhysicalOffset"]=$this->startingPhysicalOffset;
		$oAry["tmId"]=$this->tmId;
		$oAry["visible"]=$this->visible;
		$oAry["deviceLocked"]=$this->deviceLocked;
		$oAry["deviceFlagInUse"]=$this->deviceFlagInUse;
		$oAry["freeSpace"]=$this->freeSpace;
		$oAry["readwritemode"]=$this->readwritemode;
		$oAry["preDriveState"]=$this->preDriveState;
		$oAry["isVisible"]=$this->isVisible;
		$oAry["volumeType"]=$this->volumeType;
		$oAry["transProtocol"]=$this->transProtocol;
		$oAry["volumeLabel"]=$this->volumeLabel;
		$oAry["maxDiffFilesThreshold"]=$this->maxDiffFilesThreshold;
		$oAry["mountPoint"]=$this->mountPoint;
		$oAry["Phy_Lunid"]=$this->Phy_Lunid;
		$oAry["lun_state"]=$this->lun_state;
		$oAry["offset"]=$this->offset;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_host_id() != $this->hostId) {
		return(false);
	}
	if ($valueObject->get_device_name() != $this->deviceName) {
		return(false);
	}
	if ($valueObject->get_file_system_type() != $this->fileSystemType) {
		return(false);
	}
	if ($valueObject->get_capacity() != $this->capacity) {
		return(false);
	}
	if ($valueObject->get_system_volume() != $this->systemVolume) {
		return(false);
	}
	if ($valueObject->get_boot_volume() != $this->bootVolume) {
		return(false);
	}
	if ($valueObject->get_cache_volume() != $this->cacheVolume) {
		return(false);
	}
	if ($valueObject->get_last_sentinel_change() != $this->lastSentinelChange) {
		return(false);
	}
	if ($valueObject->get_last_outpost_agent_change() != $this->lastOutpostAgentChange) {
		return(false);
	}
	if ($valueObject->get_last_device_update_time() != $this->lastDeviceUpdateTime) {
		return(false);
	}
	if ($valueObject->get_dps_id() != $this->dpsId) {
		return(false);
	}
	if ($valueObject->get_far_line_protected() != $this->farLineProtected) {
		return(false);
	}
	if ($valueObject->get_return_home_enabled() != $this->returnHomeEnabled) {
		return(false);
	}
	if ($valueObject->get_do_resync() != $this->doResync) {
		return(false);
	}
	if ($valueObject->get_starting_physical_offset() != $this->startingPhysicalOffset) {
		return(false);
	}
	if ($valueObject->get_tm_id() != $this->tmId) {
		return(false);
	}
	if ($valueObject->get_visible() != $this->visible) {
		return(false);
	}
	if ($valueObject->get_device_locked() != $this->deviceLocked) {
		return(false);
	}
	if ($valueObject->get_device_flag_in_use() != $this->deviceFlagInUse) {
		return(false);
	}
	if ($valueObject->get_free_space() != $this->freeSpace) {
		return(false);
	}
	if ($valueObject->get_readwritemode() != $this->readwritemode) {
		return(false);
	}
	if ($valueObject->get_pre_drive_state() != $this->preDriveState) {
		return(false);
	}
	if ($valueObject->get_is_visible() != $this->isVisible) {
		return(false);
	}
	if ($valueObject->get_volume_type() != $this->volumeType) {
		return(false);
	}
	if ($valueObject->get_trans_protocol() != $this->transProtocol) {
		return(false);
	}
	if ($valueObject->get_volume_label() != $this->volumeLabel) {
		return(false);
	}
	if ($valueObject->get_max_diff_files_threshold() != $this->maxDiffFilesThreshold) {
		return(false);
	}
	if ($valueObject->get_mount_point() != $this->mountPoint) {
		return(false);
	}
	if ($valueObject->get_phy__lunid() != $this->Phy_Lunid) {
		return(false);
	}
	if ($valueObject->get_lun_state() != $this->lun_state) {
		return(false);
	}
	if ($valueObject->get_offset() != $this->offset) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass LogicalVolumesVO, mapping to table logicalVolumes\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."hostId = ".$this->hostId."\n";
	$out = $out."deviceName = ".$this->deviceName."\n";
	$out = $out."fileSystemType = ".$this->fileSystemType."\n";
	$out = $out."capacity = ".$this->capacity."\n";
	$out = $out."systemVolume = ".$this->systemVolume."\n";
	$out = $out."bootVolume = ".$this->bootVolume."\n";
	$out = $out."cacheVolume = ".$this->cacheVolume."\n";
	$out = $out."lastSentinelChange = ".$this->lastSentinelChange."\n";
	$out = $out."lastOutpostAgentChange = ".$this->lastOutpostAgentChange."\n";
	$out = $out."lastDeviceUpdateTime = ".$this->lastDeviceUpdateTime."\n";
	$out = $out."dpsId = ".$this->dpsId."\n";
	$out = $out."farLineProtected = ".$this->farLineProtected."\n";
	$out = $out."returnHomeEnabled = ".$this->returnHomeEnabled."\n";
	$out = $out."doResync = ".$this->doResync."\n";
	$out = $out."startingPhysicalOffset = ".$this->startingPhysicalOffset."\n";
	$out = $out."tmId = ".$this->tmId."\n";
	$out = $out."visible = ".$this->visible."\n";
	$out = $out."deviceLocked = ".$this->deviceLocked."\n";
	$out = $out."deviceFlagInUse = ".$this->deviceFlagInUse."\n";
	$out = $out."freeSpace = ".$this->freeSpace."\n";
	$out = $out."readwritemode = ".$this->readwritemode."\n";
	$out = $out."preDriveState = ".$this->preDriveState."\n";
	$out = $out."isVisible = ".$this->isVisible."\n";
	$out = $out."volumeType = ".$this->volumeType."\n";
	$out = $out."transProtocol = ".$this->transProtocol."\n";
	$out = $out."volumeLabel = ".$this->volumeLabel."\n";
	$out = $out."maxDiffFilesThreshold = ".$this->maxDiffFilesThreshold."\n";
	$out = $out."mountPoint = ".$this->mountPoint."\n";
	$out = $out."Phy_Lunid = ".$this->Phy_Lunid."\n";
	$out = $out."lun_state = ".$this->lun_state."\n";
	$out = $out."offset = ".$this->offset."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new LogicalVolumesVO();
	
	 $cloned->set_host_id($this->hostId);
	 $cloned->set_device_name($this->deviceName);
	 $cloned->set_file_system_type($this->fileSystemType);
	 $cloned->set_capacity($this->capacity);
	 $cloned->set_system_volume($this->systemVolume);
	 $cloned->set_boot_volume($this->bootVolume);
	 $cloned->set_cache_volume($this->cacheVolume);
	 $cloned->set_last_sentinel_change($this->lastSentinelChange);
	 $cloned->set_last_outpost_agent_change($this->lastOutpostAgentChange);
	 $cloned->set_last_device_update_time($this->lastDeviceUpdateTime);
	 $cloned->set_dps_id($this->dpsId);
	 $cloned->set_far_line_protected($this->farLineProtected);
	 $cloned->set_return_home_enabled($this->returnHomeEnabled);
	 $cloned->set_do_resync($this->doResync);
	 $cloned->set_starting_physical_offset($this->startingPhysicalOffset);
	 $cloned->set_tm_id($this->tmId);
	 $cloned->set_visible($this->visible);
	 $cloned->set_device_locked($this->deviceLocked);
	 $cloned->set_device_flag_in_use($this->deviceFlagInUse);
	 $cloned->set_free_space($this->freeSpace);
	 $cloned->set_readwritemode($this->readwritemode);
	 $cloned->set_pre_drive_state($this->preDriveState);
	 $cloned->set_is_visible($this->isVisible);
	 $cloned->set_volume_type($this->volumeType);
	 $cloned->set_trans_protocol($this->transProtocol);
	 $cloned->set_volume_label($this->volumeLabel);
	 $cloned->set_max_diff_files_threshold($this->maxDiffFilesThreshold);
	 $cloned->set_mount_point($this->mountPoint);
	 $cloned->set_phy__lunid($this->Phy_Lunid);
	 $cloned->set_lun_state($this->lun_state);
	 $cloned->set_offset($this->offset);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
