<?php
/**
  * This sourcecode has been generated by InMage Source Code Generator version 1.0
  * The usage of generated code is restricted to InMage Systems Inc.
  *
  * frbOptions Data Access Object[DAO]
  * This class contains all database handling that is needed to 
  * permanently store and retrieve frbOptions object instances. 
  * Generated Date:	Tue, 27 Nov 2007 14:01:25 +0530	
  * Pattern Version:1.0
  */
class FrbOptionsDAO
{

/**
 * createValueObject-method. This method is used when the Dao class needs
 * to create new value object instance. The reason why this method exists
 * is that sometimes the programmer may want to extend also the valueObject
 * and then this method can be overrided to return extended valueObject.
 * NOTE: If you extend the valueObject class, make sure to override the
 * clone() method in it!
 */
function createValueObject() {
	return new FrbOptionsVO();
 }

/**
 * getObject-method. This will create and load valueObject contents from database 
 * using given Primary-Key as identifier. This method is just a convenience method 
 * for the real load-method which accepts the valueObject as a parameter. Returned
 * valueObject will be created using the createValueObject() method.
 */
function getObject($conn,$id) {
	$valueObject = $this->createValueObject();
	$valueObject->set_id($id);
	$this->findByPrimaryKey($conn,$valueObject);
	return $valueObject;
}

/**
 * findbyPrimaryKey-method. This will load valueObject contents from database using
 * Primary-Key as identifier. Upper layer should use this so that valueObject
 * instance is created and only primary-key should be specified. Then call
 * this method to complete other persistent information. This method will
 * overwrite all other fields except primary-key and possible runtime variables.
 * If load can not find matching row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be loaded.
 *                     Primary-key field must be set for this to work properly.
 */
function findByPrimaryKey($conn, $valueObject) {

	if (!$valueObject->get_id()) {
    	//print "Can not select without Primary-Key!";
		return false;
	}

	$sql = "SELECT * FROM frbOptions WHERE (id = '".$valueObject->get_id()."') "; 
	if ($this->singleQuery($conn, $sql, $valueObject)){
    	return true;
    }
    else{
    	return false;
	}
}

/**
 * findAll-method. This will read all contents from database table and
 * build an Vector containing valueObjects. Please note, that this method
 * will consume huge amounts of resources if table has lot's of rows. 
 * This should only be used when target tables have only small amounts
 * of data.
 *
 * @param conn         This method requires working database connection.
 */
function findAll($conn) {
	
	$sql = "SELECT * FROM frbOptions ORDER BY id ASC ";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
}

/**
 * create-method. This will create new row in database according to supplied
 * valueObject contents. Make sure that values for all NOT NULL columns are
 * correctly specified. Also, if this table does not use automatic surrogate-keys
 * the primary-key must be specified. After INSERT command this method will 
 * read the generated primary-key back to valueObject if automatic surrogate-keys
 * were used. 
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be created.
 *                     If automatic surrogate-keys are not used the Primary-key 
 *                     field must be set for this to work properly.
 */
function create($conn, $valueObject) {
	 $count = 0;
     $sql1 = "INSERT INTO frbOptions(";
     $sql3 = ") VALUES ("; 
	 
	 if ($valueObject->isset_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."id";
 	    $sql4 = $sql4."'".$valueObject->get_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_port())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."port";
 	    $sql4 = $sql4."'".$valueObject->get_port()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_temp_dir())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."tempDir";
 	    $sql4 = $sql4."'".$valueObject->get_temp_dir()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_recursive())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."recursive";
 	    $sql4 = $sql4."'".$valueObject->get_recursive()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_copy_whole_files())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."copyWholeFiles";
 	    $sql4 = $sql4."'".$valueObject->get_copy_whole_files()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_backup_existing())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."backupExisting";
 	    $sql4 = $sql4."'".$valueObject->get_backup_existing()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_backup_directory())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."backupDirectory";
 	    $sql4 = $sql4."'".$valueObject->get_backup_directory()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_backup_suffix())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."backupSuffix";
 	    $sql4 = $sql4."'".$valueObject->get_backup_suffix()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_block_size())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."blockSize";
 	    $sql4 = $sql4."'".$valueObject->get_block_size()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_compress())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."compress";
 	    $sql4 = $sql4."'".$valueObject->get_compress()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_update_only())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."updateOnly";
 	    $sql4 = $sql4."'".$valueObject->get_update_only()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_update_existing_only())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."updateExistingOnly";
 	    $sql4 = $sql4."'".$valueObject->get_update_existing_only()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ignore_existing())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ignoreExisting";
 	    $sql4 = $sql4."'".$valueObject->get_ignore_existing()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ignore_timestamp())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ignoreTimestamp";
 	    $sql4 = $sql4."'".$valueObject->get_ignore_timestamp()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_always_checksum())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."alwaysChecksum";
 	    $sql4 = $sql4."'".$valueObject->get_always_checksum()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_check_size_only())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."checkSizeOnly";
 	    $sql4 = $sql4."'".$valueObject->get_check_size_only()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_modify_window())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."modifyWindow";
 	    $sql4 = $sql4."'".$valueObject->get_modify_window()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_exclude_pattern())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."excludePattern";
 	    $sql4 = $sql4."'".$valueObject->get_exclude_pattern()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_include_pattern())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."includePattern";
 	    $sql4 = $sql4."'".$valueObject->get_include_pattern()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_delete_non_existing())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."deleteNonExisting";
 	    $sql4 = $sql4."'".$valueObject->get_delete_non_existing()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_delete_excluded())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."deleteExcluded";
 	    $sql4 = $sql4."'".$valueObject->get_delete_excluded()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_delete_after())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."deleteAfter";
 	    $sql4 = $sql4."'".$valueObject->get_delete_after()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_keep_partial())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."keepPartial";
 	    $sql4 = $sql4."'".$valueObject->get_keep_partial()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_retain_symlinks())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."retainSymlinks";
 	    $sql4 = $sql4."'".$valueObject->get_retain_symlinks()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_copy_link_referents())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."copyLinkReferents";
 	    $sql4 = $sql4."'".$valueObject->get_copy_link_referents()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_copy_unsafe_links())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."copyUnsafeLinks";
 	    $sql4 = $sql4."'".$valueObject->get_copy_unsafe_links()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_copy_safe_links())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."copySafeLinks";
 	    $sql4 = $sql4."'".$valueObject->get_copy_safe_links()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_preserve_permissions())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."preservePermissions";
 	    $sql4 = $sql4."'".$valueObject->get_preserve_permissions()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_preserve_owner())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."preserveOwner";
 	    $sql4 = $sql4."'".$valueObject->get_preserve_owner()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_preserve_group())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."preserveGroup";
 	    $sql4 = $sql4."'".$valueObject->get_preserve_group()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_preserve_devices())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."preserveDevices";
 	    $sql4 = $sql4."'".$valueObject->get_preserve_devices()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_preserve_times())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."preserveTimes";
 	    $sql4 = $sql4."'".$valueObject->get_preserve_times()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_dont_cross_file_system())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."dontCrossFileSystem";
 	    $sql4 = $sql4."'".$valueObject->get_dont_cross_file_system()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_bw_limit())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."bwLimit";
 	    $sql4 = $sql4."'".$valueObject->get_bw_limit()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_io_timeout())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ioTimeout";
 	    $sql4 = $sql4."'".$valueObject->get_io_timeout()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_print_stats())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."printStats";
 	    $sql4 = $sql4."'".$valueObject->get_print_stats()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_progress())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."progress";
 	    $sql4 = $sql4."'".$valueObject->get_progress()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_verbose_level())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."verboseLevel";
 	    $sql4 = $sql4."'".$valueObject->get_verbose_level()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_log_file_format())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."logFileFormat";
 	    $sql4 = $sql4."'".$valueObject->get_log_file_format()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_catch_all())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."catchAll";
 	    $sql4 = $sql4."'".$valueObject->get_catch_all()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_directory_contents())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."directoryContents";
 	    $sql4 = $sql4."'".$valueObject->get_directory_contents()."'"; 	
 		$count++;
 	 }
	 
	$sql = $sql1 . $sql2. $sql3. $sql4.")";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * update-method. This method will save the current state of valueObject to database.
 * Save can not be used to create new instances in database, so upper layer must
 * make sure that the primary-key is correctly specified. Primary-key will indicate
 * which instance is going to be updated in database. If save can not find matching 
 * row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be saved.
 *                     Primary-key field must be set for this to work properly.
 */
function update($conn, $valueObject) {
	$count = 0;
	$sql = "UPDATE frbOptions SET ";
	if ($valueObject->isset_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."id = '".$valueObject->get_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_port())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."port = '".$valueObject->get_port()."'";
		$count++;
	}
	
	if ($valueObject->isset_temp_dir())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."tempDir = '".$valueObject->get_temp_dir()."'";
		$count++;
	}
	
	if ($valueObject->isset_recursive())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."recursive = '".$valueObject->get_recursive()."'";
		$count++;
	}
	
	if ($valueObject->isset_copy_whole_files())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."copyWholeFiles = '".$valueObject->get_copy_whole_files()."'";
		$count++;
	}
	
	if ($valueObject->isset_backup_existing())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."backupExisting = '".$valueObject->get_backup_existing()."'";
		$count++;
	}
	
	if ($valueObject->isset_backup_directory())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."backupDirectory = '".$valueObject->get_backup_directory()."'";
		$count++;
	}
	
	if ($valueObject->isset_backup_suffix())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."backupSuffix = '".$valueObject->get_backup_suffix()."'";
		$count++;
	}
	
	if ($valueObject->isset_block_size())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."blockSize = '".$valueObject->get_block_size()."'";
		$count++;
	}
	
	if ($valueObject->isset_compress())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."compress = '".$valueObject->get_compress()."'";
		$count++;
	}
	
	if ($valueObject->isset_update_only())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."updateOnly = '".$valueObject->get_update_only()."'";
		$count++;
	}
	
	if ($valueObject->isset_update_existing_only())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."updateExistingOnly = '".$valueObject->get_update_existing_only()."'";
		$count++;
	}
	
	if ($valueObject->isset_ignore_existing())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ignoreExisting = '".$valueObject->get_ignore_existing()."'";
		$count++;
	}
	
	if ($valueObject->isset_ignore_timestamp())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ignoreTimestamp = '".$valueObject->get_ignore_timestamp()."'";
		$count++;
	}
	
	if ($valueObject->isset_always_checksum())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."alwaysChecksum = '".$valueObject->get_always_checksum()."'";
		$count++;
	}
	
	if ($valueObject->isset_check_size_only())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."checkSizeOnly = '".$valueObject->get_check_size_only()."'";
		$count++;
	}
	
	if ($valueObject->isset_modify_window())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."modifyWindow = '".$valueObject->get_modify_window()."'";
		$count++;
	}
	
	if ($valueObject->isset_exclude_pattern())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."excludePattern = '".$valueObject->get_exclude_pattern()."'";
		$count++;
	}
	
	if ($valueObject->isset_include_pattern())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."includePattern = '".$valueObject->get_include_pattern()."'";
		$count++;
	}
	
	if ($valueObject->isset_delete_non_existing())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."deleteNonExisting = '".$valueObject->get_delete_non_existing()."'";
		$count++;
	}
	
	if ($valueObject->isset_delete_excluded())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."deleteExcluded = '".$valueObject->get_delete_excluded()."'";
		$count++;
	}
	
	if ($valueObject->isset_delete_after())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."deleteAfter = '".$valueObject->get_delete_after()."'";
		$count++;
	}
	
	if ($valueObject->isset_keep_partial())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."keepPartial = '".$valueObject->get_keep_partial()."'";
		$count++;
	}
	
	if ($valueObject->isset_retain_symlinks())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."retainSymlinks = '".$valueObject->get_retain_symlinks()."'";
		$count++;
	}
	
	if ($valueObject->isset_copy_link_referents())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."copyLinkReferents = '".$valueObject->get_copy_link_referents()."'";
		$count++;
	}
	
	if ($valueObject->isset_copy_unsafe_links())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."copyUnsafeLinks = '".$valueObject->get_copy_unsafe_links()."'";
		$count++;
	}
	
	if ($valueObject->isset_copy_safe_links())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."copySafeLinks = '".$valueObject->get_copy_safe_links()."'";
		$count++;
	}
	
	if ($valueObject->isset_preserve_permissions())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."preservePermissions = '".$valueObject->get_preserve_permissions()."'";
		$count++;
	}
	
	if ($valueObject->isset_preserve_owner())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."preserveOwner = '".$valueObject->get_preserve_owner()."'";
		$count++;
	}
	
	if ($valueObject->isset_preserve_group())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."preserveGroup = '".$valueObject->get_preserve_group()."'";
		$count++;
	}
	
	if ($valueObject->isset_preserve_devices())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."preserveDevices = '".$valueObject->get_preserve_devices()."'";
		$count++;
	}
	
	if ($valueObject->isset_preserve_times())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."preserveTimes = '".$valueObject->get_preserve_times()."'";
		$count++;
	}
	
	if ($valueObject->isset_dont_cross_file_system())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."dontCrossFileSystem = '".$valueObject->get_dont_cross_file_system()."'";
		$count++;
	}
	
	if ($valueObject->isset_bw_limit())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."bwLimit = '".$valueObject->get_bw_limit()."'";
		$count++;
	}
	
	if ($valueObject->isset_io_timeout())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ioTimeout = '".$valueObject->get_io_timeout()."'";
		$count++;
	}
	
	if ($valueObject->isset_print_stats())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."printStats = '".$valueObject->get_print_stats()."'";
		$count++;
	}
	
	if ($valueObject->isset_progress())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."progress = '".$valueObject->get_progress()."'";
		$count++;
	}
	
	if ($valueObject->isset_verbose_level())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."verboseLevel = '".$valueObject->get_verbose_level()."'";
		$count++;
	}
	
	if ($valueObject->isset_log_file_format())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."logFileFormat = '".$valueObject->get_log_file_format()."'";
		$count++;
	}
	
	if ($valueObject->isset_catch_all())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."catchAll = '".$valueObject->get_catch_all()."'";
		$count++;
	}
	
	if ($valueObject->isset_directory_contents())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."directoryContents = '".$valueObject->get_directory_contents()."'";
		$count++;
	}
	
	$sql = $sql." WHERE (id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}

/**
 * delete-method. This method will remove the information from database as identified by
 * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
 * be restored by calling save. Restoring can only be done using create method but if 
 * database is using automatic surrogate-keys, the resulting object will have different 
 * primary-key than what it was in the deleted object. If delete can not find matching row,
 * NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be deleted.
 *                     Primary-key field must be set for this to work properly.
 */
function delete($conn, $valueObject) {
	
	if (!$valueObject->get_id()) {
         //print "Can not delete without Primary-Key!";
         return false;
    }
	$sql = "DELETE FROM frbOptions WHERE (id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
         //print "PrimaryKey Error when updating DB!";
          return false;
    }
 	return true;
}

/**
 * deleteAll-method. This method will remove all information from the table that matches
 * this DAO and ValueObject couple. This should be the most efficient way to clear table.
 * Once deleteAll has been called, no valueObject that has been created before can be 
 * restored by calling save. Restoring can only be done using create method but if database 
 * is using automatic surrogate-keys, the resulting object will have different primary-key 
 * than what it was in the deleted object. (Note, the implementation of this method should
 * be different with different DB backends.)
 *
 * @param conn         This method requires working database connection.
 */
function deleteAll($conn) {
	$sql = "DELETE FROM frbOptions";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * coutAll-method. This method will return the number of all rows from table that matches
 * this Dao. The implementation will simply execute "select count(primarykey) from table".
 * If table is empty, the return value is 0. This method should be used before calling
 * findAll, to make sure table has not too many rows.
 *
 * @param conn         This method requires working database connection.
 */
function countAll($conn) {
	$sql = "SELECT count(*) FROM frbOptions";
	$allRows = 0;
	$result = $conn->execute($sql);
    if ($row = $conn->nextRow($result))
    	$allRows = $row[0];
    return $allRows;
}

/** 
 * searchMatching-Method. This method provides searching capability to 
 * get matching valueObjects from database. It works by searching all 
 * objects that match permanent instance variables of given object.
 * Upper layer should use this by setting some parameters in valueObject
 * and then  call searchMatching. The result will be 0-N objects in vector, 
 * all matching those criteria you specified. Those instance-variables that
 * have NULL values are excluded in search-criteria.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance where search will be based.
 *                     Primary-key field should not be set.
 */
function searchMatching($conn, $valueObject) {
	$first = true;
    $sql = "SELECT * FROM frbOptions WHERE 1=1 ";
	
	if ($valueObject->get_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND id LIKE '".$valueObject->get_id()."%' ";
    }
	
	if ($valueObject->get_port() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND port LIKE '".$valueObject->get_port()."%' ";
    }
	
	if ($valueObject->get_temp_dir() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND tempDir LIKE '".$valueObject->get_temp_dir()."%' ";
    }
	
	if ($valueObject->get_recursive() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND recursive LIKE '".$valueObject->get_recursive()."%' ";
    }
	
	if ($valueObject->get_copy_whole_files() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND copyWholeFiles LIKE '".$valueObject->get_copy_whole_files()."%' ";
    }
	
	if ($valueObject->get_backup_existing() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND backupExisting LIKE '".$valueObject->get_backup_existing()."%' ";
    }
	
	if ($valueObject->get_backup_directory() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND backupDirectory LIKE '".$valueObject->get_backup_directory()."%' ";
    }
	
	if ($valueObject->get_backup_suffix() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND backupSuffix LIKE '".$valueObject->get_backup_suffix()."%' ";
    }
	
	if ($valueObject->get_block_size() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND blockSize LIKE '".$valueObject->get_block_size()."%' ";
    }
	
	if ($valueObject->get_compress() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND compress LIKE '".$valueObject->get_compress()."%' ";
    }
	
	if ($valueObject->get_update_only() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND updateOnly LIKE '".$valueObject->get_update_only()."%' ";
    }
	
	if ($valueObject->get_update_existing_only() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND updateExistingOnly LIKE '".$valueObject->get_update_existing_only()."%' ";
    }
	
	if ($valueObject->get_ignore_existing() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ignoreExisting LIKE '".$valueObject->get_ignore_existing()."%' ";
    }
	
	if ($valueObject->get_ignore_timestamp() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ignoreTimestamp LIKE '".$valueObject->get_ignore_timestamp()."%' ";
    }
	
	if ($valueObject->get_always_checksum() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND alwaysChecksum LIKE '".$valueObject->get_always_checksum()."%' ";
    }
	
	if ($valueObject->get_check_size_only() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND checkSizeOnly LIKE '".$valueObject->get_check_size_only()."%' ";
    }
	
	if ($valueObject->get_modify_window() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND modifyWindow LIKE '".$valueObject->get_modify_window()."%' ";
    }
	
	if ($valueObject->get_exclude_pattern() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND excludePattern LIKE '".$valueObject->get_exclude_pattern()."%' ";
    }
	
	if ($valueObject->get_include_pattern() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND includePattern LIKE '".$valueObject->get_include_pattern()."%' ";
    }
	
	if ($valueObject->get_delete_non_existing() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND deleteNonExisting LIKE '".$valueObject->get_delete_non_existing()."%' ";
    }
	
	if ($valueObject->get_delete_excluded() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND deleteExcluded LIKE '".$valueObject->get_delete_excluded()."%' ";
    }
	
	if ($valueObject->get_delete_after() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND deleteAfter LIKE '".$valueObject->get_delete_after()."%' ";
    }
	
	if ($valueObject->get_keep_partial() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND keepPartial LIKE '".$valueObject->get_keep_partial()."%' ";
    }
	
	if ($valueObject->get_retain_symlinks() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND retainSymlinks LIKE '".$valueObject->get_retain_symlinks()."%' ";
    }
	
	if ($valueObject->get_copy_link_referents() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND copyLinkReferents LIKE '".$valueObject->get_copy_link_referents()."%' ";
    }
	
	if ($valueObject->get_copy_unsafe_links() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND copyUnsafeLinks LIKE '".$valueObject->get_copy_unsafe_links()."%' ";
    }
	
	if ($valueObject->get_copy_safe_links() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND copySafeLinks LIKE '".$valueObject->get_copy_safe_links()."%' ";
    }
	
	if ($valueObject->get_preserve_permissions() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND preservePermissions LIKE '".$valueObject->get_preserve_permissions()."%' ";
    }
	
	if ($valueObject->get_preserve_owner() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND preserveOwner LIKE '".$valueObject->get_preserve_owner()."%' ";
    }
	
	if ($valueObject->get_preserve_group() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND preserveGroup LIKE '".$valueObject->get_preserve_group()."%' ";
    }
	
	if ($valueObject->get_preserve_devices() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND preserveDevices LIKE '".$valueObject->get_preserve_devices()."%' ";
    }
	
	if ($valueObject->get_preserve_times() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND preserveTimes LIKE '".$valueObject->get_preserve_times()."%' ";
    }
	
	if ($valueObject->get_dont_cross_file_system() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND dontCrossFileSystem LIKE '".$valueObject->get_dont_cross_file_system()."%' ";
    }
	
	if ($valueObject->get_bw_limit() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND bwLimit LIKE '".$valueObject->get_bw_limit()."%' ";
    }
	
	if ($valueObject->get_io_timeout() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ioTimeout LIKE '".$valueObject->get_io_timeout()."%' ";
    }
	
	if ($valueObject->get_print_stats() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND printStats LIKE '".$valueObject->get_print_stats()."%' ";
    }
	
	if ($valueObject->get_progress() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND progress LIKE '".$valueObject->get_progress()."%' ";
    }
	
	if ($valueObject->get_verbose_level() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND verboseLevel LIKE '".$valueObject->get_verbose_level()."%' ";
    }
	
	if ($valueObject->get_log_file_format() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND logFileFormat LIKE '".$valueObject->get_log_file_format()."%' ";
    }
	
	if ($valueObject->get_catch_all() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND catchAll LIKE '".$valueObject->get_catch_all()."%' ";
    }
	
	if ($valueObject->get_directory_contents() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND directoryContents LIKE '".$valueObject->get_directory_contents()."%' ";
    }
	
	$sql = $sql." ORDER BY ";
	$sql = $sql."id ASC ";
    // Prevent accidential full table results.
    // Use findAll if all rows must be returned.
    if ($first)
    	return array();

    $searchResults = $this->listQuery($conn, $sql);
    return $searchResults;
}

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return only one row. The resultset will be converted
 * to valueObject. If no rows were found, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 * @param valueObject  Class-instance where resulting data will be stored.
 */
 function singleQuery($conn, $sql, $valueObject) {
 	$result = $conn->execute($sql);
	if ($row = $conn->nextRow($result)) {
		$valueObject->setAry($row);
     } else {
        //print " Object Not Found!";
     	return false;
     }
     return true;
 }

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. The resultset will be converted
 * to the List of valueObjects. If no rows were found, an empty List will be returned.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQuery($conn, $sql) {
	$searchResults = array();
    $result = $conn->execute($sql);
    while ($row = $conn->nextRow($result)) {
    	$temp = $this->createValueObject();
    	$temp->setAry($row);
        array_push($searchResults, $temp);
	}
	return $searchResults;
}
/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. However the results will be unstructured
 * i.e. Not formatted as VO Objects 
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQueryResultset($conn,$sql)
{
	$searchResults = array();
    $result = $conn->execute($sql);
	while ($row = $conn->nextRow($result)) {
        array_push($searchResults, $row);
	}
	return $searchResults;
}

/**
 * databaseUpdate-method. This method is a helper method for internal use. It will execute
 * all database handling that will change the information in tables. SELECT queries will
 * not be executed here however. The return value indicates how many rows were affected.
 * This method will also make sure that if cache is used, it will reset when data changes.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 */
function databaseUpdate($conn, $sql) {
	$result = $conn->execute($sql);
	return $result;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPDAO-1.9";
 }

}
?>
