<?php
/**
  * This sourcecode has been generated by InMage Source Code Generator version 1.0
  * The usage of generated code is restricted to InMage Systems Inc.
  *
  * logicalVolumes Data Access Object[DAO]
  * This class contains all database handling that is needed to 
  * permanently store and retrieve logicalVolumes object instances. 
  * Generated Date:	Thu, 15 May 2008 04:32:29 +0530	
  * Pattern Version:1.0
  */
class LogicalVolumesDAO
{

/**
 * createValueObject-method. This method is used when the Dao class needs
 * to create new value object instance. The reason why this method exists
 * is that sometimes the programmer may want to extend also the valueObject
 * and then this method can be overrided to return extended valueObject.
 * NOTE: If you extend the valueObject class, make sure to override the
 * clone() method in it!
 */
function createValueObject() {
	return new LogicalVolumesVO();
 }

/**
 * getObject-method. This will create and load valueObject contents from database 
 * using given Primary-Key as identifier. This method is just a convenience method 
 * for the real load-method which accepts the valueObject as a parameter. Returned
 * valueObject will be created using the createValueObject() method.
 */
function getObject($conn) {
	$valueObject = $this->createValueObject();
	$this->findByPrimaryKey($conn,$valueObject);
	return $valueObject;
}

/**
 * findbyhostid_devicename-method. A user defined or custom findbyMethod  
 * This method selects by hostid and devicename
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function find_by_hostid_devicename($conn, $params = array()) {

	$sql = "hostId='id' and  deviceName ='devicename'";
	$sql = str_replace(array_keys($params), array_values($params), $sql);
	$sql = "SELECT * FROM logicalVolumes WHERE (" . $sql . ")";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
		
}

/**
 * findAll-method. This will read all contents from database table and
 * build an Vector containing valueObjects. Please note, that this method
 * will consume huge amounts of resources if table has lot's of rows. 
 * This should only be used when target tables have only small amounts
 * of data.
 *
 * @param conn         This method requires working database connection.
 */
function findAll($conn) {
	
	$sql = "SELECT * FROM logicalVolumes";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
}

/**
 * create-method. This will create new row in database according to supplied
 * valueObject contents. Make sure that values for all NOT NULL columns are
 * correctly specified. Also, if this table does not use automatic surrogate-keys
 * the primary-key must be specified. After INSERT command this method will 
 * read the generated primary-key back to valueObject if automatic surrogate-keys
 * were used. 
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be created.
 *                     If automatic surrogate-keys are not used the Primary-key 
 *                     field must be set for this to work properly.
 */
function create($conn, $valueObject) {
	 $count = 0;
     $sql1 = "INSERT INTO logicalVolumes(";
     $sql3 = ") VALUES ("; 
	 
	 if ($valueObject->isset_host_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."hostId";
 	    
 	    
 	     $sql4 = $sql4."'".$valueObject->get_host_id()."'"; 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_device_name())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."deviceName";
 	    
 	    
 	     $sql4 = $sql4."'".$valueObject->get_device_name()."'"; 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_file_system_type())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."fileSystemType";
 	    
 	    
 	     $sql4 = $sql4."'".$valueObject->get_file_system_type()."'"; 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_capacity())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."capacity";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_capacity(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_system_volume())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."systemVolume";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_system_volume(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_boot_volume())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."bootVolume";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_boot_volume(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_cache_volume())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."cacheVolume";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_cache_volume(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_last_sentinel_change())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."lastSentinelChange";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_last_sentinel_change(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_last_outpost_agent_change())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."lastOutpostAgentChange";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_last_outpost_agent_change(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_last_device_update_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."lastDeviceUpdateTime";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_last_device_update_time(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_dps_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."dpsId";
 	    
 	    
 	     $sql4 = $sql4."'".$valueObject->get_dps_id()."'"; 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_far_line_protected())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."farLineProtected";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_far_line_protected(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_return_home_enabled())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."returnHomeEnabled";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_return_home_enabled(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_do_resync())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."doResync";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_do_resync(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_starting_physical_offset())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."startingPhysicalOffset";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_starting_physical_offset(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_tm_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."tmId";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_tm_id(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_visible())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."visible";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_visible(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_device_locked())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."deviceLocked";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_device_locked(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_device_flag_in_use())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."deviceFlagInUse";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_device_flag_in_use(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_free_space())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."freeSpace";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_free_space(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_readwritemode())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."readwritemode";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_readwritemode(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_pre_drive_state())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."preDriveState";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_pre_drive_state(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_is_visible())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."isVisible";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_is_visible(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_volume_type())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."volumeType";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_volume_type(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_trans_protocol())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."transProtocol";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_trans_protocol(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_volume_label())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."volumeLabel";
 	    
 	    
 	     $sql4 = $sql4."'".$valueObject->get_volume_label()."'"; 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_max_diff_files_threshold())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."maxDiffFilesThreshold";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_max_diff_files_threshold(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_mount_point())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."mountPoint";
 	    
 	    
 	     $sql4 = $sql4."'".$valueObject->get_mount_point()."'"; 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_phy__lunid())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."Phy_Lunid";
 	    
 	    
 	     $sql4 = $sql4."'".$valueObject->get_phy__lunid()."'"; 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_lun_state())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."lun_state";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_lun_state(); 	
		
 		$count++;
 	 }
	 
	 if ($valueObject->isset_offset())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."offset";
 	    
 	    
 	     $sql4 = $sql4.$valueObject->get_offset(); 	
		
 		$count++;
 	 }
	 
	$sql = $sql1 . $sql2. $sql3. $sql4.")";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * update_byhostid_devicename-method. A user defined or custom updatebyMethod  
 * This method updates by type
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function update_by_hostid_devicename($conn, $valueObject,$params = array()) {
	$wsql = "hostId = 'id' and  deviceName = 'devicename'";
	$ssql = str_replace(array_keys($params), array_values($params), $wsql);
	$wsql = " WHERE (" . $ssql . ")";
	
	$count = 0;
	$sql = "UPDATE logicalVolumes SET ";
	if ($valueObject->isset_host_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."hostId = '".$valueObject->get_host_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_device_name())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."deviceName = '".$valueObject->get_device_name()."'";
		$count++;
	}
	
	if ($valueObject->isset_file_system_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."fileSystemType = '".$valueObject->get_file_system_type()."'";
		$count++;
	}
	
	if ($valueObject->isset_capacity())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."capacity = ".$valueObject->get_capacity();
		$count++;
	}
	
	if ($valueObject->isset_system_volume())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."systemVolume = ".$valueObject->get_system_volume();
		$count++;
	}
	
	if ($valueObject->isset_boot_volume())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."bootVolume = ".$valueObject->get_boot_volume();
		$count++;
	}
	
	if ($valueObject->isset_cache_volume())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."cacheVolume = ".$valueObject->get_cache_volume();
		$count++;
	}
	
	if ($valueObject->isset_last_sentinel_change())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."lastSentinelChange = ".$valueObject->get_last_sentinel_change();
		$count++;
	}
	
	if ($valueObject->isset_last_outpost_agent_change())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."lastOutpostAgentChange = ".$valueObject->get_last_outpost_agent_change();
		$count++;
	}
	
	if ($valueObject->isset_last_device_update_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."lastDeviceUpdateTime = ".$valueObject->get_last_device_update_time();
		$count++;
	}
	
	if ($valueObject->isset_dps_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."dpsId = '".$valueObject->get_dps_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_far_line_protected())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."farLineProtected = ".$valueObject->get_far_line_protected();
		$count++;
	}
	
	if ($valueObject->isset_return_home_enabled())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."returnHomeEnabled = ".$valueObject->get_return_home_enabled();
		$count++;
	}
	
	if ($valueObject->isset_do_resync())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."doResync = ".$valueObject->get_do_resync();
		$count++;
	}
	
	if ($valueObject->isset_starting_physical_offset())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."startingPhysicalOffset = ".$valueObject->get_starting_physical_offset();
		$count++;
	}
	
	if ($valueObject->isset_tm_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."tmId = ".$valueObject->get_tm_id();
		$count++;
	}
	
	if ($valueObject->isset_visible())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."visible = ".$valueObject->get_visible();
		$count++;
	}
	
	if ($valueObject->isset_device_locked())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."deviceLocked = ".$valueObject->get_device_locked();
		$count++;
	}
	
	if ($valueObject->isset_device_flag_in_use())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."deviceFlagInUse = ".$valueObject->get_device_flag_in_use();
		$count++;
	}
	
	if ($valueObject->isset_free_space())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."freeSpace = ".$valueObject->get_free_space();
		$count++;
	}
	
	if ($valueObject->isset_readwritemode())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."readwritemode = ".$valueObject->get_readwritemode();
		$count++;
	}
	
	if ($valueObject->isset_pre_drive_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."preDriveState = ".$valueObject->get_pre_drive_state();
		$count++;
	}
	
	if ($valueObject->isset_is_visible())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."isVisible = ".$valueObject->get_is_visible();
		$count++;
	}
	
	if ($valueObject->isset_volume_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."volumeType = ".$valueObject->get_volume_type();
		$count++;
	}
	
	if ($valueObject->isset_trans_protocol())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."transProtocol = ".$valueObject->get_trans_protocol();
		$count++;
	}
	
	if ($valueObject->isset_volume_label())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."volumeLabel = '".$valueObject->get_volume_label()."'";
		$count++;
	}
	
	if ($valueObject->isset_max_diff_files_threshold())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."maxDiffFilesThreshold = ".$valueObject->get_max_diff_files_threshold();
		$count++;
	}
	
	if ($valueObject->isset_mount_point())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."mountPoint = '".$valueObject->get_mount_point()."'";
		$count++;
	}
	
	if ($valueObject->isset_phy__lunid())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."Phy_Lunid = '".$valueObject->get_phy__lunid()."'";
		$count++;
	}
	
	if ($valueObject->isset_lun_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."lun_state = ".$valueObject->get_lun_state();
		$count++;
	}
	
	if ($valueObject->isset_offset())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."offset = ".$valueObject->get_offset();
		$count++;
	}
	
	$sql = $sql.$wsql;    
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}

/**
 * update_bydoresync-method. A user defined or custom updatebyMethod  
 * This method updates by type
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function update_by_doresync($conn, $valueObject,$params = array()) {
	$wsql = "(hostId =  'srcid' and  deviceName = 'srcdevicename')  or (hostId = 'destid' and  deviceName = 'destdevicename')";
	$ssql = str_replace(array_keys($params), array_values($params), $wsql);
	$wsql = " WHERE (" . $ssql . ")";
	
	$count = 0;
	$sql = "UPDATE logicalVolumes SET ";
	if ($valueObject->isset_host_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."hostId = '".$valueObject->get_host_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_device_name())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."deviceName = '".$valueObject->get_device_name()."'";
		$count++;
	}
	
	if ($valueObject->isset_file_system_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."fileSystemType = '".$valueObject->get_file_system_type()."'";
		$count++;
	}
	
	if ($valueObject->isset_capacity())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."capacity = ".$valueObject->get_capacity();
		$count++;
	}
	
	if ($valueObject->isset_system_volume())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."systemVolume = ".$valueObject->get_system_volume();
		$count++;
	}
	
	if ($valueObject->isset_boot_volume())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."bootVolume = ".$valueObject->get_boot_volume();
		$count++;
	}
	
	if ($valueObject->isset_cache_volume())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."cacheVolume = ".$valueObject->get_cache_volume();
		$count++;
	}
	
	if ($valueObject->isset_last_sentinel_change())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."lastSentinelChange = ".$valueObject->get_last_sentinel_change();
		$count++;
	}
	
	if ($valueObject->isset_last_outpost_agent_change())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."lastOutpostAgentChange = ".$valueObject->get_last_outpost_agent_change();
		$count++;
	}
	
	if ($valueObject->isset_last_device_update_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."lastDeviceUpdateTime = ".$valueObject->get_last_device_update_time();
		$count++;
	}
	
	if ($valueObject->isset_dps_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."dpsId = '".$valueObject->get_dps_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_far_line_protected())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."farLineProtected = ".$valueObject->get_far_line_protected();
		$count++;
	}
	
	if ($valueObject->isset_return_home_enabled())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."returnHomeEnabled = ".$valueObject->get_return_home_enabled();
		$count++;
	}
	
	if ($valueObject->isset_do_resync())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."doResync = ".$valueObject->get_do_resync();
		$count++;
	}
	
	if ($valueObject->isset_starting_physical_offset())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."startingPhysicalOffset = ".$valueObject->get_starting_physical_offset();
		$count++;
	}
	
	if ($valueObject->isset_tm_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."tmId = ".$valueObject->get_tm_id();
		$count++;
	}
	
	if ($valueObject->isset_visible())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."visible = ".$valueObject->get_visible();
		$count++;
	}
	
	if ($valueObject->isset_device_locked())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."deviceLocked = ".$valueObject->get_device_locked();
		$count++;
	}
	
	if ($valueObject->isset_device_flag_in_use())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."deviceFlagInUse = ".$valueObject->get_device_flag_in_use();
		$count++;
	}
	
	if ($valueObject->isset_free_space())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."freeSpace = ".$valueObject->get_free_space();
		$count++;
	}
	
	if ($valueObject->isset_readwritemode())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."readwritemode = ".$valueObject->get_readwritemode();
		$count++;
	}
	
	if ($valueObject->isset_pre_drive_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."preDriveState = ".$valueObject->get_pre_drive_state();
		$count++;
	}
	
	if ($valueObject->isset_is_visible())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."isVisible = ".$valueObject->get_is_visible();
		$count++;
	}
	
	if ($valueObject->isset_volume_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."volumeType = ".$valueObject->get_volume_type();
		$count++;
	}
	
	if ($valueObject->isset_trans_protocol())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."transProtocol = ".$valueObject->get_trans_protocol();
		$count++;
	}
	
	if ($valueObject->isset_volume_label())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."volumeLabel = '".$valueObject->get_volume_label()."'";
		$count++;
	}
	
	if ($valueObject->isset_max_diff_files_threshold())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."maxDiffFilesThreshold = ".$valueObject->get_max_diff_files_threshold();
		$count++;
	}
	
	if ($valueObject->isset_mount_point())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."mountPoint = '".$valueObject->get_mount_point()."'";
		$count++;
	}
	
	if ($valueObject->isset_phy__lunid())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."Phy_Lunid = '".$valueObject->get_phy__lunid()."'";
		$count++;
	}
	
	if ($valueObject->isset_lun_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."lun_state = ".$valueObject->get_lun_state();
		$count++;
	}
	
	if ($valueObject->isset_offset())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		
		 $sql = $sql."offset = ".$valueObject->get_offset();
		$count++;
	}
	
	$sql = $sql.$wsql;    
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}

/**
 * deleteAll-method. This method will remove all information from the table that matches
 * this DAO and ValueObject couple. This should be the most efficient way to clear table.
 * Once deleteAll has been called, no valueObject that has been created before can be 
 * restored by calling save. Restoring can only be done using create method but if database 
 * is using automatic surrogate-keys, the resulting object will have different primary-key 
 * than what it was in the deleted object. (Note, the implementation of this method should
 * be different with different DB backends.)
 *
 * @param conn         This method requires working database connection.
 */
function deleteAll($conn) {
	$sql = "DELETE FROM logicalVolumes";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * coutAll-method. This method will return the number of all rows from table that matches
 * this Dao. The implementation will simply execute "select count(primarykey) from table".
 * If table is empty, the return value is 0. This method should be used before calling
 * findAll, to make sure table has not too many rows.
 *
 * @param conn         This method requires working database connection.
 */
function countAll($conn) {
	$sql = "SELECT count(*) FROM logicalVolumes";
	$allRows = 0;
	$result = $conn->execute($sql);
    if ($row = $conn->nextRow($result))
    	$allRows = $row[0];
    return $allRows;
}

/** 
 * searchMatching-Method. This method provides searching capability to 
 * get matching valueObjects from database. It works by searching all 
 * objects that match permanent instance variables of given object.
 * Upper layer should use this by setting some parameters in valueObject
 * and then  call searchMatching. The result will be 0-N objects in vector, 
 * all matching those criteria you specified. Those instance-variables that
 * have NULL values are excluded in search-criteria.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance where search will be based.
 *                     Primary-key field should not be set.
 */
function searchMatching($conn, $valueObject) {
	$first = true;
    $sql = "SELECT * FROM logicalVolumes WHERE 1=1 ";
	
	if ($valueObject->get_host_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND hostId LIKE '".$valueObject->get_host_id()."%' ";
    }
	
	if ($valueObject->get_device_name() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND deviceName LIKE '".$valueObject->get_device_name()."%' ";
    }
	
	if ($valueObject->get_file_system_type() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND fileSystemType LIKE '".$valueObject->get_file_system_type()."%' ";
    }
	
	if ($valueObject->get_capacity() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND capacity LIKE '".$valueObject->get_capacity()."%' ";
    }
	
	if ($valueObject->get_system_volume() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND systemVolume LIKE '".$valueObject->get_system_volume()."%' ";
    }
	
	if ($valueObject->get_boot_volume() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND bootVolume LIKE '".$valueObject->get_boot_volume()."%' ";
    }
	
	if ($valueObject->get_cache_volume() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND cacheVolume LIKE '".$valueObject->get_cache_volume()."%' ";
    }
	
	if ($valueObject->get_last_sentinel_change() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND lastSentinelChange LIKE '".$valueObject->get_last_sentinel_change()."%' ";
    }
	
	if ($valueObject->get_last_outpost_agent_change() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND lastOutpostAgentChange LIKE '".$valueObject->get_last_outpost_agent_change()."%' ";
    }
	
	if ($valueObject->get_last_device_update_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND lastDeviceUpdateTime LIKE '".$valueObject->get_last_device_update_time()."%' ";
    }
	
	if ($valueObject->get_dps_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND dpsId LIKE '".$valueObject->get_dps_id()."%' ";
    }
	
	if ($valueObject->get_far_line_protected() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND farLineProtected LIKE '".$valueObject->get_far_line_protected()."%' ";
    }
	
	if ($valueObject->get_return_home_enabled() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND returnHomeEnabled LIKE '".$valueObject->get_return_home_enabled()."%' ";
    }
	
	if ($valueObject->get_do_resync() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND doResync LIKE '".$valueObject->get_do_resync()."%' ";
    }
	
	if ($valueObject->get_starting_physical_offset() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND startingPhysicalOffset LIKE '".$valueObject->get_starting_physical_offset()."%' ";
    }
	
	if ($valueObject->get_tm_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND tmId LIKE '".$valueObject->get_tm_id()."%' ";
    }
	
	if ($valueObject->get_visible() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND visible LIKE '".$valueObject->get_visible()."%' ";
    }
	
	if ($valueObject->get_device_locked() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND deviceLocked LIKE '".$valueObject->get_device_locked()."%' ";
    }
	
	if ($valueObject->get_device_flag_in_use() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND deviceFlagInUse LIKE '".$valueObject->get_device_flag_in_use()."%' ";
    }
	
	if ($valueObject->get_free_space() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND freeSpace LIKE '".$valueObject->get_free_space()."%' ";
    }
	
	if ($valueObject->get_readwritemode() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND readwritemode LIKE '".$valueObject->get_readwritemode()."%' ";
    }
	
	if ($valueObject->get_pre_drive_state() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND preDriveState LIKE '".$valueObject->get_pre_drive_state()."%' ";
    }
	
	if ($valueObject->get_is_visible() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND isVisible LIKE '".$valueObject->get_is_visible()."%' ";
    }
	
	if ($valueObject->get_volume_type() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND volumeType LIKE '".$valueObject->get_volume_type()."%' ";
    }
	
	if ($valueObject->get_trans_protocol() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND transProtocol LIKE '".$valueObject->get_trans_protocol()."%' ";
    }
	
	if ($valueObject->get_volume_label() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND volumeLabel LIKE '".$valueObject->get_volume_label()."%' ";
    }
	
	if ($valueObject->get_max_diff_files_threshold() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND maxDiffFilesThreshold LIKE '".$valueObject->get_max_diff_files_threshold()."%' ";
    }
	
	if ($valueObject->get_mount_point() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND mountPoint LIKE '".$valueObject->get_mount_point()."%' ";
    }
	
	if ($valueObject->get_phy__lunid() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND Phy_Lunid LIKE '".$valueObject->get_phy__lunid()."%' ";
    }
	
	if ($valueObject->get_lun_state() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND lun_state LIKE '".$valueObject->get_lun_state()."%' ";
    }
	
	if ($valueObject->get_offset() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND offset LIKE '".$valueObject->get_offset()."%' ";
    }
	
    // Prevent accidential full table results.
    // Use findAll if all rows must be returned.
    if ($first)
    	return array();

    $searchResults = $this->listQuery($conn, $sql);
    return $searchResults;
}

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return only one row. The resultset will be converted
 * to valueObject. If no rows were found, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 * @param valueObject  Class-instance where resulting data will be stored.
 */
 function singleQuery($conn, $sql, $valueObject) {
 	$result = $conn->execute($sql);
	if ($row = $conn->nextRow($result)) {
		$valueObject->setAry($row);
     } else {
        //print " Object Not Found!";
     	return false;
     }
     return true;
 }

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. The resultset will be converted
 * to the List of valueObjects. If no rows were found, an empty List will be returned.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQuery($conn, $sql) {
	$searchResults = array();
    $result = $conn->execute($sql);
    while ($row = $conn->nextRow($result)) {
    	$temp = $this->createValueObject();
    	$temp->setAry($row);
        array_push($searchResults, $temp);
	}
	return $searchResults;
}
/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. However the results will be unstructured
 * i.e. Not formatted as VO Objects 
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQueryResultset($conn,$sql)
{
	$searchResults = array();
    $result = $conn->execute($sql);
	while ($row = $conn->nextRow($result)) {
        array_push($searchResults, $row);
	}
	return $searchResults;
}

/**
 * databaseUpdate-method. This method is a helper method for internal use. It will execute
 * all database handling that will change the information in tables. SELECT queries will
 * not be executed here however. The return value indicates how many rows were affected.
 * This method will also make sure that if cache is used, it will reset when data changes.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 */
function databaseUpdate($conn, $sql) {
	$result = $conn->execute($sql);
	return $result;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPDAO-1.11";
 }

}
?>
