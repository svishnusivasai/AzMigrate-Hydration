<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * sanLuns Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Wed, 13 Aug 2008 17:13:08 +0530	
 * Pattern Version:1.0
 */

class SanLunsVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $sanLunId;
public $capacity;
public $capacityChanged;
public $blockSize;
public $vendorName;
public $modelNumber;
public $lunLabel;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function SanLunsVO(){

}

/*
	function SanLunsVO(sanLunIdIn){
 this->sanLunId=$sanLunIdIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_san_lun_id() {
	return $this->sanLunId;
}
function set_san_lun_id($sanLunIdIn) { 
	$this->sanLunId=$sanLunIdIn;
}

function isset_san_lun_id() {
	return isset($this->sanLunId);
}


function get_capacity() {
	return $this->capacity;
}
function set_capacity($capacityIn) { 
	$this->capacity=$capacityIn;
}

function isset_capacity() {
	return isset($this->capacity);
}


function get_capacity_changed() {
	return $this->capacityChanged;
}
function set_capacity_changed($capacityChangedIn) { 
	$this->capacityChanged=$capacityChangedIn;
}

function isset_capacity_changed() {
	return isset($this->capacityChanged);
}


function get_block_size() {
	return $this->blockSize;
}
function set_block_size($blockSizeIn) { 
	$this->blockSize=$blockSizeIn;
}

function isset_block_size() {
	return isset($this->blockSize);
}


function get_vendor_name() {
	return $this->vendorName;
}
function set_vendor_name($vendorNameIn) { 
	$this->vendorName=$vendorNameIn;
}

function isset_vendor_name() {
	return isset($this->vendorName);
}


function get_model_number() {
	return $this->modelNumber;
}
function set_model_number($modelNumberIn) { 
	$this->modelNumber=$modelNumberIn;
}

function isset_model_number() {
	return isset($this->modelNumber);
}


function get_lun_label() {
	return $this->lunLabel;
}
function set_lun_label($lunLabelIn) { 
	$this->lunLabel=$lunLabelIn;
}

function isset_lun_label() {
	return isset($this->lunLabel);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($sanLunIdIn,$capacityIn,$capacityChangedIn,$blockSizeIn,$vendorNameIn,$modelNumberIn,$lunLabelIn){
	$this->sanLunId=$sanLunIdIn;
	$this->capacity=$capacityIn;
	$this->capacityChanged=$capacityChangedIn;
	$this->blockSize=$blockSizeIn;
	$this->vendorName=$vendorNameIn;
	$this->modelNumber=$modelNumberIn;
	$this->lunLabel=$lunLabelIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->sanLunId=$ary["sanLunId"];
	$this->capacity=$ary["capacity"];
	$this->capacityChanged=$ary["capacityChanged"];
	$this->blockSize=$ary["blockSize"];
	$this->vendorName=$ary["vendorName"];
	$this->modelNumber=$ary["modelNumber"];
	$this->lunLabel=$ary["lunLabel"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["sanLunId"]=$this->sanLunId;
		$oAry["capacity"]=$this->capacity;
		$oAry["capacityChanged"]=$this->capacityChanged;
		$oAry["blockSize"]=$this->blockSize;
		$oAry["vendorName"]=$this->vendorName;
		$oAry["modelNumber"]=$this->modelNumber;
		$oAry["lunLabel"]=$this->lunLabel;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_san_lun_id() != $this->sanLunId) {
		return(false);
	}
	if ($valueObject->get_capacity() != $this->capacity) {
		return(false);
	}
	if ($valueObject->get_capacity_changed() != $this->capacityChanged) {
		return(false);
	}
	if ($valueObject->get_block_size() != $this->blockSize) {
		return(false);
	}
	if ($valueObject->get_vendor_name() != $this->vendorName) {
		return(false);
	}
	if ($valueObject->get_model_number() != $this->modelNumber) {
		return(false);
	}
	if ($valueObject->get_lun_label() != $this->lunLabel) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass SanLunsVO, mapping to table sanLuns\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."sanLunId = ".$this->sanLunId."\n";
	$out = $out."capacity = ".$this->capacity."\n";
	$out = $out."capacityChanged = ".$this->capacityChanged."\n";
	$out = $out."blockSize = ".$this->blockSize."\n";
	$out = $out."vendorName = ".$this->vendorName."\n";
	$out = $out."modelNumber = ".$this->modelNumber."\n";
	$out = $out."lunLabel = ".$this->lunLabel."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new SanLunsVO();
	
	 $cloned->set_san_lun_id($this->sanLunId);
	 $cloned->set_capacity($this->capacity);
	 $cloned->set_capacity_changed($this->capacityChanged);
	 $cloned->set_block_size($this->blockSize);
	 $cloned->set_vendor_name($this->vendorName);
	 $cloned->set_model_number($this->modelNumber);
	 $cloned->set_lun_label($this->lunLabel);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
