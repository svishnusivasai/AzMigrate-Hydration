<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * nports Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 15 Apr 2008 20:17:02 +0530	
 * Pattern Version:1.0
 */

class NportsVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $portWwn;
public $fabricId;
public $nodeWwn;
public $symbolicName;
public $hostId;
public $hostLabel;
public $portLabel;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function NportsVO(){

}

/*
	function NportsVO(fabricIdIn,portWwnIn){
 this->fabricId=$fabricIdIn;
 this->portWwn=$portWwnIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_port_wwn() {
	return $this->portWwn;
}
function set_port_wwn($portWwnIn) { 
	$this->portWwn=$portWwnIn;
}

function isset_port_wwn() {
	return isset($this->portWwn);
}


function get_fabric_id() {
	return $this->fabricId;
}
function set_fabric_id($fabricIdIn) { 
	$this->fabricId=$fabricIdIn;
}

function isset_fabric_id() {
	return isset($this->fabricId);
}


function get_node_wwn() {
	return $this->nodeWwn;
}
function set_node_wwn($nodeWwnIn) { 
	$this->nodeWwn=$nodeWwnIn;
}

function isset_node_wwn() {
	return isset($this->nodeWwn);
}


function get_symbolic_name() {
	return $this->symbolicName;
}
function set_symbolic_name($symbolicNameIn) { 
	$this->symbolicName=$symbolicNameIn;
}

function isset_symbolic_name() {
	return isset($this->symbolicName);
}


function get_host_id() {
	return $this->hostId;
}
function set_host_id($hostIdIn) { 
	$this->hostId=$hostIdIn;
}

function isset_host_id() {
	return isset($this->hostId);
}


function get_host_label() {
	return $this->hostLabel;
}
function set_host_label($hostLabelIn) { 
	$this->hostLabel=$hostLabelIn;
}

function isset_host_label() {
	return isset($this->hostLabel);
}


function get_port_label() {
	return $this->portLabel;
}
function set_port_label($portLabelIn) { 
	$this->portLabel=$portLabelIn;
}

function isset_port_label() {
	return isset($this->portLabel);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($portWwnIn,$fabricIdIn,$nodeWwnIn,$symbolicNameIn,$hostIdIn,$hostLabelIn,$portLabelIn){
	$this->portWwn=$portWwnIn;
	$this->fabricId=$fabricIdIn;
	$this->nodeWwn=$nodeWwnIn;
	$this->symbolicName=$symbolicNameIn;
	$this->hostId=$hostIdIn;
	$this->hostLabel=$hostLabelIn;
	$this->portLabel=$portLabelIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->portWwn=$ary["portWwn"];
	$this->fabricId=$ary["fabricId"];
	$this->nodeWwn=$ary["nodeWwn"];
	$this->symbolicName=$ary["symbolicName"];
	$this->hostId=$ary["hostId"];
	$this->hostLabel=$ary["hostLabel"];
	$this->portLabel=$ary["portLabel"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["portWwn"]=$this->portWwn;
		$oAry["fabricId"]=$this->fabricId;
		$oAry["nodeWwn"]=$this->nodeWwn;
		$oAry["symbolicName"]=$this->symbolicName;
		$oAry["hostId"]=$this->hostId;
		$oAry["hostLabel"]=$this->hostLabel;
		$oAry["portLabel"]=$this->portLabel;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_port_wwn() != $this->portWwn) {
		return(false);
	}
	if ($valueObject->get_fabric_id() != $this->fabricId) {
		return(false);
	}
	if ($valueObject->get_node_wwn() != $this->nodeWwn) {
		return(false);
	}
	if ($valueObject->get_symbolic_name() != $this->symbolicName) {
		return(false);
	}
	if ($valueObject->get_host_id() != $this->hostId) {
		return(false);
	}
	if ($valueObject->get_host_label() != $this->hostLabel) {
		return(false);
	}
	if ($valueObject->get_port_label() != $this->portLabel) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass NportsVO, mapping to table nports\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."portWwn = ".$this->portWwn."\n";
	$out = $out."fabricId = ".$this->fabricId."\n";
	$out = $out."nodeWwn = ".$this->nodeWwn."\n";
	$out = $out."symbolicName = ".$this->symbolicName."\n";
	$out = $out."hostId = ".$this->hostId."\n";
	$out = $out."hostLabel = ".$this->hostLabel."\n";
	$out = $out."portLabel = ".$this->portLabel."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new NportsVO();
	
	 $cloned->set_port_wwn($this->portWwn);
	 $cloned->set_fabric_id($this->fabricId);
	 $cloned->set_node_wwn($this->nodeWwn);
	 $cloned->set_symbolic_name($this->symbolicName);
	 $cloned->set_host_id($this->hostId);
	 $cloned->set_host_label($this->hostLabel);
	 $cloned->set_port_label($this->portLabel);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
