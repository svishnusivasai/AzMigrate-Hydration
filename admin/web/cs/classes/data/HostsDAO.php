<?php
/**
  * This sourcecode has been generated by InMage Source Code Generator version 1.0
  * The usage of generated code is restricted to InMage Systems Inc.
  *
  * hosts Data Access Object[DAO]
  * This class contains all database handling that is needed to 
  * permanently store and retrieve hosts object instances. 
  * Generated Date:	Mon, 15 Sep 2008 19:32:43 +0530	
  * Pattern Version:1.0
  */
class HostsDAO
{

/**
 * createValueObject-method. This method is used when the Dao class needs
 * to create new value object instance. The reason why this method exists
 * is that sometimes the programmer may want to extend also the valueObject
 * and then this method can be overrided to return extended valueObject.
 * NOTE: If you extend the valueObject class, make sure to override the
 * clone() method in it!
 */
function createValueObject() {
	return new HostsVO();
 }

/**
 * getObject-method. This will create and load valueObject contents from database 
 * using given Primary-Key as identifier. This method is just a convenience method 
 * for the real load-method which accepts the valueObject as a parameter. Returned
 * valueObject will be created using the createValueObject() method.
 */
function getObject($conn,$id) {
	$valueObject = $this->createValueObject();
	$valueObject->set_id($id);
	$this->findByPrimaryKey($conn,$valueObject);
	return $valueObject;
}

/**
 * findbyPrimaryKey-method. This will load valueObject contents from database using
 * Primary-Key as identifier. Upper layer should use this so that valueObject
 * instance is created and only primary-key should be specified. Then call
 * this method to complete other persistent information. This method will
 * overwrite all other fields except primary-key and possible runtime variables.
 * If load can not find matching row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be loaded.
 *                     Primary-key field must be set for this to work properly.
 */
function findByPrimaryKey($conn, $valueObject) {

	if (!$valueObject->get_id()) {
    	//print "Can not select without Primary-Key!";
		return false;
	}

	$sql = "SELECT * FROM hosts WHERE (id = '".$valueObject->get_id()."') "; 
	if ($this->singleQuery($conn, $sql, $valueObject)){
    	return true;
    }
    else{
    	return false;
	}
}

/**
 * findbyhost_id_type-method. A user defined or custom findbyMethod  
 * This method give all the record by related host_id type
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function find_by_host_id_type($conn, $params = array()) {

	/*$sql = "id='switch_host_id'";
	$sql = str_replace(array_keys($params), array_values($params), $sql);
	$sql = "SELECT * FROM hosts WHERE (" . $sql . ")";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;*/
	$sql = "id='switch_host_id' and agent_state != 'unistall_pending'";
	$sql = str_replace(array_keys($params), array_values($params), $sql);
	$sql = "SELECT * FROM hosts WHERE (" . $sql . ")";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
		
}


/**
 * findAll-method. This will read all contents from database table and
 * build an Vector containing valueObjects. Please note, that this method
 * will consume huge amounts of resources if table has lot's of rows. 
 * This should only be used when target tables have only small amounts
 * of data.
 *
 * @param conn         This method requires working database connection.
 */
function findAll($conn) {
	
	$sql = "SELECT * FROM hosts ORDER BY id ASC ";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
}

/**
 * create-method. This will create new row in database according to supplied
 * valueObject contents. Make sure that values for all NOT NULL columns are
 * correctly specified. Also, if this table does not use automatic surrogate-keys
 * the primary-key must be specified. After INSERT command this method will 
 * read the generated primary-key back to valueObject if automatic surrogate-keys
 * were used. 
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be created.
 *                     If automatic surrogate-keys are not used the Primary-key 
 *                     field must be set for this to work properly.
 */
function create($conn, $valueObject) {
	 $count = 0;
     $sql1 = "INSERT INTO hosts(";
     $sql3 = ") VALUES ("; 
	 
	 if ($valueObject->isset_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."id";
 	    $sql4 = $sql4."'".$valueObject->get_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_name())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."name";
 	    $sql4 = $sql4."'".$valueObject->get_name()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ipaddress())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ipaddress";
 	    $sql4 = $sql4."'".$valueObject->get_ipaddress()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_sentinel_enabled())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."sentinelEnabled";
 	    $sql4 = $sql4."'".$valueObject->get_sentinel_enabled()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_outpost_agent_enabled())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."outpostAgentEnabled";
 	    $sql4 = $sql4."'".$valueObject->get_outpost_agent_enabled()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_filereplication_agent_enabled())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."filereplicationAgentEnabled";
 	    $sql4 = $sql4."'".$valueObject->get_filereplication_agent_enabled()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_sentinel_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."sentinel_version";
 	    $sql4 = $sql4."'".$valueObject->get_sentinel_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_outpost_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."outpost_version";
 	    $sql4 = $sql4."'".$valueObject->get_outpost_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_fr_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."fr_version";
 	    $sql4 = $sql4."'".$valueObject->get_fr_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_involflt_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."involflt_version";
 	    $sql4 = $sql4."'".$valueObject->get_involflt_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_os_type())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."osType";
 	    $sql4 = $sql4."'".$valueObject->get_os_type()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_vx_timeout())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."vxTimeout";
 	    $sql4 = $sql4."'".$valueObject->get_vx_timeout()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_permission_state())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."permissionState";
 	    $sql4 = $sql4."'".$valueObject->get_permission_state()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_last_host_update_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."lastHostUpdateTime";
 	    $sql4 = $sql4."'".$valueObject->get_last_host_update_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_vx_agent_path())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."vxAgentPath";
 	    $sql4 = $sql4."'".$valueObject->get_vx_agent_path()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_fx_agent_path())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."fxAgentPath";
 	    $sql4 = $sql4."'".$valueObject->get_fx_agent_path()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_compatibility_no())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."compatibilityNo";
 	    $sql4 = $sql4."'".$valueObject->get_compatibility_no()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_usecxnat_ip())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."usecxnatip";
 	    $sql4 = $sql4."'".$valueObject->get_usecxnat_ip()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_cx_nat_ip())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."cx_natip";
 	    $sql4 = $sql4."'".$valueObject->get_cx_nat_ip()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_os_flag())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."osFlag";
 	    $sql4 = $sql4."'".$valueObject->get_os_flag()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_last_host_update_time_fx())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."lastHostUpdateTimeFx";
 	    $sql4 = $sql4."'".$valueObject->get_last_host_update_time_fx()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ssh_port())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."sshPort";
 	    $sql4 = $sql4."'".$valueObject->get_ssh_port()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ssh_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."sshVersion";
 	    $sql4 = $sql4."'".$valueObject->get_ssh_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ssh_user())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."sshUser";
 	    $sql4 = $sql4."'".$valueObject->get_ssh_user()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_fos_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."fos_version";
 	    $sql4 = $sql4."'".$valueObject->get_fos_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_type())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."type";
 	    $sql4 = $sql4."'".$valueObject->get_type()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_hardware_configuration())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."hardware_configuration";
 	    $sql4 = $sql4."'".$valueObject->get_hardware_configuration()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_extended_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."extended_version";
 	    $sql4 = $sql4."'".$valueObject->get_extended_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_time_zone())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."time_zone";
 	    $sql4 = $sql4."'".$valueObject->get_time_zone()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_patch_history_v_x())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."PatchHistoryVX";
 	    $sql4 = $sql4."'".$valueObject->get_patch_history_v_x()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_patch_history_f_x())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."PatchHistoryFX";
 	    $sql4 = $sql4."'".$valueObject->get_patch_history_f_x()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_agent_time_stamp())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."agentTimeStamp";
 	    $sql4 = $sql4."'".$valueObject->get_agent_time_stamp()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_agent_time_zone())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."agentTimeZone";
 	    $sql4 = $sql4."'".$valueObject->get_agent_time_zone()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_in_vol_capacity())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."InVolCapacity";
 	    $sql4 = $sql4."'".$valueObject->get_in_vol_capacity()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_in_vol_free_space())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."InVolFreeSpace";
 	    $sql4 = $sql4."'".$valueObject->get_in_vol_free_space()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_sys_vol_path())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."SysVolPath";
 	    $sql4 = $sql4."'".$valueObject->get_sys_vol_path()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_sys_vol_cap())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."SysVolCap";
 	    $sql4 = $sql4."'".$valueObject->get_sys_vol_cap()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_sys_vol_free_space())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."SysVolFreeSpace";
 	    $sql4 = $sql4."'".$valueObject->get_sys_vol_free_space()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_agent_state())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."agent_state";
 	    $sql4 = $sql4."'".$valueObject->get_agent_state()."'"; 	
 		$count++;
 	 }
	 
	$sql = $sql1 . $sql2. $sql3. $sql4.")";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * update-method. This method will save the current state of valueObject to database.
 * Save can not be used to create new instances in database, so upper layer must
 * make sure that the primary-key is correctly specified. Primary-key will indicate
 * which instance is going to be updated in database. If save can not find matching 
 * row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be saved.
 *                     Primary-key field must be set for this to work properly.
 */
function update($conn, $valueObject) {
	$count = 0;
	$sql = "UPDATE hosts SET ";
	if ($valueObject->isset_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."id = '".$valueObject->get_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_name())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."name = '".$valueObject->get_name()."'";
		$count++;
	}
	
	if ($valueObject->isset_ipaddress())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ipaddress = '".$valueObject->get_ipaddress()."'";
		$count++;
	}
	
	if ($valueObject->isset_sentinel_enabled())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."sentinelEnabled = '".$valueObject->get_sentinel_enabled()."'";
		$count++;
	}
	
	if ($valueObject->isset_outpost_agent_enabled())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."outpostAgentEnabled = '".$valueObject->get_outpost_agent_enabled()."'";
		$count++;
	}
	
	if ($valueObject->isset_filereplication_agent_enabled())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."filereplicationAgentEnabled = '".$valueObject->get_filereplication_agent_enabled()."'";
		$count++;
	}
	
	if ($valueObject->isset_sentinel_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."sentinel_version = '".$valueObject->get_sentinel_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_outpost_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."outpost_version = '".$valueObject->get_outpost_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_fr_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."fr_version = '".$valueObject->get_fr_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_involflt_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."involflt_version = '".$valueObject->get_involflt_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_os_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."osType = '".$valueObject->get_os_type()."'";
		$count++;
	}
	
	if ($valueObject->isset_vx_timeout())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."vxTimeout = '".$valueObject->get_vx_timeout()."'";
		$count++;
	}
	
	if ($valueObject->isset_permission_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."permissionState = '".$valueObject->get_permission_state()."'";
		$count++;
	}
	
	if ($valueObject->isset_last_host_update_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."lastHostUpdateTime = '".$valueObject->get_last_host_update_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_vx_agent_path())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."vxAgentPath = '".$valueObject->get_vx_agent_path()."'";
		$count++;
	}
	
	if ($valueObject->isset_fx_agent_path())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."fxAgentPath = '".$valueObject->get_fx_agent_path()."'";
		$count++;
	}
	
	if ($valueObject->isset_compatibility_no())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."compatibilityNo = '".$valueObject->get_compatibility_no()."'";
		$count++;
	}
	
	if ($valueObject->isset_usecxnat_ip())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."usecxnatip = '".$valueObject->get_usecxnat_ip()."'";
		$count++;
	}
	
	if ($valueObject->isset_cx_nat_ip())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."cx_natip = '".$valueObject->get_cx_nat_ip()."'";
		$count++;
	}
	
	if ($valueObject->isset_os_flag())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."osFlag = '".$valueObject->get_os_flag()."'";
		$count++;
	}
	
	if ($valueObject->isset_last_host_update_time_fx())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."lastHostUpdateTimeFx = '".$valueObject->get_last_host_update_time_fx()."'";
		$count++;
	}
	
	if ($valueObject->isset_ssh_port())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."sshPort = '".$valueObject->get_ssh_port()."'";
		$count++;
	}
	
	if ($valueObject->isset_ssh_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."sshVersion = '".$valueObject->get_ssh_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_ssh_user())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."sshUser = '".$valueObject->get_ssh_user()."'";
		$count++;
	}
	
	if ($valueObject->isset_fos_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."fos_version = '".$valueObject->get_fos_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."type = '".$valueObject->get_type()."'";
		$count++;
	}
	
	if ($valueObject->isset_hardware_configuration())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."hardware_configuration = '".$valueObject->get_hardware_configuration()."'";
		$count++;
	}
	
	if ($valueObject->isset_extended_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."extended_version = '".$valueObject->get_extended_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_time_zone())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."time_zone = '".$valueObject->get_time_zone()."'";
		$count++;
	}
	
	if ($valueObject->isset_patch_history_v_x())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."PatchHistoryVX = '".$valueObject->get_patch_history_v_x()."'";
		$count++;
	}
	
	if ($valueObject->isset_patch_history_f_x())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."PatchHistoryFX = '".$valueObject->get_patch_history_f_x()."'";
		$count++;
	}
	
	if ($valueObject->isset_agent_time_stamp())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."agentTimeStamp = '".$valueObject->get_agent_time_stamp()."'";
		$count++;
	}
	
	if ($valueObject->isset_agent_time_zone())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."agentTimeZone = '".$valueObject->get_agent_time_zone()."'";
		$count++;
	}
	
	if ($valueObject->isset_in_vol_capacity())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."InVolCapacity = '".$valueObject->get_in_vol_capacity()."'";
		$count++;
	}
	
	if ($valueObject->isset_in_vol_free_space())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."InVolFreeSpace = '".$valueObject->get_in_vol_free_space()."'";
		$count++;
	}
	
	if ($valueObject->isset_sys_vol_path())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."SysVolPath = '".$valueObject->get_sys_vol_path()."'";
		$count++;
	}
	
	if ($valueObject->isset_sys_vol_cap())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."SysVolCap = '".$valueObject->get_sys_vol_cap()."'";
		$count++;
	}
	
	if ($valueObject->isset_sys_vol_free_space())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."SysVolFreeSpace = '".$valueObject->get_sys_vol_free_space()."'";
		$count++;
	}
	
	if ($valueObject->isset_agent_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."agent_state = '".$valueObject->get_agent_state()."'";
		$count++;
	}
	
	$sql = $sql." WHERE (id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}

/**
 * delete-method. This method will remove the information from database as identified by
 * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
 * be restored by calling save. Restoring can only be done using create method but if 
 * database is using automatic surrogate-keys, the resulting object will have different 
 * primary-key than what it was in the deleted object. If delete can not find matching row,
 * NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be deleted.
 *                     Primary-key field must be set for this to work properly.
 */
function delete($conn, $valueObject) {
	
	if (!$valueObject->get_id()) {
         //print "Can not delete without Primary-Key!";
         return false;
    }
	$sql = "DELETE FROM hosts WHERE (id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
         //print "PrimaryKey Error when updating DB!";
          return false;
    }
 	return true;
}

/**
 * deleteAll-method. This method will remove all information from the table that matches
 * this DAO and ValueObject couple. This should be the most efficient way to clear table.
 * Once deleteAll has been called, no valueObject that has been created before can be 
 * restored by calling save. Restoring can only be done using create method but if database 
 * is using automatic surrogate-keys, the resulting object will have different primary-key 
 * than what it was in the deleted object. (Note, the implementation of this method should
 * be different with different DB backends.)
 *
 * @param conn         This method requires working database connection.
 */
function deleteAll($conn) {
	$sql = "DELETE FROM hosts";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * coutAll-method. This method will return the number of all rows from table that matches
 * this Dao. The implementation will simply execute "select count(primarykey) from table".
 * If table is empty, the return value is 0. This method should be used before calling
 * findAll, to make sure table has not too many rows.
 *
 * @param conn         This method requires working database connection.
 */
function countAll($conn) {
	$sql = "SELECT count(*) FROM hosts";
	$allRows = 0;
	$result = $conn->execute($sql);
    if ($row = $conn->nextRow($result))
    	$allRows = $row[0];
    return $allRows;
}

/** 
 * searchMatching-Method. This method provides searching capability to 
 * get matching valueObjects from database. It works by searching all 
 * objects that match permanent instance variables of given object.
 * Upper layer should use this by setting some parameters in valueObject
 * and then  call searchMatching. The result will be 0-N objects in vector, 
 * all matching those criteria you specified. Those instance-variables that
 * have NULL values are excluded in search-criteria.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance where search will be based.
 *                     Primary-key field should not be set.
 */
function searchMatching($conn, $valueObject) {
	$first = true;
    $sql = "SELECT * FROM hosts WHERE 1=1 ";
	
	if ($valueObject->get_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND id LIKE '".$valueObject->get_id()."%' ";
    }
	
	if ($valueObject->get_name() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND name LIKE '".$valueObject->get_name()."%' ";
    }
	
	if ($valueObject->get_ipaddress() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ipaddress LIKE '".$valueObject->get_ipaddress()."%' ";
    }
	
	if ($valueObject->get_sentinel_enabled() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND sentinelEnabled LIKE '".$valueObject->get_sentinel_enabled()."%' ";
    }
	
	if ($valueObject->get_outpost_agent_enabled() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND outpostAgentEnabled LIKE '".$valueObject->get_outpost_agent_enabled()."%' ";
    }
	
	if ($valueObject->get_filereplication_agent_enabled() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND filereplicationAgentEnabled LIKE '".$valueObject->get_filereplication_agent_enabled()."%' ";
    }
	
	if ($valueObject->get_sentinel_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND sentinel_version LIKE '".$valueObject->get_sentinel_version()."%' ";
    }
	
	if ($valueObject->get_outpost_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND outpost_version LIKE '".$valueObject->get_outpost_version()."%' ";
    }
	
	if ($valueObject->get_fr_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND fr_version LIKE '".$valueObject->get_fr_version()."%' ";
    }
	
	if ($valueObject->get_involflt_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND involflt_version LIKE '".$valueObject->get_involflt_version()."%' ";
    }
	
	if ($valueObject->get_os_type() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND osType LIKE '".$valueObject->get_os_type()."%' ";
    }
	
	if ($valueObject->get_vx_timeout() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND vxTimeout LIKE '".$valueObject->get_vx_timeout()."%' ";
    }
	
	if ($valueObject->get_permission_state() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND permissionState LIKE '".$valueObject->get_permission_state()."%' ";
    }
	
	if ($valueObject->get_last_host_update_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND lastHostUpdateTime LIKE '".$valueObject->get_last_host_update_time()."%' ";
    }
	
	if ($valueObject->get_vx_agent_path() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND vxAgentPath LIKE '".$valueObject->get_vx_agent_path()."%' ";
    }
	
	if ($valueObject->get_fx_agent_path() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND fxAgentPath LIKE '".$valueObject->get_fx_agent_path()."%' ";
    }
	
	if ($valueObject->get_compatibility_no() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND compatibilityNo LIKE '".$valueObject->get_compatibility_no()."%' ";
    }
	
	if ($valueObject->get_usecxnat_ip() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND usecxnatip LIKE '".$valueObject->get_usecxnat_ip()."%' ";
    }
	
	if ($valueObject->get_cx_nat_ip() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND cx_natip LIKE '".$valueObject->get_cx_nat_ip()."%' ";
    }
	
	if ($valueObject->get_os_flag() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND osFlag LIKE '".$valueObject->get_os_flag()."%' ";
    }
	
	if ($valueObject->get_last_host_update_time_fx() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND lastHostUpdateTimeFx LIKE '".$valueObject->get_last_host_update_time_fx()."%' ";
    }
	
	if ($valueObject->get_ssh_port() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND sshPort LIKE '".$valueObject->get_ssh_port()."%' ";
    }
	
	if ($valueObject->get_ssh_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND sshVersion LIKE '".$valueObject->get_ssh_version()."%' ";
    }
	
	if ($valueObject->get_ssh_user() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND sshUser LIKE '".$valueObject->get_ssh_user()."%' ";
    }
			
	if ($valueObject->get_fos_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND fos_version LIKE '".$valueObject->get_fos_version()."%' ";
    }
	
	if ($valueObject->get_type() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND type LIKE '".$valueObject->get_type()."%' ";
    }
	
	if ($valueObject->get_hardware_configuration() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND hardware_configuration LIKE '".$valueObject->get_hardware_configuration()."%' ";
    }
	
	if ($valueObject->get_extended_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND extended_version LIKE '".$valueObject->get_extended_version()."%' ";
    }
	
	if ($valueObject->get_time_zone() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND time_zone LIKE '".$valueObject->get_time_zone()."%' ";
    }
	
	if ($valueObject->get_patch_history_v_x() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND PatchHistoryVX LIKE '".$valueObject->get_patch_history_v_x()."%' ";
    }
	
	if ($valueObject->get_patch_history_f_x() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND PatchHistoryFX LIKE '".$valueObject->get_patch_history_f_x()."%' ";
    }
	
	if ($valueObject->get_agent_time_stamp() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND agentTimeStamp LIKE '".$valueObject->get_agent_time_stamp()."%' ";
    }
	
	if ($valueObject->get_agent_time_zone() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND agentTimeZone LIKE '".$valueObject->get_agent_time_zone()."%' ";
    }
	
	if ($valueObject->get_in_vol_capacity() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND InVolCapacity LIKE '".$valueObject->get_in_vol_capacity()."%' ";
    }
	
	if ($valueObject->get_in_vol_free_space() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND InVolFreeSpace LIKE '".$valueObject->get_in_vol_free_space()."%' ";
    }
	
	if ($valueObject->get_sys_vol_path() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND SysVolPath LIKE '".$valueObject->get_sys_vol_path()."%' ";
    }
	
	if ($valueObject->get_sys_vol_cap() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND SysVolCap LIKE '".$valueObject->get_sys_vol_cap()."%' ";
    }
	
	if ($valueObject->get_sys_vol_free_space() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND SysVolFreeSpace LIKE '".$valueObject->get_sys_vol_free_space()."%' ";
    }
	
	if ($valueObject->get_agent_state() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND agent_state LIKE '".$valueObject->get_agent_state()."%' ";
    }
	
	$sql = $sql." ORDER BY ";
	$sql = $sql."id ASC ";
    // Prevent accidential full table results.
    // Use findAll if all rows must be returned.
    if ($first)
    	return array();

    $searchResults = $this->listQuery($conn, $sql);
    return $searchResults;
}

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return only one row. The resultset will be converted
 * to valueObject. If no rows were found, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 * @param valueObject  Class-instance where resulting data will be stored.
 */
 function singleQuery($conn, $sql, $valueObject) {
 	$result = $conn->execute($sql);
	if ($row = $conn->nextRow($result)) {
		$valueObject->setAry($row);
     } else {
        //print " Object Not Found!";
     	return false;
     }
     return true;
 }

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. The resultset will be converted
 * to the List of valueObjects. If no rows were found, an empty List will be returned.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQuery($conn, $sql) {
	$searchResults = array();
    $result = $conn->execute($sql);
    while ($row = $conn->nextRow($result)) {
    	$temp = $this->createValueObject();
    	$temp->setAry($row);
        array_push($searchResults, $temp);
	}
	return $searchResults;
}
/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. However the results will be unstructured
 * i.e. Not formatted as VO Objects 
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQueryResultset($conn,$sql)
{
	$searchResults = array();
    $result = $conn->execute($sql);
	while ($row = $conn->nextRow($result)) {
        array_push($searchResults, $row);
	}
	return $searchResults;
}

/**
 * databaseUpdate-method. This method is a helper method for internal use. It will execute
 * all database handling that will change the information in tables. SELECT queries will
 * not be executed here however. The return value indicates how many rows were affected.
 * This method will also make sure that if cache is used, it will reset when data changes.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 */
function databaseUpdate($conn, $sql) {
	$result = $conn->execute($sql);
	return $result;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPDAO-1.10";
 }
 
 /**
 * deletebyid-method. A user defined or custom deletebyMethod  
 * This method delete by id
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function delete_by_id($conn,$params = array()) {
	$sql = "id='switch_id'";
	$sql = str_replace(array_keys($params), array_values($params), $sql);
	$sql = "DELETE FROM hosts WHERE (" . $sql . ")";
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
         //print "PrimaryKey Error when updating DB!";
          return false;
    }
 	return true;
}


}
?>
