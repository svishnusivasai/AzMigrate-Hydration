<?php
/**
  * This sourcecode has been generated by InMage Source Code Generator version 1.0
  * The usage of generated code is restricted to InMage Systems Inc.
  *
  * switchAgents Data Access Object[DAO]
  * This class contains all database handling that is needed to 
  * permanently store and retrieve switchAgents object instances. 
  * Generated Date:	Mon, 28 Apr 2008 14:10:32 +0530	
  * Pattern Version:1.0
  */
class SwitchAgentsDAO
{

/**
 * createValueObject-method. This method is used when the Dao class needs
 * to create new value object instance. The reason why this method exists
 * is that sometimes the programmer may want to extend also the valueObject
 * and then this method can be overrided to return extended valueObject.
 * NOTE: If you extend the valueObject class, make sure to override the
 * clone() method in it!
 */
function createValueObject() {
	return new SwitchAgentsVO();
 }

/**
 * getObject-method. This will create and load valueObject contents from database 
 * using given Primary-Key as identifier. This method is just a convenience method 
 * for the real load-method which accepts the valueObject as a parameter. Returned
 * valueObject will be created using the createValueObject() method.
 */
function getObject($conn,$fabricId,$switchAgentId) {
	$valueObject = $this->createValueObject();
	$valueObject->set_fabric_id($fabricId);
	$valueObject->set_switch_agent_id($switchAgentId);
	$this->findByPrimaryKey($conn,$valueObject);
	return $valueObject;
}

/**
 * findbyPrimaryKey-method. This will load valueObject contents from database using
 * Primary-Key as identifier. Upper layer should use this so that valueObject
 * instance is created and only primary-key should be specified. Then call
 * this method to complete other persistent information. This method will
 * overwrite all other fields except primary-key and possible runtime variables.
 * If load can not find matching row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be loaded.
 *                     Primary-key field must be set for this to work properly.
 */
function findByPrimaryKey($conn, $valueObject) {

	if (!$valueObject->get_fabric_id()) {
    	//print "Can not select without Primary-Key!";
		return false;
	}

	if (!$valueObject->get_switch_agent_id()) {
    	//print "Can not select without Primary-Key!";
		return false;
	}

	$sql = "SELECT * FROM switchAgents WHERE (fabricId = '".$valueObject->get_fabric_id()."'  AND switchAgentId = '".$valueObject->get_switch_agent_id()."') "; 
	if ($this->singleQuery($conn, $sql, $valueObject)){
    	return true;
    }
    else{
    	return false;
	}
}

/**
 * findbyfabricid-method. A user defined or custom findbyMethod  
 * This method select by fabric_id
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function find_by_fabricid($conn, $params = array()) {

	$sql = "fabricId='fabric_id'";
	$sql = str_replace(array_keys($params), array_values($params), $sql);
	$sql = "SELECT * FROM switchAgents WHERE (" . $sql . ")";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
		
}



/**
 * findAll-method. This will read all contents from database table and
 * build an Vector containing valueObjects. Please note, that this method
 * will consume huge amounts of resources if table has lot's of rows. 
 * This should only be used when target tables have only small amounts
 * of data.
 *
 * @param conn         This method requires working database connection.
 */
function findAll($conn) {
	
	$sql = "SELECT * FROM switchAgents ORDER BY fabricId ASC ,switchAgentId ASC ";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
}

/**
 * create-method. This will create new row in database according to supplied
 * valueObject contents. Make sure that values for all NOT NULL columns are
 * correctly specified. Also, if this table does not use automatic surrogate-keys
 * the primary-key must be specified. After INSERT command this method will 
 * read the generated primary-key back to valueObject if automatic surrogate-keys
 * were used. 
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be created.
 *                     If automatic surrogate-keys are not used the Primary-key 
 *                     field must be set for this to work properly.
 */
function create($conn, $valueObject) {
	 $count = 0;
     $sql1 = "INSERT INTO switchAgents(";
     $sql3 = ") VALUES ("; 
	 
	 if ($valueObject->isset_switch_agent_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."switchAgentId";
 	    $sql4 = $sql4."'".$valueObject->get_switch_agent_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_fabric_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."fabricId";
 	    $sql4 = $sql4."'".$valueObject->get_fabric_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_name())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."name";
 	    $sql4 = $sql4."'".$valueObject->get_name()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."version";
 	    $sql4 = $sql4."'".$valueObject->get_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_platform_model())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."platformModel";
 	    $sql4 = $sql4."'".$valueObject->get_platform_model()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_switch_wwn())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."switchWwn";
 	    $sql4 = $sql4."'".$valueObject->get_switch_wwn()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_physical_port_info())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."physicalPortInfo";
 	    $sql4 = $sql4."'".$valueObject->get_physical_port_info()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_dpc_count())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."dpcCount";
 	    $sql4 = $sql4."'".$valueObject->get_dpc_count()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_driver_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."driverVersion";
 	    $sql4 = $sql4."'".$valueObject->get_driver_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_os_info())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."osInfo";
 	    $sql4 = $sql4."'".$valueObject->get_os_info()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_current_compatibility_num())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."currentCompatibilityNum";
 	    $sql4 = $sql4."'".$valueObject->get_current_compatibility_num()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_install_path())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."installPath";
 	    $sql4 = $sql4."'".$valueObject->get_install_path()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_os_val())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."osVal";
 	    $sql4 = $sql4."'".$valueObject->get_os_val()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_time_zone())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."timeZone";
 	    $sql4 = $sql4."'".$valueObject->get_time_zone()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_time_local())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."timeLocal";
 	    $sql4 = $sql4."'".$valueObject->get_time_local()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_patch_history())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."patchHistory";
 	    $sql4 = $sql4."'".$valueObject->get_patch_history()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_cp_ip_address_list())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."cpIpAddressList";
 	    $sql4 = $sql4."'".$valueObject->get_cp_ip_address_list()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_pref_cp_ip_address_list())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."prefCpIpAddressList";
 	    $sql4 = $sql4."'".$valueObject->get_pref_cp_ip_address_list()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_bp_ip_address_l_ist())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."bpIpAddressLIst";
 	    $sql4 = $sql4."'".$valueObject->get_bp_ip_address_l_ist()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_pref_bp_ip_address_list())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."prefBpIpAddressList";
 	    $sql4 = $sql4."'".$valueObject->get_pref_bp_ip_address_list()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_sas_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."sasVersion";
 	    $sql4 = $sql4."'".$valueObject->get_sas_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_fos_version())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."fosVersion";
 	    $sql4 = $sql4."'".$valueObject->get_fos_version()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_cache_state())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."cacheState";
 	    $sql4 = $sql4."'".$valueObject->get_cache_state()."'"; 	
 		$count++;
 	 }
	 if ($valueObject->isset_switchAgentSpaceWarnThreshold())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."switchAgentSpaceWarnThreshold";
 	    $sql4 = $sql4."'".$valueObject->get_switchAgentSpaceWarnThreshold()."'"; 	
 		$count++;
 	 }
	 
	$sql = $sql1 . $sql2. $sql3. $sql4.")";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * update-method. This method will save the current state of valueObject to database.
 * Save can not be used to create new instances in database, so upper layer must
 * make sure that the primary-key is correctly specified. Primary-key will indicate
 * which instance is going to be updated in database. If save can not find matching 
 * row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be saved.
 *                     Primary-key field must be set for this to work properly.
 */
function update($conn, $valueObject) {
	$count = 0;
	$sql = "UPDATE switchAgents SET ";
	if ($valueObject->isset_switch_agent_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."switchAgentId = '".$valueObject->get_switch_agent_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_fabric_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."fabricId = '".$valueObject->get_fabric_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_name())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."name = '".$valueObject->get_name()."'";
		$count++;
	}
	
	if ($valueObject->isset_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."version = '".$valueObject->get_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_platform_model())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."platformModel = '".$valueObject->get_platform_model()."'";
		$count++;
	}
	
	if ($valueObject->isset_switch_wwn())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."switchWwn = '".$valueObject->get_switch_wwn()."'";
		$count++;
	}
	
	if ($valueObject->isset_physical_port_info())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."physicalPortInfo = '".$valueObject->get_physical_port_info()."'";
		$count++;
	}
	
	if ($valueObject->isset_dpc_count())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."dpcCount = '".$valueObject->get_dpc_count()."'";
		$count++;
	}
	
	if ($valueObject->isset_driver_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."driverVersion = '".$valueObject->get_driver_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_os_info())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."osInfo = '".$valueObject->get_os_info()."'";
		$count++;
	}
	
	if ($valueObject->isset_current_compatibility_num())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."currentCompatibilityNum = '".$valueObject->get_current_compatibility_num()."'";
		$count++;
	}
	
	if ($valueObject->isset_install_path())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."installPath = '".$valueObject->get_install_path()."'";
		$count++;
	}
	
	if ($valueObject->isset_os_val())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."osVal = '".$valueObject->get_os_val()."'";
		$count++;
	}
	
	if ($valueObject->isset_time_zone())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."timeZone = '".$valueObject->get_time_zone()."'";
		$count++;
	}
	
	if ($valueObject->isset_time_local())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."timeLocal = '".$valueObject->get_time_local()."'";
		$count++;
	}
	
	if ($valueObject->isset_patch_history())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."patchHistory = '".$valueObject->get_patch_history()."'";
		$count++;
	}
	
	if ($valueObject->isset_cp_ip_address_list())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."cpIpAddressList = '".$valueObject->get_cp_ip_address_list()."'";
		$count++;
	}
	
	if ($valueObject->isset_pref_cp_ip_address_list())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."prefCpIpAddressList = '".$valueObject->get_pref_cp_ip_address_list()."'";
		$count++;
	}
	
	if ($valueObject->isset_bp_ip_address_l_ist())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."bpIpAddressLIst = '".$valueObject->get_bp_ip_address_l_ist()."'";
		$count++;
	}
	
	if ($valueObject->isset_pref_bp_ip_address_list())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."prefBpIpAddressList = '".$valueObject->get_pref_bp_ip_address_list()."'";
		$count++;
	}
	
	if ($valueObject->isset_sas_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."sasVersion = '".$valueObject->get_sas_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_fos_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."fosVersion = '".$valueObject->get_fos_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_cache_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."cacheState = '".$valueObject->get_cache_state()."'";
		$count++;
	}
	if ($valueObject->isset_switchAgentSpaceWarnThreshold())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."switchAgentSpaceWarnThreshold = '".$valueObject->get_switchAgentSpaceWarnThreshold()."'";
		$count++;
	}
	
	
	$sql = $sql." WHERE (fabricId = '".$valueObject->get_fabric_id()."'  AND switchAgentId = '".$valueObject->get_switch_agent_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}

/**
 * update_byfabric_id-method. A user defined or custom updatebyMethod  
 * This method updates by fabric_id
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function update_by_fabric_id($conn, $valueObject,$params = array()) {
	 $wsql = "fabricId='fabric_id'";
	$ssql = str_replace(array_keys($params), array_values($params), $wsql);
	$wsql = " WHERE (" . $ssql . ")";
	
	$count = 0;
	$sql = "UPDATE switchAgents SET ";
	if ($valueObject->isset_switch_agent_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."switchAgentId = '".$valueObject->get_switch_agent_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_fabric_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."fabricId = '".$valueObject->get_fabric_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_name())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."name = '".$valueObject->get_name()."'";
		$count++;
	}
	
	if ($valueObject->isset_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."version = '".$valueObject->get_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_platform_model())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."platformModel = '".$valueObject->get_platform_model()."'";
		$count++;
	}
	
	if ($valueObject->isset_switch_wwn())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."switchWwn = '".$valueObject->get_switch_wwn()."'";
		$count++;
	}
	
	if ($valueObject->isset_physical_port_info())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."physicalPortInfo = '".$valueObject->get_physical_port_info()."'";
		$count++;
	}
	
	if ($valueObject->isset_dpc_count())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."dpcCount = '".$valueObject->get_dpc_count()."'";
		$count++;
	}
	
	if ($valueObject->isset_driver_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."driverVersion = '".$valueObject->get_driver_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_os_info())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."osInfo = '".$valueObject->get_os_info()."'";
		$count++;
	}
	
	if ($valueObject->isset_current_compatibility_num())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."currentCompatibilityNum = '".$valueObject->get_current_compatibility_num()."'";
		$count++;
	}
	
	if ($valueObject->isset_install_path())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."installPath = '".$valueObject->get_install_path()."'";
		$count++;
	}
	
	if ($valueObject->isset_os_val())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."osVal = '".$valueObject->get_os_val()."'";
		$count++;
	}
	
	if ($valueObject->isset_time_zone())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."timeZone = '".$valueObject->get_time_zone()."'";
		$count++;
	}
	
	if ($valueObject->isset_time_local())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."timeLocal = '".$valueObject->get_time_local()."'";
		$count++;
	}
	
	if ($valueObject->isset_patch_history())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."patchHistory = '".$valueObject->get_patch_history()."'";
		$count++;
	}
	
	if ($valueObject->isset_cp_ip_address_list())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."cpIpAddressList = '".$valueObject->get_cp_ip_address_list()."'";
		$count++;
	}
	
	if ($valueObject->isset_pref_cp_ip_address_list())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."prefCpIpAddressList = '".$valueObject->get_pref_cp_ip_address_list()."'";
		$count++;
	}
	
	if ($valueObject->isset_bp_ip_address_l_ist())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."bpIpAddressLIst = '".$valueObject->get_bp_ip_address_l_ist()."'";
		$count++;
	}
	
	if ($valueObject->isset_pref_bp_ip_address_list())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."prefBpIpAddressList = '".$valueObject->get_pref_bp_ip_address_list()."'";
		$count++;
	}
	
	if ($valueObject->isset_sas_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."sasVersion = '".$valueObject->get_sas_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_fos_version())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."fosVersion = '".$valueObject->get_fos_version()."'";
		$count++;
	}
	
	if ($valueObject->isset_cache_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."cacheState = '".$valueObject->get_cache_state()."'";
		$count++;
	}
	if ($valueObject->isset_switchAgentSpaceWarnThreshold())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."switchAgentSpaceWarnThreshold = '".$valueObject->get_switchAgentSpaceWarnThreshold()."'";
		$count++;
	}
	
	$sql = $sql.$wsql;    
	$result = $this->databaseUpdate($conn, $sql);
	if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}




/**
 * delete-method. This method will remove the information from database as identified by
	 * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
 * be restored by calling save. Restoring can only be done using create method but if 
 * database is using automatic surrogate-keys, the resulting object will have different 
 * primary-key than what it was in the deleted object. If delete can not find matching row,
 * NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be deleted.
 *                     Primary-key field must be set for this to work properly.
 */
function delete($conn, $valueObject) {
	
	if (!$valueObject->get_fabric_id()) {
         //print "Can not delete without Primary-Key!";
         return false;
    }
	
	if (!$valueObject->get_switch_agent_id()) {
         //print "Can not delete without Primary-Key!";
         return false;
    }
	$sql = "DELETE FROM switchAgents WHERE (fabricId = '".$valueObject->get_fabric_id()."'  AND switchAgentId = '".$valueObject->get_switch_agent_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
         //print "PrimaryKey Error when updating DB!";
          return false;
    }
 	return true;
}

/**
 * deleteAll-method. This method will remove all information from the table that matches
 * this DAO and ValueObject couple. This should be the most efficient way to clear table.
 * Once deleteAll has been called, no valueObject that has been created before can be 
 * restored by calling save. Restoring can only be done using create method but if database 
 * is using automatic surrogate-keys, the resulting object will have different primary-key 
 * than what it was in the deleted object. (Note, the implementation of this method should
 * be different with different DB backends.)
 *
 * @param conn         This method requires working database connection.
 */
function deleteAll($conn) {
	$sql = "DELETE FROM switchAgents";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * coutAll-method. This method will return the number of all rows from table that matches
 * this Dao. The implementation will simply execute "select count(primarykey) from table".
 * If table is empty, the return value is 0. This method should be used before calling
 * findAll, to make sure table has not too many rows.
 *
 * @param conn         This method requires working database connection.
 */
function countAll($conn) {
	$sql = "SELECT count(*) FROM switchAgents";
	$allRows = 0;
	$result = $conn->execute($sql);
    if ($row = $conn->nextRow($result))
    	$allRows = $row[0];
    return $allRows;
}

/** 
 * searchMatching-Method. This method provides searching capability to 
 * get matching valueObjects from database. It works by searching all 
 * objects that match permanent instance variables of given object.
 * Upper layer should use this by setting some parameters in valueObject
 * and then  call searchMatching. The result will be 0-N objects in vector, 
 * all matching those criteria you specified. Those instance-variables that
 * have NULL values are excluded in search-criteria.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance where search will be based.
 *                     Primary-key field should not be set.
 */
function searchMatching($conn, $valueObject) {
	$first = true;
    $sql = "SELECT * FROM switchAgents WHERE 1=1 ";
	
	if ($valueObject->get_switch_agent_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND switchAgentId LIKE '".$valueObject->get_switch_agent_id()."%' ";
    }
	
	if ($valueObject->get_fabric_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND fabricId LIKE '".$valueObject->get_fabric_id()."%' ";
    }
	
	if ($valueObject->get_name() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND name LIKE '".$valueObject->get_name()."%' ";
    }
	
	if ($valueObject->get_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND version LIKE '".$valueObject->get_version()."%' ";
    }
	
	if ($valueObject->get_platform_model() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND platformModel LIKE '".$valueObject->get_platform_model()."%' ";
    }
	
	if ($valueObject->get_switch_wwn() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND switchWwn LIKE '".$valueObject->get_switch_wwn()."%' ";
    }
	
	if ($valueObject->get_physical_port_info() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND physicalPortInfo LIKE '".$valueObject->get_physical_port_info()."%' ";
    }
	
	if ($valueObject->get_dpc_count() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND dpcCount LIKE '".$valueObject->get_dpc_count()."%' ";
    }
	
	if ($valueObject->get_driver_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND driverVersion LIKE '".$valueObject->get_driver_version()."%' ";
    }
	
	if ($valueObject->get_os_info() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND osInfo LIKE '".$valueObject->get_os_info()."%' ";
    }
	
	if ($valueObject->get_current_compatibility_num() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND currentCompatibilityNum LIKE '".$valueObject->get_current_compatibility_num()."%' ";
    }
	
	if ($valueObject->get_install_path() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND installPath LIKE '".$valueObject->get_install_path()."%' ";
    }
	
	if ($valueObject->get_os_val() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND osVal LIKE '".$valueObject->get_os_val()."%' ";
    }
	
	if ($valueObject->get_time_zone() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND timeZone LIKE '".$valueObject->get_time_zone()."%' ";
    }
	
	if ($valueObject->get_time_local() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND timeLocal LIKE '".$valueObject->get_time_local()."%' ";
    }
	
	if ($valueObject->get_patch_history() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND patchHistory LIKE '".$valueObject->get_patch_history()."%' ";
    }
	
	if ($valueObject->get_cp_ip_address_list() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND cpIpAddressList LIKE '".$valueObject->get_cp_ip_address_list()."%' ";
    }
	
	if ($valueObject->get_pref_cp_ip_address_list() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND prefCpIpAddressList LIKE '".$valueObject->get_pref_cp_ip_address_list()."%' ";
    }
	
	if ($valueObject->get_bp_ip_address_l_ist() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND bpIpAddressLIst LIKE '".$valueObject->get_bp_ip_address_l_ist()."%' ";
    }
	
	if ($valueObject->get_pref_bp_ip_address_list() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND prefBpIpAddressList LIKE '".$valueObject->get_pref_bp_ip_address_list()."%' ";
    }
	
	if ($valueObject->get_sas_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND sasVersion LIKE '".$valueObject->get_sas_version()."%' ";
    }
	
	if ($valueObject->get_fos_version() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND fosVersion LIKE '".$valueObject->get_fos_version()."%' ";
    }
	
	if ($valueObject->get_cache_state() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND cacheState LIKE '".$valueObject->get_cache_state()."%' ";
    }
	if ($valueObject->get_switchAgentSpaceWarnThreshold() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND switchAgentSpaceWarnThreshold LIKE '".$valueObject->get_switchAgentSpaceWarnThreshold()."%' ";
    }
	
	$sql = $sql." ORDER BY ";
	$sql = $sql."fabricId ASC ";
    $sql = $sql .", ";
	$sql = $sql."switchAgentId ASC ";
    // Prevent accidential full table results.
    // Use findAll if all rows must be returned.
    if ($first)
    	return array();

    $searchResults = $this->listQuery($conn, $sql);
    return $searchResults;
}

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return only one row. The resultset will be converted
 * to valueObject. If no rows were found, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 * @param valueObject  Class-instance where resulting data will be stored.
 */
 function singleQuery($conn, $sql, $valueObject) {
 	$result = $conn->execute($sql);
	if ($row = $conn->nextRow($result)) {
		$valueObject->setAry($row);
     } else {
        //print " Object Not Found!";
     	return false;
     }
     return true;
 }

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. The resultset will be converted
 * to the List of valueObjects. If no rows were found, an empty List will be returned.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQuery($conn, $sql) {
	$searchResults = array();
    $result = $conn->execute($sql);
    while ($row = $conn->nextRow($result)) {
    	$temp = $this->createValueObject();
    	$temp->setAry($row);
        array_push($searchResults, $temp);
	}
	return $searchResults;
}
/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. However the results will be unstructured
 * i.e. Not formatted as VO Objects 
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQueryResultset($conn,$sql)
{
	$searchResults = array();
    $result = $conn->execute($sql);
	while ($row = $conn->nextRow($result)) {
        array_push($searchResults, $row);
	}
	return $searchResults;
}

/**
 * databaseUpdate-method. This method is a helper method for internal use. It will execute
 * all database handling that will change the information in tables. SELECT queries will
 * not be executed here however. The return value indicates how many rows were affected.
 * This method will also make sure that if cache is used, it will reset when data changes.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 */
function databaseUpdate($conn, $sql) {
	$result = $conn->execute($sql);
	return $result;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPDAO-1.10";
 }
 
/**
 * findbyfabricid_guid-method. A user defined or custom findbyMethod  
 * This method select by fabric_id and guid
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function find_by_fabricid_guid($conn, $params = array()) {

	$sql = "switchAgentId ='guid' and fabricId ='fabric_id' ";
	$sql = str_replace(array_keys($params), array_values($params), $sql);
	$sql = "SELECT * FROM switchAgents WHERE (" . $sql . ")";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
		
}

/**
 * findbyfabricid-method. A user defined or custom findbyMethod  
 * This method select by fabric_id 
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function find_by_guid($conn, $params = array()) {

	$sql = "switchAgentId ='guid'";
	$sql = str_replace(array_keys($params), array_values($params), $sql);
	$sql = "SELECT * FROM switchAgents WHERE (" . $sql . ")";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
		
}

/**
 * deletebyswitch_id-method. A user defined or custom deletebyMethod  
 * This method delete by switch_id
 *
 * @param conn         This method requires working database connection.
 * @param params       associate array: sql will be searched and replaced by the matching values
 *					   associated with the token
 */
function delete_by_switch_id($conn,$params = array()) {
	$sql = "switchAgentId='switch_id'";
	$sql = str_replace(array_keys($params), array_values($params), $sql);
	$sql = "DELETE FROM switchAgents WHERE (" . $sql . ")";
	debugLog("\n deleting switch--".$sql);
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
         //print "PrimaryKey Error when updating DB!";
          return false;
    }
 	return true;
} 
 

}
?>
