<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * exportedTLNexus Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 17 Jun 2008 14:28:36 +0530	
 * Pattern Version:1.0
 */

class ExportedTLNexusVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $exportedLunNumber;
public $exportedTargetPortWwn;
public $processServerId;
public $fabricId;
public $exportedLunId;
public $state;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function ExportedTLNexusVO(){

}

/*
	function ExportedTLNexusVO(exportedLunIdIn,exportedLunNumberIn,exportedTargetPortWwnIn,fabricIdIn,processServerIdIn){
 this->exportedLunId=$exportedLunIdIn;
 this->exportedLunNumber=$exportedLunNumberIn;
 this->exportedTargetPortWwn=$exportedTargetPortWwnIn;
 this->fabricId=$fabricIdIn;
 this->processServerId=$processServerIdIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_exported_lun_number() {
	return $this->exportedLunNumber;
}
function set_exported_lun_number($exportedLunNumberIn) { 
	$this->exportedLunNumber=$exportedLunNumberIn;
}

function isset_exported_lun_number() {
	return isset($this->exportedLunNumber);
}


function get_exported_target_port_wwn() {
	return $this->exportedTargetPortWwn;
}
function set_exported_target_port_wwn($exportedTargetPortWwnIn) { 
	$this->exportedTargetPortWwn=$exportedTargetPortWwnIn;
}

function isset_exported_target_port_wwn() {
	return isset($this->exportedTargetPortWwn);
}


function get_process_server_id() {
	return $this->processServerId;
}
function set_process_server_id($processServerIdIn) { 
	$this->processServerId=$processServerIdIn;
}

function isset_process_server_id() {
	return isset($this->processServerId);
}


function get_fabric_id() {
	return $this->fabricId;
}
function set_fabric_id($fabricIdIn) { 
	$this->fabricId=$fabricIdIn;
}

function isset_fabric_id() {
	return isset($this->fabricId);
}


function get_exported_lun_id() {
	return $this->exportedLunId;
}
function set_exported_lun_id($exportedLunIdIn) { 
	$this->exportedLunId=$exportedLunIdIn;
}

function isset_exported_lun_id() {
	return isset($this->exportedLunId);
}


function get_state() {
	return $this->state;
}
function set_state($stateIn) { 
	$this->state=$stateIn;
}

function isset_state() {
	return isset($this->state);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($exportedLunNumberIn,$exportedTargetPortWwnIn,$processServerIdIn,$fabricIdIn,$exportedLunIdIn,$stateIn){
	$this->exportedLunNumber=$exportedLunNumberIn;
	$this->exportedTargetPortWwn=$exportedTargetPortWwnIn;
	$this->processServerId=$processServerIdIn;
	$this->fabricId=$fabricIdIn;
	$this->exportedLunId=$exportedLunIdIn;
	$this->state=$stateIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->exportedLunNumber=$ary["exportedLunNumber"];
	$this->exportedTargetPortWwn=$ary["exportedTargetPortWwn"];
	$this->processServerId=$ary["processServerId"];
	$this->fabricId=$ary["fabricId"];
	$this->exportedLunId=$ary["exportedLunId"];
	$this->state=$ary["state"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["exportedLunNumber"]=$this->exportedLunNumber;
		$oAry["exportedTargetPortWwn"]=$this->exportedTargetPortWwn;
		$oAry["processServerId"]=$this->processServerId;
		$oAry["fabricId"]=$this->fabricId;
		$oAry["exportedLunId"]=$this->exportedLunId;
		$oAry["state"]=$this->state;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_exported_lun_number() != $this->exportedLunNumber) {
		return(false);
	}
	if ($valueObject->get_exported_target_port_wwn() != $this->exportedTargetPortWwn) {
		return(false);
	}
	if ($valueObject->get_process_server_id() != $this->processServerId) {
		return(false);
	}
	if ($valueObject->get_fabric_id() != $this->fabricId) {
		return(false);
	}
	if ($valueObject->get_exported_lun_id() != $this->exportedLunId) {
		return(false);
	}
	if ($valueObject->get_state() != $this->state) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass ExportedTLNexusVO, mapping to table exportedTLNexus\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."exportedLunNumber = ".$this->exportedLunNumber."\n";
	$out = $out."exportedTargetPortWwn = ".$this->exportedTargetPortWwn."\n";
	$out = $out."processServerId = ".$this->processServerId."\n";
	$out = $out."fabricId = ".$this->fabricId."\n";
	$out = $out."exportedLunId = ".$this->exportedLunId."\n";
	$out = $out."state = ".$this->state."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new ExportedTLNexusVO();
	
	 $cloned->set_exported_lun_number($this->exportedLunNumber);
	 $cloned->set_exported_target_port_wwn($this->exportedTargetPortWwn);
	 $cloned->set_process_server_id($this->processServerId);
	 $cloned->set_fabric_id($this->fabricId);
	 $cloned->set_exported_lun_id($this->exportedLunId);
	 $cloned->set_state($this->state);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
