<?php
/**
  * This sourcecode has been generated by InMage Source Code Generator version 1.0
  * The usage of generated code is restricted to InMage Systems Inc.
  *
  * frbStatus Data Access Object[DAO]
  * This class contains all database handling that is needed to 
  * permanently store and retrieve frbStatus object instances. 
  * Generated Date:	Tue, 27 Nov 2007 14:01:26 +0530	
  * Pattern Version:1.0
  */
class FrbStatusDAO
{

/**
 * createValueObject-method. This method is used when the Dao class needs
 * to create new value object instance. The reason why this method exists
 * is that sometimes the programmer may want to extend also the valueObject
 * and then this method can be overrided to return extended valueObject.
 * NOTE: If you extend the valueObject class, make sure to override the
 * clone() method in it!
 */
function createValueObject() {
	return new FrbStatusVO();
 }

/**
 * getObject-method. This will create and load valueObject contents from database 
 * using given Primary-Key as identifier. This method is just a convenience method 
 * for the real load-method which accepts the valueObject as a parameter. Returned
 * valueObject will be created using the createValueObject() method.
 */
function getObject($conn,$id) {
	$valueObject = $this->createValueObject();
	$valueObject->set_id($id);
	$this->findByPrimaryKey($conn,$valueObject);
	return $valueObject;
}

/**
 * findbyPrimaryKey-method. This will load valueObject contents from database using
 * Primary-Key as identifier. Upper layer should use this so that valueObject
 * instance is created and only primary-key should be specified. Then call
 * this method to complete other persistent information. This method will
 * overwrite all other fields except primary-key and possible runtime variables.
 * If load can not find matching row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be loaded.
 *                     Primary-key field must be set for this to work properly.
 */
function findByPrimaryKey($conn, $valueObject) {

	if (!$valueObject->get_id()) {
    	//print "Can not select without Primary-Key!";
		return false;
	}

	$sql = "SELECT * FROM frbStatus WHERE (id = '".$valueObject->get_id()."') "; 
	if ($this->singleQuery($conn, $sql, $valueObject)){
    	return true;
    }
    else{
    	return false;
	}
}

/**
 * findAll-method. This will read all contents from database table and
 * build an Vector containing valueObjects. Please note, that this method
 * will consume huge amounts of resources if table has lot's of rows. 
 * This should only be used when target tables have only small amounts
 * of data.
 *
 * @param conn         This method requires working database connection.
 */
function findAll($conn) {
	
	$sql = "SELECT * FROM frbStatus ORDER BY id ASC ";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
}

/**
 * create-method. This will create new row in database according to supplied
 * valueObject contents. Make sure that values for all NOT NULL columns are
 * correctly specified. Also, if this table does not use automatic surrogate-keys
 * the primary-key must be specified. After INSERT command this method will 
 * read the generated primary-key back to valueObject if automatic surrogate-keys
 * were used. 
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be created.
 *                     If automatic surrogate-keys are not used the Primary-key 
 *                     field must be set for this to work properly.
 */
function create($conn, $valueObject) {
	 $count = 0;
     $sql1 = "INSERT INTO frbStatus(";
     $sql3 = ") VALUES ("; 
	 
	 if ($valueObject->isset_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."id";
 	    $sql4 = $sql4."'".$valueObject->get_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_job_config_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."jobConfigId";
 	    $sql4 = $sql4."'".$valueObject->get_job_config_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_start_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."startTime";
 	    $sql4 = $sql4."'".$valueObject->get_start_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_end_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."endTime";
 	    $sql4 = $sql4."'".$valueObject->get_end_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_exit_code())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."exitCode";
 	    $sql4 = $sql4."'".$valueObject->get_exit_code()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_exit_reason())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."exitReason";
 	    $sql4 = $sql4."'".$valueObject->get_exit_reason()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_status_update_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."statusUpdateTime";
 	    $sql4 = $sql4."'".$valueObject->get_status_update_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_total_progress_bytes())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."totalProgressBytes";
 	    $sql4 = $sql4."'".$valueObject->get_total_progress_bytes()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_current_progress_bytes())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."currentProgressBytes";
 	    $sql4 = $sql4."'".$valueObject->get_current_progress_bytes()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_compress_total_bytes())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."compressTotalBytes";
 	    $sql4 = $sql4."'".$valueObject->get_compress_total_bytes()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_compress_differential_bytes())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."compressDifferentialBytes";
 	    $sql4 = $sql4."'".$valueObject->get_compress_differential_bytes()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_compress_sent_bytes())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."compressSentBytes";
 	    $sql4 = $sql4."'".$valueObject->get_compress_sent_bytes()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_log())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."log";
 	    $sql4 = $sql4."'".$valueObject->get_log()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_log_offset())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."logOffset";
 	    $sql4 = $sql4."'".$valueObject->get_log_offset()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_log_complete())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."logComplete";
 	    $sql4 = $sql4."'".$valueObject->get_log_complete()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_last_progress_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."lastProgressTime";
 	    $sql4 = $sql4."'".$valueObject->get_last_progress_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_roll_over_line())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."rollOverLine";
 	    $sql4 = $sql4."'".$valueObject->get_roll_over_line()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_daemon_log_path())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."daemonLogPath";
 	    $sql4 = $sql4."'".$valueObject->get_daemon_log_path()."'"; 	
 		$count++;
 	 }
	 
	$sql = $sql1 . $sql2. $sql3. $sql4.")";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * update-method. This method will save the current state of valueObject to database.
 * Save can not be used to create new instances in database, so upper layer must
 * make sure that the primary-key is correctly specified. Primary-key will indicate
 * which instance is going to be updated in database. If save can not find matching 
 * row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be saved.
 *                     Primary-key field must be set for this to work properly.
 */
function update($conn, $valueObject) {
	$count = 0;
	$sql = "UPDATE frbStatus SET ";
	if ($valueObject->isset_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."id = '".$valueObject->get_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_job_config_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."jobConfigId = '".$valueObject->get_job_config_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_start_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."startTime = '".$valueObject->get_start_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_end_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."endTime = '".$valueObject->get_end_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_exit_code())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."exitCode = '".$valueObject->get_exit_code()."'";
		$count++;
	}
	
	if ($valueObject->isset_exit_reason())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."exitReason = '".$valueObject->get_exit_reason()."'";
		$count++;
	}
	
	if ($valueObject->isset_status_update_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."statusUpdateTime = '".$valueObject->get_status_update_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_total_progress_bytes())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."totalProgressBytes = '".$valueObject->get_total_progress_bytes()."'";
		$count++;
	}
	
	if ($valueObject->isset_current_progress_bytes())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."currentProgressBytes = '".$valueObject->get_current_progress_bytes()."'";
		$count++;
	}
	
	if ($valueObject->isset_compress_total_bytes())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."compressTotalBytes = '".$valueObject->get_compress_total_bytes()."'";
		$count++;
	}
	
	if ($valueObject->isset_compress_differential_bytes())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."compressDifferentialBytes = '".$valueObject->get_compress_differential_bytes()."'";
		$count++;
	}
	
	if ($valueObject->isset_compress_sent_bytes())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."compressSentBytes = '".$valueObject->get_compress_sent_bytes()."'";
		$count++;
	}
	
	if ($valueObject->isset_log())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."log = '".$valueObject->get_log()."'";
		$count++;
	}
	
	if ($valueObject->isset_log_offset())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."logOffset = '".$valueObject->get_log_offset()."'";
		$count++;
	}
	
	if ($valueObject->isset_log_complete())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."logComplete = '".$valueObject->get_log_complete()."'";
		$count++;
	}
	
	if ($valueObject->isset_last_progress_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."lastProgressTime = '".$valueObject->get_last_progress_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_roll_over_line())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."rollOverLine = '".$valueObject->get_roll_over_line()."'";
		$count++;
	}
	
	if ($valueObject->isset_daemon_log_path())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."daemonLogPath = '".$valueObject->get_daemon_log_path()."'";
		$count++;
	}
	
	$sql = $sql." WHERE (id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}

/**
 * delete-method. This method will remove the information from database as identified by
 * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
 * be restored by calling save. Restoring can only be done using create method but if 
 * database is using automatic surrogate-keys, the resulting object will have different 
 * primary-key than what it was in the deleted object. If delete can not find matching row,
 * NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be deleted.
 *                     Primary-key field must be set for this to work properly.
 */
function delete($conn, $valueObject) {
	
	if (!$valueObject->get_id()) {
         //print "Can not delete without Primary-Key!";
         return false;
    }
	$sql = "DELETE FROM frbStatus WHERE (id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
         //print "PrimaryKey Error when updating DB!";
          return false;
    }
 	return true;
}

/**
 * deleteAll-method. This method will remove all information from the table that matches
 * this DAO and ValueObject couple. This should be the most efficient way to clear table.
 * Once deleteAll has been called, no valueObject that has been created before can be 
 * restored by calling save. Restoring can only be done using create method but if database 
 * is using automatic surrogate-keys, the resulting object will have different primary-key 
 * than what it was in the deleted object. (Note, the implementation of this method should
 * be different with different DB backends.)
 *
 * @param conn         This method requires working database connection.
 */
function deleteAll($conn) {
	$sql = "DELETE FROM frbStatus";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * coutAll-method. This method will return the number of all rows from table that matches
 * this Dao. The implementation will simply execute "select count(primarykey) from table".
 * If table is empty, the return value is 0. This method should be used before calling
 * findAll, to make sure table has not too many rows.
 *
 * @param conn         This method requires working database connection.
 */
function countAll($conn) {
	$sql = "SELECT count(*) FROM frbStatus";
	$allRows = 0;
	$result = $conn->execute($sql);
    if ($row = $conn->nextRow($result))
    	$allRows = $row[0];
    return $allRows;
}

/** 
 * searchMatching-Method. This method provides searching capability to 
 * get matching valueObjects from database. It works by searching all 
 * objects that match permanent instance variables of given object.
 * Upper layer should use this by setting some parameters in valueObject
 * and then  call searchMatching. The result will be 0-N objects in vector, 
 * all matching those criteria you specified. Those instance-variables that
 * have NULL values are excluded in search-criteria.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance where search will be based.
 *                     Primary-key field should not be set.
 */
function searchMatching($conn, $valueObject) {
	$first = true;
    $sql = "SELECT * FROM frbStatus WHERE 1=1 ";
	
	if ($valueObject->get_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND id LIKE '".$valueObject->get_id()."%' ";
    }
	
	if ($valueObject->get_job_config_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND jobConfigId LIKE '".$valueObject->get_job_config_id()."%' ";
    }
	
	if ($valueObject->get_start_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND startTime LIKE '".$valueObject->get_start_time()."%' ";
    }
	
	if ($valueObject->get_end_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND endTime LIKE '".$valueObject->get_end_time()."%' ";
    }
	
	if ($valueObject->get_exit_code() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND exitCode LIKE '".$valueObject->get_exit_code()."%' ";
    }
	
	if ($valueObject->get_exit_reason() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND exitReason LIKE '".$valueObject->get_exit_reason()."%' ";
    }
	
	if ($valueObject->get_status_update_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND statusUpdateTime LIKE '".$valueObject->get_status_update_time()."%' ";
    }
	
	if ($valueObject->get_total_progress_bytes() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND totalProgressBytes LIKE '".$valueObject->get_total_progress_bytes()."%' ";
    }
	
	if ($valueObject->get_current_progress_bytes() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND currentProgressBytes LIKE '".$valueObject->get_current_progress_bytes()."%' ";
    }
	
	if ($valueObject->get_compress_total_bytes() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND compressTotalBytes LIKE '".$valueObject->get_compress_total_bytes()."%' ";
    }
	
	if ($valueObject->get_compress_differential_bytes() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND compressDifferentialBytes LIKE '".$valueObject->get_compress_differential_bytes()."%' ";
    }
	
	if ($valueObject->get_compress_sent_bytes() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND compressSentBytes LIKE '".$valueObject->get_compress_sent_bytes()."%' ";
    }
	
	if ($valueObject->get_log() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND log LIKE '".$valueObject->get_log()."%' ";
    }
	
	if ($valueObject->get_log_offset() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND logOffset LIKE '".$valueObject->get_log_offset()."%' ";
    }
	
	if ($valueObject->get_log_complete() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND logComplete LIKE '".$valueObject->get_log_complete()."%' ";
    }
	
	if ($valueObject->get_last_progress_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND lastProgressTime LIKE '".$valueObject->get_last_progress_time()."%' ";
    }
	
	if ($valueObject->get_roll_over_line() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND rollOverLine LIKE '".$valueObject->get_roll_over_line()."%' ";
    }
	
	if ($valueObject->get_daemon_log_path() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND daemonLogPath LIKE '".$valueObject->get_daemon_log_path()."%' ";
    }
	
	$sql = $sql." ORDER BY ";
	$sql = $sql."id ASC ";
    // Prevent accidential full table results.
    // Use findAll if all rows must be returned.
    if ($first)
    	return array();

    $searchResults = $this->listQuery($conn, $sql);
    return $searchResults;
}

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return only one row. The resultset will be converted
 * to valueObject. If no rows were found, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 * @param valueObject  Class-instance where resulting data will be stored.
 */
 function singleQuery($conn, $sql, $valueObject) {
 	$result = $conn->execute($sql);
	if ($row = $conn->nextRow($result)) {
		$valueObject->setAry($row);
     } else {
        //print " Object Not Found!";
     	return false;
     }
     return true;
 }

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. The resultset will be converted
 * to the List of valueObjects. If no rows were found, an empty List will be returned.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQuery($conn, $sql) {
	$searchResults = array();
    $result = $conn->execute($sql);
    while ($row = $conn->nextRow($result)) {
    	$temp = $this->createValueObject();
    	$temp->setAry($row);
        array_push($searchResults, $temp);
	}
	return $searchResults;
}
/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. However the results will be unstructured
 * i.e. Not formatted as VO Objects 
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQueryResultset($conn,$sql)
{
	$searchResults = array();
    $result = $conn->execute($sql);
	while ($row = $conn->nextRow($result)) {
        array_push($searchResults, $row);
	}
	return $searchResults;
}

/**
 * databaseUpdate-method. This method is a helper method for internal use. It will execute
 * all database handling that will change the information in tables. SELECT queries will
 * not be executed here however. The return value indicates how many rows were affected.
 * This method will also make sure that if cache is used, it will reset when data changes.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 */
function databaseUpdate($conn, $sql) {
	$result = $conn->execute($sql);
	return $result;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPDAO-1.9";
 }

}
?>
