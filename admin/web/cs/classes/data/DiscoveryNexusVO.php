<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * discoveryNexus Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 15 Apr 2008 20:16:59 +0530	
 * Pattern Version:1.0
 */

class DiscoveryNexusVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $initiatorPortWwn;
public $targetPortWwn;
public $vtPortWwn;
public $fabricId;
public $switchAgentId;
public $viPortWwn;
public $riPortWwn;
public $dpcNumber;
public $state;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function DiscoveryNexusVO(){

}

/*
	function DiscoveryNexusVO(fabricIdIn,initiatorPortWwnIn,riPortWwnIn,switchAgentIdIn,targetPortWwnIn,viPortWwnIn,vtPortWwnIn){
 this->fabricId=$fabricIdIn;
 this->initiatorPortWwn=$initiatorPortWwnIn;
 this->riPortWwn=$riPortWwnIn;
 this->switchAgentId=$switchAgentIdIn;
 this->targetPortWwn=$targetPortWwnIn;
 this->viPortWwn=$viPortWwnIn;
 this->vtPortWwn=$vtPortWwnIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_initiator_port_wwn() {
	return $this->initiatorPortWwn;
}
function set_initiator_port_wwn($initiatorPortWwnIn) { 
	$this->initiatorPortWwn=$initiatorPortWwnIn;
}

function isset_initiator_port_wwn() {
	return isset($this->initiatorPortWwn);
}


function get_target_port_wwn() {
	return $this->targetPortWwn;
}
function set_target_port_wwn($targetPortWwnIn) { 
	$this->targetPortWwn=$targetPortWwnIn;
}

function isset_target_port_wwn() {
	return isset($this->targetPortWwn);
}


function get_vt_port_wwn() {
	return $this->vtPortWwn;
}
function set_vt_port_wwn($vtPortWwnIn) { 
	$this->vtPortWwn=$vtPortWwnIn;
}

function isset_vt_port_wwn() {
	return isset($this->vtPortWwn);
}


function get_fabric_id() {
	return $this->fabricId;
}
function set_fabric_id($fabricIdIn) { 
	$this->fabricId=$fabricIdIn;
}

function isset_fabric_id() {
	return isset($this->fabricId);
}


function get_switch_agent_id() {
	return $this->switchAgentId;
}
function set_switch_agent_id($switchAgentIdIn) { 
	$this->switchAgentId=$switchAgentIdIn;
}

function isset_switch_agent_id() {
	return isset($this->switchAgentId);
}


function get_vi_port_wwn() {
	return $this->viPortWwn;
}
function set_vi_port_wwn($viPortWwnIn) { 
	$this->viPortWwn=$viPortWwnIn;
}

function isset_vi_port_wwn() {
	return isset($this->viPortWwn);
}


function get_ri_port_wwn() {
	return $this->riPortWwn;
}
function set_ri_port_wwn($riPortWwnIn) { 
	$this->riPortWwn=$riPortWwnIn;
}

function isset_ri_port_wwn() {
	return isset($this->riPortWwn);
}


function get_dpc_number() {
	return $this->dpcNumber;
}
function set_dpc_number($dpcNumberIn) { 
	$this->dpcNumber=$dpcNumberIn;
}

function isset_dpc_number() {
	return isset($this->dpcNumber);
}


function get_state() {
	return $this->state;
}
function set_state($stateIn) { 
	$this->state=$stateIn;
}

function isset_state() {
	return isset($this->state);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($initiatorPortWwnIn,$targetPortWwnIn,$vtPortWwnIn,$fabricIdIn,$switchAgentIdIn,$viPortWwnIn,$riPortWwnIn,$dpcNumberIn,$stateIn){
	$this->initiatorPortWwn=$initiatorPortWwnIn;
	$this->targetPortWwn=$targetPortWwnIn;
	$this->vtPortWwn=$vtPortWwnIn;
	$this->fabricId=$fabricIdIn;
	$this->switchAgentId=$switchAgentIdIn;
	$this->viPortWwn=$viPortWwnIn;
	$this->riPortWwn=$riPortWwnIn;
	$this->dpcNumber=$dpcNumberIn;
	$this->state=$stateIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->initiatorPortWwn=$ary["initiatorPortWwn"];
	$this->targetPortWwn=$ary["targetPortWwn"];
	$this->vtPortWwn=$ary["vtPortWwn"];
	$this->fabricId=$ary["fabricId"];
	$this->switchAgentId=$ary["switchAgentId"];
	$this->viPortWwn=$ary["viPortWwn"];
	$this->riPortWwn=$ary["riPortWwn"];
	$this->dpcNumber=$ary["dpcNumber"];
	$this->state=$ary["state"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["initiatorPortWwn"]=$this->initiatorPortWwn;
		$oAry["targetPortWwn"]=$this->targetPortWwn;
		$oAry["vtPortWwn"]=$this->vtPortWwn;
		$oAry["fabricId"]=$this->fabricId;
		$oAry["switchAgentId"]=$this->switchAgentId;
		$oAry["viPortWwn"]=$this->viPortWwn;
		$oAry["riPortWwn"]=$this->riPortWwn;
		$oAry["dpcNumber"]=$this->dpcNumber;
		$oAry["state"]=$this->state;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_initiator_port_wwn() != $this->initiatorPortWwn) {
		return(false);
	}
	if ($valueObject->get_target_port_wwn() != $this->targetPortWwn) {
		return(false);
	}
	if ($valueObject->get_vt_port_wwn() != $this->vtPortWwn) {
		return(false);
	}
	if ($valueObject->get_fabric_id() != $this->fabricId) {
		return(false);
	}
	if ($valueObject->get_switch_agent_id() != $this->switchAgentId) {
		return(false);
	}
	if ($valueObject->get_vi_port_wwn() != $this->viPortWwn) {
		return(false);
	}
	if ($valueObject->get_ri_port_wwn() != $this->riPortWwn) {
		return(false);
	}
	if ($valueObject->get_dpc_number() != $this->dpcNumber) {
		return(false);
	}
	if ($valueObject->get_state() != $this->state) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass DiscoveryNexusVO, mapping to table discoveryNexus\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."initiatorPortWwn = ".$this->initiatorPortWwn."\n";
	$out = $out."targetPortWwn = ".$this->targetPortWwn."\n";
	$out = $out."vtPortWwn = ".$this->vtPortWwn."\n";
	$out = $out."fabricId = ".$this->fabricId."\n";
	$out = $out."switchAgentId = ".$this->switchAgentId."\n";
	$out = $out."viPortWwn = ".$this->viPortWwn."\n";
	$out = $out."riPortWwn = ".$this->riPortWwn."\n";
	$out = $out."dpcNumber = ".$this->dpcNumber."\n";
	$out = $out."state = ".$this->state."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new DiscoveryNexusVO();
	
	 $cloned->set_initiator_port_wwn($this->initiatorPortWwn);
	 $cloned->set_target_port_wwn($this->targetPortWwn);
	 $cloned->set_vt_port_wwn($this->vtPortWwn);
	 $cloned->set_fabric_id($this->fabricId);
	 $cloned->set_switch_agent_id($this->switchAgentId);
	 $cloned->set_vi_port_wwn($this->viPortWwn);
	 $cloned->set_ri_port_wwn($this->riPortWwn);
	 $cloned->set_dpc_number($this->dpcNumber);
	 $cloned->set_state($this->state);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
