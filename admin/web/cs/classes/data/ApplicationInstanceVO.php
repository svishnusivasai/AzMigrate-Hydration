<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * ApplicationInstance Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:22 +0530	
 * Pattern Version:1.0
 */

class ApplicationInstanceVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $hostId;
public $storageGroupName;
public $dbName;
public $dbPath;
public $logPath;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function ApplicationInstanceVO(){

}

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_host_id() {
	return $this->hostId;
}
function set_host_id($hostIdIn) { 
	$this->hostId=$hostIdIn;
}

function isset_host_id() {
	return isset($this->hostId);
}


function get_storage_group_name() {
	return $this->storageGroupName;
}
function set_storage_group_name($storageGroupNameIn) { 
	$this->storageGroupName=$storageGroupNameIn;
}

function isset_storage_group_name() {
	return isset($this->storageGroupName);
}


function get_db_name() {
	return $this->dbName;
}
function set_db_name($dbNameIn) { 
	$this->dbName=$dbNameIn;
}

function isset_db_name() {
	return isset($this->dbName);
}


function get_db_path() {
	return $this->dbPath;
}
function set_db_path($dbPathIn) { 
	$this->dbPath=$dbPathIn;
}

function isset_db_path() {
	return isset($this->dbPath);
}


function get_log_path() {
	return $this->logPath;
}
function set_log_path($logPathIn) { 
	$this->logPath=$logPathIn;
}

function isset_log_path() {
	return isset($this->logPath);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$hostIdIn,$storageGroupNameIn,$dbNameIn,$dbPathIn,$logPathIn){
	$this->id=$idIn;
	$this->hostId=$hostIdIn;
	$this->storageGroupName=$storageGroupNameIn;
	$this->dbName=$dbNameIn;
	$this->dbPath=$dbPathIn;
	$this->logPath=$logPathIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->hostId=$ary["hostId"];
	$this->storageGroupName=$ary["storageGroupName"];
	$this->dbName=$ary["dbName"];
	$this->dbPath=$ary["dbPath"];
	$this->logPath=$ary["logPath"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["hostId"]=$this->hostId;
		$oAry["storageGroupName"]=$this->storageGroupName;
		$oAry["dbName"]=$this->dbName;
		$oAry["dbPath"]=$this->dbPath;
		$oAry["logPath"]=$this->logPath;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_host_id() != $this->hostId) {
		return(false);
	}
	if ($valueObject->get_storage_group_name() != $this->storageGroupName) {
		return(false);
	}
	if ($valueObject->get_db_name() != $this->dbName) {
		return(false);
	}
	if ($valueObject->get_db_path() != $this->dbPath) {
		return(false);
	}
	if ($valueObject->get_log_path() != $this->logPath) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass ApplicationInstanceVO, mapping to table ApplicationInstance\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."hostId = ".$this->hostId."\n";
	$out = $out."storageGroupName = ".$this->storageGroupName."\n";
	$out = $out."dbName = ".$this->dbName."\n";
	$out = $out."dbPath = ".$this->dbPath."\n";
	$out = $out."logPath = ".$this->logPath."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new ApplicationInstanceVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_host_id($this->hostId);
	 $cloned->set_storage_group_name($this->storageGroupName);
	 $cloned->set_db_name($this->dbName);
	 $cloned->set_db_path($this->dbPath);
	 $cloned->set_log_path($this->logPath);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
