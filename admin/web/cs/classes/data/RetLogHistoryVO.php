<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * retLogHistory Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:28 +0530	
 * Pattern Version:1.0
 */

class RetLogHistoryVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $retId;
public $repId;
public $HostId;
public $logdatadir;
public $retLogsize;
public $createdDate;
public $modifiedDate;
public $deleted;
public $timebasedFlag;
public $retTimeInterval;
public $type_of_policy;
public $ret_logupto_days;
public $ret_logupto_hrs;
public $temp_logdata_dir;
public $editPathFlag;
public $diskspacethreshold;
public $logsizethreshold;
public $logPruningPolicy;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function RetLogHistoryVO(){

}

/*
	function RetLogHistoryVO(idIn){
 this->id=$idIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->retLogsize="0";
	$this->createdDate="0000-00-00 00:00:00";
	$this->modifiedDate="0000-00-00 00:00:00";
	$this->deleted="0";
	$this->timebasedFlag="0";
	$this->retTimeInterval="0";
	$this->type_of_policy="0";
	$this->ret_logupto_days="0";
	$this->ret_logupto_hrs="0";
	$this->temp_logdata_dir="0";
	$this->editPathFlag="0";
	$this->diskspacethreshold="80";
	$this->logsizethreshold="80";
	$this->logPruningPolicy="0";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_ret_id() {
	return $this->retId;
}
function set_ret_id($retIdIn) { 
	$this->retId=$retIdIn;
}

function isset_ret_id() {
	return isset($this->retId);
}


function get_rep_id() {
	return $this->repId;
}
function set_rep_id($repIdIn) { 
	$this->repId=$repIdIn;
}

function isset_rep_id() {
	return isset($this->repId);
}


function get_host_id() {
	return $this->HostId;
}
function set_host_id($HostIdIn) { 
	$this->HostId=$HostIdIn;
}

function isset_host_id() {
	return isset($this->HostId);
}


function get_logdatadir() {
	return $this->logdatadir;
}
function set_logdatadir($logdatadirIn) { 
	$this->logdatadir=$logdatadirIn;
}

function isset_logdatadir() {
	return isset($this->logdatadir);
}


function get_ret_logsize() {
	return $this->retLogsize;
}
function set_ret_logsize($retLogsizeIn) { 
	$this->retLogsize=$retLogsizeIn;
}

function isset_ret_logsize() {
	return isset($this->retLogsize);
}


function get_created_date() {
	return $this->createdDate;
}
function set_created_date($createdDateIn) { 
	$this->createdDate=$createdDateIn;
}

function isset_created_date() {
	return isset($this->createdDate);
}


function get_modified_date() {
	return $this->modifiedDate;
}
function set_modified_date($modifiedDateIn) { 
	$this->modifiedDate=$modifiedDateIn;
}

function isset_modified_date() {
	return isset($this->modifiedDate);
}


function get_deleted() {
	return $this->deleted;
}
function set_deleted($deletedIn) { 
	$this->deleted=$deletedIn;
}

function isset_deleted() {
	return isset($this->deleted);
}


function get_timebased_flag() {
	return $this->timebasedFlag;
}
function set_timebased_flag($timebasedFlagIn) { 
	$this->timebasedFlag=$timebasedFlagIn;
}

function isset_timebased_flag() {
	return isset($this->timebasedFlag);
}


function get_ret_time_interval() {
	return $this->retTimeInterval;
}
function set_ret_time_interval($retTimeIntervalIn) { 
	$this->retTimeInterval=$retTimeIntervalIn;
}

function isset_ret_time_interval() {
	return isset($this->retTimeInterval);
}


function get_type_of_policy() {
	return $this->type_of_policy;
}
function set_type_of_policy($type_of_policyIn) { 
	$this->type_of_policy=$type_of_policyIn;
}

function isset_type_of_policy() {
	return isset($this->type_of_policy);
}


function get_ret_logupto_days() {
	return $this->ret_logupto_days;
}
function set_ret_logupto_days($ret_logupto_daysIn) { 
	$this->ret_logupto_days=$ret_logupto_daysIn;
}

function isset_ret_logupto_days() {
	return isset($this->ret_logupto_days);
}


function get_ret_logupto_hrs() {
	return $this->ret_logupto_hrs;
}
function set_ret_logupto_hrs($ret_logupto_hrsIn) { 
	$this->ret_logupto_hrs=$ret_logupto_hrsIn;
}

function isset_ret_logupto_hrs() {
	return isset($this->ret_logupto_hrs);
}


function get_temp_logdata_dir() {
	return $this->temp_logdata_dir;
}
function set_temp_logdata_dir($temp_logdata_dirIn) { 
	$this->temp_logdata_dir=$temp_logdata_dirIn;
}

function isset_temp_logdata_dir() {
	return isset($this->temp_logdata_dir);
}


function get_edit_path_flag() {
	return $this->editPathFlag;
}
function set_edit_path_flag($editPathFlagIn) { 
	$this->editPathFlag=$editPathFlagIn;
}

function isset_edit_path_flag() {
	return isset($this->editPathFlag);
}


function get_diskspacethreshold() {
	return $this->diskspacethreshold;
}
function set_diskspacethreshold($diskspacethresholdIn) { 
	$this->diskspacethreshold=$diskspacethresholdIn;
}

function isset_diskspacethreshold() {
	return isset($this->diskspacethreshold);
}


function get_logsizethreshold() {
	return $this->logsizethreshold;
}
function set_logsizethreshold($logsizethresholdIn) { 
	$this->logsizethreshold=$logsizethresholdIn;
}

function isset_logsizethreshold() {
	return isset($this->logsizethreshold);
}


function get_log_pruning_policy() {
	return $this->logPruningPolicy;
}
function set_log_pruning_policy($logPruningPolicyIn) { 
	$this->logPruningPolicy=$logPruningPolicyIn;
}

function isset_log_pruning_policy() {
	return isset($this->logPruningPolicy);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$retIdIn,$repIdIn,$HostIdIn,$logdatadirIn,$retLogsizeIn,$createdDateIn,$modifiedDateIn,$deletedIn,$timebasedFlagIn,$retTimeIntervalIn,$type_of_policyIn,$ret_logupto_daysIn,$ret_logupto_hrsIn,$temp_logdata_dirIn,$editPathFlagIn,$diskspacethresholdIn,$logsizethresholdIn,$logPruningPolicyIn){
	$this->id=$idIn;
	$this->retId=$retIdIn;
	$this->repId=$repIdIn;
	$this->HostId=$HostIdIn;
	$this->logdatadir=$logdatadirIn;
	$this->retLogsize=$retLogsizeIn;
	$this->createdDate=$createdDateIn;
	$this->modifiedDate=$modifiedDateIn;
	$this->deleted=$deletedIn;
	$this->timebasedFlag=$timebasedFlagIn;
	$this->retTimeInterval=$retTimeIntervalIn;
	$this->type_of_policy=$type_of_policyIn;
	$this->ret_logupto_days=$ret_logupto_daysIn;
	$this->ret_logupto_hrs=$ret_logupto_hrsIn;
	$this->temp_logdata_dir=$temp_logdata_dirIn;
	$this->editPathFlag=$editPathFlagIn;
	$this->diskspacethreshold=$diskspacethresholdIn;
	$this->logsizethreshold=$logsizethresholdIn;
	$this->logPruningPolicy=$logPruningPolicyIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->retId=$ary["retId"];
	$this->repId=$ary["repId"];
	$this->HostId=$ary["HostId"];
	$this->logdatadir=$ary["logdatadir"];
	$this->retLogsize=$ary["retLogsize"];
	$this->createdDate=$ary["createdDate"];
	$this->modifiedDate=$ary["modifiedDate"];
	$this->deleted=$ary["deleted"];
	$this->timebasedFlag=$ary["timebasedFlag"];
	$this->retTimeInterval=$ary["retTimeInterval"];
	$this->type_of_policy=$ary["type_of_policy"];
	$this->ret_logupto_days=$ary["ret_logupto_days"];
	$this->ret_logupto_hrs=$ary["ret_logupto_hrs"];
	$this->temp_logdata_dir=$ary["temp_logdata_dir"];
	$this->editPathFlag=$ary["editPathFlag"];
	$this->diskspacethreshold=$ary["diskspacethreshold"];
	$this->logsizethreshold=$ary["logsizethreshold"];
	$this->logPruningPolicy=$ary["logPruningPolicy"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["retId"]=$this->retId;
		$oAry["repId"]=$this->repId;
		$oAry["HostId"]=$this->HostId;
		$oAry["logdatadir"]=$this->logdatadir;
		$oAry["retLogsize"]=$this->retLogsize;
		$oAry["createdDate"]=$this->createdDate;
		$oAry["modifiedDate"]=$this->modifiedDate;
		$oAry["deleted"]=$this->deleted;
		$oAry["timebasedFlag"]=$this->timebasedFlag;
		$oAry["retTimeInterval"]=$this->retTimeInterval;
		$oAry["type_of_policy"]=$this->type_of_policy;
		$oAry["ret_logupto_days"]=$this->ret_logupto_days;
		$oAry["ret_logupto_hrs"]=$this->ret_logupto_hrs;
		$oAry["temp_logdata_dir"]=$this->temp_logdata_dir;
		$oAry["editPathFlag"]=$this->editPathFlag;
		$oAry["diskspacethreshold"]=$this->diskspacethreshold;
		$oAry["logsizethreshold"]=$this->logsizethreshold;
		$oAry["logPruningPolicy"]=$this->logPruningPolicy;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_ret_id() != $this->retId) {
		return(false);
	}
	if ($valueObject->get_rep_id() != $this->repId) {
		return(false);
	}
	if ($valueObject->get_host_id() != $this->HostId) {
		return(false);
	}
	if ($valueObject->get_logdatadir() != $this->logdatadir) {
		return(false);
	}
	if ($valueObject->get_ret_logsize() != $this->retLogsize) {
		return(false);
	}
	if ($valueObject->get_created_date() != $this->createdDate) {
		return(false);
	}
	if ($valueObject->get_modified_date() != $this->modifiedDate) {
		return(false);
	}
	if ($valueObject->get_deleted() != $this->deleted) {
		return(false);
	}
	if ($valueObject->get_timebased_flag() != $this->timebasedFlag) {
		return(false);
	}
	if ($valueObject->get_ret_time_interval() != $this->retTimeInterval) {
		return(false);
	}
	if ($valueObject->get_type_of_policy() != $this->type_of_policy) {
		return(false);
	}
	if ($valueObject->get_ret_logupto_days() != $this->ret_logupto_days) {
		return(false);
	}
	if ($valueObject->get_ret_logupto_hrs() != $this->ret_logupto_hrs) {
		return(false);
	}
	if ($valueObject->get_temp_logdata_dir() != $this->temp_logdata_dir) {
		return(false);
	}
	if ($valueObject->get_edit_path_flag() != $this->editPathFlag) {
		return(false);
	}
	if ($valueObject->get_diskspacethreshold() != $this->diskspacethreshold) {
		return(false);
	}
	if ($valueObject->get_logsizethreshold() != $this->logsizethreshold) {
		return(false);
	}
	if ($valueObject->get_log_pruning_policy() != $this->logPruningPolicy) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass RetLogHistoryVO, mapping to table retLogHistory\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."retId = ".$this->retId."\n";
	$out = $out."repId = ".$this->repId."\n";
	$out = $out."HostId = ".$this->HostId."\n";
	$out = $out."logdatadir = ".$this->logdatadir."\n";
	$out = $out."retLogsize = ".$this->retLogsize."\n";
	$out = $out."createdDate = ".$this->createdDate."\n";
	$out = $out."modifiedDate = ".$this->modifiedDate."\n";
	$out = $out."deleted = ".$this->deleted."\n";
	$out = $out."timebasedFlag = ".$this->timebasedFlag."\n";
	$out = $out."retTimeInterval = ".$this->retTimeInterval."\n";
	$out = $out."type_of_policy = ".$this->type_of_policy."\n";
	$out = $out."ret_logupto_days = ".$this->ret_logupto_days."\n";
	$out = $out."ret_logupto_hrs = ".$this->ret_logupto_hrs."\n";
	$out = $out."temp_logdata_dir = ".$this->temp_logdata_dir."\n";
	$out = $out."editPathFlag = ".$this->editPathFlag."\n";
	$out = $out."diskspacethreshold = ".$this->diskspacethreshold."\n";
	$out = $out."logsizethreshold = ".$this->logsizethreshold."\n";
	$out = $out."logPruningPolicy = ".$this->logPruningPolicy."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new RetLogHistoryVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_ret_id($this->retId);
	 $cloned->set_rep_id($this->repId);
	 $cloned->set_host_id($this->HostId);
	 $cloned->set_logdatadir($this->logdatadir);
	 $cloned->set_ret_logsize($this->retLogsize);
	 $cloned->set_created_date($this->createdDate);
	 $cloned->set_modified_date($this->modifiedDate);
	 $cloned->set_deleted($this->deleted);
	 $cloned->set_timebased_flag($this->timebasedFlag);
	 $cloned->set_ret_time_interval($this->retTimeInterval);
	 $cloned->set_type_of_policy($this->type_of_policy);
	 $cloned->set_ret_logupto_days($this->ret_logupto_days);
	 $cloned->set_ret_logupto_hrs($this->ret_logupto_hrs);
	 $cloned->set_temp_logdata_dir($this->temp_logdata_dir);
	 $cloned->set_edit_path_flag($this->editPathFlag);
	 $cloned->set_diskspacethreshold($this->diskspacethreshold);
	 $cloned->set_logsizethreshold($this->logsizethreshold);
	 $cloned->set_log_pruning_policy($this->logPruningPolicy);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
