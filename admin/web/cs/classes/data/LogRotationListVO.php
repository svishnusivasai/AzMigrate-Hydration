<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * logRotationList Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:26 +0530	
 * Pattern Version:1.0
 */

class LogRotationListVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $logName;
public $logPathLinux;
public $logPathWindows;
public $logType;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function LogRotationListVO(){

}

/*
	function LogRotationListVO(idIn){
 this->id=$idIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->logPathLinux="NULL";
	$this->logPathWindows="NULL";
	$this->logType="0";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_log_name() {
	return $this->logName;
}
function set_log_name($logNameIn) { 
	$this->logName=$logNameIn;
}

function isset_log_name() {
	return isset($this->logName);
}


function get_log_path_linux() {
	return $this->logPathLinux;
}
function set_log_path_linux($logPathLinuxIn) { 
	$this->logPathLinux=$logPathLinuxIn;
}

function isset_log_path_linux() {
	return isset($this->logPathLinux);
}


function get_log_path_windows() {
	return $this->logPathWindows;
}
function set_log_path_windows($logPathWindowsIn) { 
	$this->logPathWindows=$logPathWindowsIn;
}

function isset_log_path_windows() {
	return isset($this->logPathWindows);
}


function get_log_type() {
	return $this->logType;
}
function set_log_type($logTypeIn) { 
	$this->logType=$logTypeIn;
}

function isset_log_type() {
	return isset($this->logType);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$logNameIn,$logPathLinuxIn,$logPathWindowsIn,$logTypeIn){
	$this->id=$idIn;
	$this->logName=$logNameIn;
	$this->logPathLinux=$logPathLinuxIn;
	$this->logPathWindows=$logPathWindowsIn;
	$this->logType=$logTypeIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->logName=$ary["logName"];
	$this->logPathLinux=$ary["logPathLinux"];
	$this->logPathWindows=$ary["logPathWindows"];
	$this->logType=$ary["logType"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["logName"]=$this->logName;
		$oAry["logPathLinux"]=$this->logPathLinux;
		$oAry["logPathWindows"]=$this->logPathWindows;
		$oAry["logType"]=$this->logType;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_log_name() != $this->logName) {
		return(false);
	}
	if ($valueObject->get_log_path_linux() != $this->logPathLinux) {
		return(false);
	}
	if ($valueObject->get_log_path_windows() != $this->logPathWindows) {
		return(false);
	}
	if ($valueObject->get_log_type() != $this->logType) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass LogRotationListVO, mapping to table logRotationList\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."logName = ".$this->logName."\n";
	$out = $out."logPathLinux = ".$this->logPathLinux."\n";
	$out = $out."logPathWindows = ".$this->logPathWindows."\n";
	$out = $out."logType = ".$this->logType."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new LogRotationListVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_log_name($this->logName);
	 $cloned->set_log_path_linux($this->logPathLinux);
	 $cloned->set_log_path_windows($this->logPathWindows);
	 $cloned->set_log_type($this->logType);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
