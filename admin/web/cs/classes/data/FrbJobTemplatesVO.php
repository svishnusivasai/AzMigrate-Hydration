<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * frbJobTemplates Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:25 +0530	
 * Pattern Version:1.0
 */

class FrbJobTemplatesVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $templateName;
public $templateString;
public $templateType;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function FrbJobTemplatesVO(){

}

/*
	function FrbJobTemplatesVO(idIn){
 this->id=$idIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->templateType="0";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_template_name() {
	return $this->templateName;
}
function set_template_name($templateNameIn) { 
	$this->templateName=$templateNameIn;
}

function isset_template_name() {
	return isset($this->templateName);
}


function get_template_string() {
	return $this->templateString;
}
function set_template_string($templateStringIn) { 
	$this->templateString=$templateStringIn;
}

function isset_template_string() {
	return isset($this->templateString);
}


function get_template_type() {
	return $this->templateType;
}
function set_template_type($templateTypeIn) { 
	$this->templateType=$templateTypeIn;
}

function isset_template_type() {
	return isset($this->templateType);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$templateNameIn,$templateStringIn,$templateTypeIn){
	$this->id=$idIn;
	$this->templateName=$templateNameIn;
	$this->templateString=$templateStringIn;
	$this->templateType=$templateTypeIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->templateName=$ary["templateName"];
	$this->templateString=$ary["templateString"];
	$this->templateType=$ary["templateType"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["templateName"]=$this->templateName;
		$oAry["templateString"]=$this->templateString;
		$oAry["templateType"]=$this->templateType;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_template_name() != $this->templateName) {
		return(false);
	}
	if ($valueObject->get_template_string() != $this->templateString) {
		return(false);
	}
	if ($valueObject->get_template_type() != $this->templateType) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass FrbJobTemplatesVO, mapping to table frbJobTemplates\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."templateName = ".$this->templateName."\n";
	$out = $out."templateString = ".$this->templateString."\n";
	$out = $out."templateType = ".$this->templateType."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new FrbJobTemplatesVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_template_name($this->templateName);
	 $cloned->set_template_string($this->templateString);
	 $cloned->set_template_type($this->templateType);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
