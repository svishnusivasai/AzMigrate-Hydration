<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * replicationHistory Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:27 +0530	
 * Pattern Version:1.0
 */

class ReplicationHistoryVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $ruleId;
public $sourceHostId;
public $sourceDeviceName;
public $destinationHostId;
public $destinationDeviceName;
public $createdDate;
public $deleted;
public $volumeGroupId;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function ReplicationHistoryVO(){

}

/*
	function ReplicationHistoryVO(idIn){
 this->id=$idIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->ruleId="0";
	$this->createdDate="0000-00-00 00:00:00";
	$this->deleted="0";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_rule_id() {
	return $this->ruleId;
}
function set_rule_id($ruleIdIn) { 
	$this->ruleId=$ruleIdIn;
}

function isset_rule_id() {
	return isset($this->ruleId);
}


function get_source_host_id() {
	return $this->sourceHostId;
}
function set_source_host_id($sourceHostIdIn) { 
	$this->sourceHostId=$sourceHostIdIn;
}

function isset_source_host_id() {
	return isset($this->sourceHostId);
}


function get_source_device_name() {
	return $this->sourceDeviceName;
}
function set_source_device_name($sourceDeviceNameIn) { 
	$this->sourceDeviceName=$sourceDeviceNameIn;
}

function isset_source_device_name() {
	return isset($this->sourceDeviceName);
}


function get_destination_host_id() {
	return $this->destinationHostId;
}
function set_destination_host_id($destinationHostIdIn) { 
	$this->destinationHostId=$destinationHostIdIn;
}

function isset_destination_host_id() {
	return isset($this->destinationHostId);
}


function get_destination_device_name() {
	return $this->destinationDeviceName;
}
function set_destination_device_name($destinationDeviceNameIn) { 
	$this->destinationDeviceName=$destinationDeviceNameIn;
}

function isset_destination_device_name() {
	return isset($this->destinationDeviceName);
}


function get_created_date() {
	return $this->createdDate;
}
function set_created_date($createdDateIn) { 
	$this->createdDate=$createdDateIn;
}

function isset_created_date() {
	return isset($this->createdDate);
}


function get_deleted() {
	return $this->deleted;
}
function set_deleted($deletedIn) { 
	$this->deleted=$deletedIn;
}

function isset_deleted() {
	return isset($this->deleted);
}


function get_volume_group_id() {
	return $this->volumeGroupId;
}
function set_volume_group_id($volumeGroupIdIn) { 
	$this->volumeGroupId=$volumeGroupIdIn;
}

function isset_volume_group_id() {
	return isset($this->volumeGroupId);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$ruleIdIn,$sourceHostIdIn,$sourceDeviceNameIn,$destinationHostIdIn,$destinationDeviceNameIn,$createdDateIn,$deletedIn,$volumeGroupIdIn){
	$this->id=$idIn;
	$this->ruleId=$ruleIdIn;
	$this->sourceHostId=$sourceHostIdIn;
	$this->sourceDeviceName=$sourceDeviceNameIn;
	$this->destinationHostId=$destinationHostIdIn;
	$this->destinationDeviceName=$destinationDeviceNameIn;
	$this->createdDate=$createdDateIn;
	$this->deleted=$deletedIn;
	$this->volumeGroupId=$volumeGroupIdIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->ruleId=$ary["ruleId"];
	$this->sourceHostId=$ary["sourceHostId"];
	$this->sourceDeviceName=$ary["sourceDeviceName"];
	$this->destinationHostId=$ary["destinationHostId"];
	$this->destinationDeviceName=$ary["destinationDeviceName"];
	$this->createdDate=$ary["createdDate"];
	$this->deleted=$ary["deleted"];
	$this->volumeGroupId=$ary["volumeGroupId"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["ruleId"]=$this->ruleId;
		$oAry["sourceHostId"]=$this->sourceHostId;
		$oAry["sourceDeviceName"]=$this->sourceDeviceName;
		$oAry["destinationHostId"]=$this->destinationHostId;
		$oAry["destinationDeviceName"]=$this->destinationDeviceName;
		$oAry["createdDate"]=$this->createdDate;
		$oAry["deleted"]=$this->deleted;
		$oAry["volumeGroupId"]=$this->volumeGroupId;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_rule_id() != $this->ruleId) {
		return(false);
	}
	if ($valueObject->get_source_host_id() != $this->sourceHostId) {
		return(false);
	}
	if ($valueObject->get_source_device_name() != $this->sourceDeviceName) {
		return(false);
	}
	if ($valueObject->get_destination_host_id() != $this->destinationHostId) {
		return(false);
	}
	if ($valueObject->get_destination_device_name() != $this->destinationDeviceName) {
		return(false);
	}
	if ($valueObject->get_created_date() != $this->createdDate) {
		return(false);
	}
	if ($valueObject->get_deleted() != $this->deleted) {
		return(false);
	}
	if ($valueObject->get_volume_group_id() != $this->volumeGroupId) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass ReplicationHistoryVO, mapping to table replicationHistory\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."ruleId = ".$this->ruleId."\n";
	$out = $out."sourceHostId = ".$this->sourceHostId."\n";
	$out = $out."sourceDeviceName = ".$this->sourceDeviceName."\n";
	$out = $out."destinationHostId = ".$this->destinationHostId."\n";
	$out = $out."destinationDeviceName = ".$this->destinationDeviceName."\n";
	$out = $out."createdDate = ".$this->createdDate."\n";
	$out = $out."deleted = ".$this->deleted."\n";
	$out = $out."volumeGroupId = ".$this->volumeGroupId."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new ReplicationHistoryVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_rule_id($this->ruleId);
	 $cloned->set_source_host_id($this->sourceHostId);
	 $cloned->set_source_device_name($this->sourceDeviceName);
	 $cloned->set_destination_host_id($this->destinationHostId);
	 $cloned->set_destination_device_name($this->destinationDeviceName);
	 $cloned->set_created_date($this->createdDate);
	 $cloned->set_deleted($this->deleted);
	 $cloned->set_volume_group_id($this->volumeGroupId);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
