<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * trapListeners Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:30 +0530	
 * Pattern Version:1.0
 */

class TrapListenersVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $trapListenerId;
public $trapListenerIPv4;
public $trapListenerPort;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function TrapListenersVO(){

}

/*
	function TrapListenersVO(trapListenerIdIn){
 this->trapListenerId=$trapListenerIdIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->trapListenerIPv4="-NULL-";
	$this->trapListenerPort="162";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_trap_listener_id() {
	return $this->trapListenerId;
}
function set_trap_listener_id($trapListenerIdIn) { 
	$this->trapListenerId=$trapListenerIdIn;
}

function isset_trap_listener_id() {
	return isset($this->trapListenerId);
}


function get_trap_listener_ipv4() {
	return $this->trapListenerIPv4;
}
function set_trap_listener_ipv4($trapListenerIPv4In) { 
	$this->trapListenerIPv4=$trapListenerIPv4In;
}

function isset_trap_listener_ipv4() {
	return isset($this->trapListenerIPv4);
}


function get_trap_listener_port() {
	return $this->trapListenerPort;
}
function set_trap_listener_port($trapListenerPortIn) { 
	$this->trapListenerPort=$trapListenerPortIn;
}

function isset_trap_listener_port() {
	return isset($this->trapListenerPort);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($trapListenerIdIn,$trapListenerIPv4In,$trapListenerPortIn){
	$this->trapListenerId=$trapListenerIdIn;
	$this->trapListenerIPv4=$trapListenerIPv4In;
	$this->trapListenerPort=$trapListenerPortIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->trapListenerId=$ary["trapListenerId"];
	$this->trapListenerIPv4=$ary["trapListenerIPv4"];
	$this->trapListenerPort=$ary["trapListenerPort"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["trapListenerId"]=$this->trapListenerId;
		$oAry["trapListenerIPv4"]=$this->trapListenerIPv4;
		$oAry["trapListenerPort"]=$this->trapListenerPort;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_trap_listener_id() != $this->trapListenerId) {
		return(false);
	}
	if ($valueObject->get_trap_listener_ipv4() != $this->trapListenerIPv4) {
		return(false);
	}
	if ($valueObject->get_trap_listener_port() != $this->trapListenerPort) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass TrapListenersVO, mapping to table trapListeners\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."trapListenerId = ".$this->trapListenerId."\n";
	$out = $out."trapListenerIPv4 = ".$this->trapListenerIPv4."\n";
	$out = $out."trapListenerPort = ".$this->trapListenerPort."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new TrapListenersVO();
	
	 $cloned->set_trap_listener_id($this->trapListenerId);
	 $cloned->set_trap_listener_ipv4($this->trapListenerIPv4);
	 $cloned->set_trap_listener_port($this->trapListenerPort);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
