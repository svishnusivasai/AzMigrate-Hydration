<?php
/**
  * This sourcecode has been generated by InMage Source Code Generator version 1.0
  * The usage of generated code is restricted to InMage Systems Inc.
  *
  * snapShots Data Access Object[DAO]
  * This class contains all database handling that is needed to 
  * permanently store and retrieve snapShots object instances. 
  * Generated Date:	Tue, 27 Nov 2007 14:01:29 +0530	
  * Pattern Version:1.0
  */
class SnapShotsDAO
{

/**
 * createValueObject-method. This method is used when the Dao class needs
 * to create new value object instance. The reason why this method exists
 * is that sometimes the programmer may want to extend also the valueObject
 * and then this method can be overrided to return extended valueObject.
 * NOTE: If you extend the valueObject class, make sure to override the
 * clone() method in it!
 */
function createValueObject() {
	return new SnapShotsVO();
 }

/**
 * getObject-method. This will create and load valueObject contents from database 
 * using given Primary-Key as identifier. This method is just a convenience method 
 * for the real load-method which accepts the valueObject as a parameter. Returned
 * valueObject will be created using the createValueObject() method.
 */
function getObject($conn,$id) {
	$valueObject = $this->createValueObject();
	$valueObject->set_id($id);
	$this->findByPrimaryKey($conn,$valueObject);
	return $valueObject;
}

/**
 * findbyPrimaryKey-method. This will load valueObject contents from database using
 * Primary-Key as identifier. Upper layer should use this so that valueObject
 * instance is created and only primary-key should be specified. Then call
 * this method to complete other persistent information. This method will
 * overwrite all other fields except primary-key and possible runtime variables.
 * If load can not find matching row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be loaded.
 *                     Primary-key field must be set for this to work properly.
 */
function findByPrimaryKey($conn, $valueObject) {

	if (!$valueObject->get_id()) {
    	//print "Can not select without Primary-Key!";
		return false;
	}

	$sql = "SELECT * FROM snapShots WHERE (id = '".$valueObject->get_id()."') "; 
	if ($this->singleQuery($conn, $sql, $valueObject)){
    	return true;
    }
    else{
    	return false;
	}
}

/**
 * findAll-method. This will read all contents from database table and
 * build an Vector containing valueObjects. Please note, that this method
 * will consume huge amounts of resources if table has lot's of rows. 
 * This should only be used when target tables have only small amounts
 * of data.
 *
 * @param conn         This method requires working database connection.
 */
function findAll($conn) {
	
	$sql = "SELECT * FROM snapShots ORDER BY id ASC ";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
}

/**
 * create-method. This will create new row in database according to supplied
 * valueObject contents. Make sure that values for all NOT NULL columns are
 * correctly specified. Also, if this table does not use automatic surrogate-keys
 * the primary-key must be specified. After INSERT command this method will 
 * read the generated primary-key back to valueObject if automatic surrogate-keys
 * were used. 
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be created.
 *                     If automatic surrogate-keys are not used the Primary-key 
 *                     field must be set for this to work properly.
 */
function create($conn, $valueObject) {
	 $count = 0;
     $sql1 = "INSERT INTO snapShots(";
     $sql3 = ") VALUES ("; 
	 
	 if ($valueObject->isset_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."id";
 	    $sql4 = $sql4."'".$valueObject->get_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_src_hostid())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."srcHostid";
 	    $sql4 = $sql4."'".$valueObject->get_src_hostid()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_virtualsnap_shotid())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."virtualsnapShotid";
 	    $sql4 = $sql4."'".$valueObject->get_virtualsnap_shotid()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_src_device_name())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."srcDeviceName";
 	    $sql4 = $sql4."'".$valueObject->get_src_device_name()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_dest_hostid())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."destHostid";
 	    $sql4 = $sql4."'".$valueObject->get_dest_hostid()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_dest_device_name())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."destDeviceName";
 	    $sql4 = $sql4."'".$valueObject->get_dest_device_name()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_pending())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."pending";
 	    $sql4 = $sql4."'".$valueObject->get_pending()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_bytes_sent())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."bytesSent";
 	    $sql4 = $sql4."'".$valueObject->get_bytes_sent()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_status())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."status";
 	    $sql4 = $sql4."'".$valueObject->get_status()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_snapshot_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."snapshotId";
 	    $sql4 = $sql4."'".$valueObject->get_snapshot_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_execution_state())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."executionState";
 	    $sql4 = $sql4."'".$valueObject->get_execution_state()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_snaptype())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."snaptype";
 	    $sql4 = $sql4."'".$valueObject->get_snaptype()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_recovery_option())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."recoveryOption";
 	    $sql4 = $sql4."'".$valueObject->get_recovery_option()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_err_message())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."errMessage";
 	    $sql4 = $sql4."'".$valueObject->get_err_message()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_actual_recovery_point())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."actualRecoveryPoint";
 	    $sql4 = $sql4."'".$valueObject->get_actual_recovery_point()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_start_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."startTime";
 	    $sql4 = $sql4."'".$valueObject->get_start_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_end_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."endTime";
 	    $sql4 = $sql4."'".$valueObject->get_end_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_is_mounted())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."isMounted";
 	    $sql4 = $sql4."'".$valueObject->get_is_mounted()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_delete_log())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."deleteLog";
 	    $sql4 = $sql4."'".$valueObject->get_delete_log()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_read_write())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."readWrite";
 	    $sql4 = $sql4."'".$valueObject->get_read_write()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_data_log_path())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."dataLogPath";
 	    $sql4 = $sql4."'".$valueObject->get_data_log_path()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_last_update_time())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."lastUpdateTime";
 	    $sql4 = $sql4."'".$valueObject->get_last_update_time()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_recovery_type())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."recoveryType";
 	    $sql4 = $sql4."'".$valueObject->get_recovery_type()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_mounted_on())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."mountedOn";
 	    $sql4 = $sql4."'".$valueObject->get_mounted_on()."'"; 	
 		$count++;
 	 }
	 
	$sql = $sql1 . $sql2. $sql3. $sql4.")";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * update-method. This method will save the current state of valueObject to database.
 * Save can not be used to create new instances in database, so upper layer must
 * make sure that the primary-key is correctly specified. Primary-key will indicate
 * which instance is going to be updated in database. If save can not find matching 
 * row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be saved.
 *                     Primary-key field must be set for this to work properly.
 */
function update($conn, $valueObject) {
	$count = 0;
	$sql = "UPDATE snapShots SET ";
	if ($valueObject->isset_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."id = '".$valueObject->get_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_src_hostid())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."srcHostid = '".$valueObject->get_src_hostid()."'";
		$count++;
	}
	
	if ($valueObject->isset_virtualsnap_shotid())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."virtualsnapShotid = '".$valueObject->get_virtualsnap_shotid()."'";
		$count++;
	}
	
	if ($valueObject->isset_src_device_name())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."srcDeviceName = '".$valueObject->get_src_device_name()."'";
		$count++;
	}
	
	if ($valueObject->isset_dest_hostid())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."destHostid = '".$valueObject->get_dest_hostid()."'";
		$count++;
	}
	
	if ($valueObject->isset_dest_device_name())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."destDeviceName = '".$valueObject->get_dest_device_name()."'";
		$count++;
	}
	
	if ($valueObject->isset_pending())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."pending = '".$valueObject->get_pending()."'";
		$count++;
	}
	
	if ($valueObject->isset_bytes_sent())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."bytesSent = '".$valueObject->get_bytes_sent()."'";
		$count++;
	}
	
	if ($valueObject->isset_status())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."status = '".$valueObject->get_status()."'";
		$count++;
	}
	
	if ($valueObject->isset_snapshot_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."snapshotId = '".$valueObject->get_snapshot_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_execution_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."executionState = '".$valueObject->get_execution_state()."'";
		$count++;
	}
	
	if ($valueObject->isset_snaptype())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."snaptype = '".$valueObject->get_snaptype()."'";
		$count++;
	}
	
	if ($valueObject->isset_recovery_option())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."recoveryOption = '".$valueObject->get_recovery_option()."'";
		$count++;
	}
	
	if ($valueObject->isset_err_message())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."errMessage = '".$valueObject->get_err_message()."'";
		$count++;
	}
	
	if ($valueObject->isset_actual_recovery_point())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."actualRecoveryPoint = '".$valueObject->get_actual_recovery_point()."'";
		$count++;
	}
	
	if ($valueObject->isset_start_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."startTime = '".$valueObject->get_start_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_end_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."endTime = '".$valueObject->get_end_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_is_mounted())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."isMounted = '".$valueObject->get_is_mounted()."'";
		$count++;
	}
	
	if ($valueObject->isset_delete_log())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."deleteLog = '".$valueObject->get_delete_log()."'";
		$count++;
	}
	
	if ($valueObject->isset_read_write())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."readWrite = '".$valueObject->get_read_write()."'";
		$count++;
	}
	
	if ($valueObject->isset_data_log_path())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."dataLogPath = '".$valueObject->get_data_log_path()."'";
		$count++;
	}
	
	if ($valueObject->isset_last_update_time())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."lastUpdateTime = '".$valueObject->get_last_update_time()."'";
		$count++;
	}
	
	if ($valueObject->isset_recovery_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."recoveryType = '".$valueObject->get_recovery_type()."'";
		$count++;
	}
	
	if ($valueObject->isset_mounted_on())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."mountedOn = '".$valueObject->get_mounted_on()."'";
		$count++;
	}
	
	$sql = $sql." WHERE (id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}

/**
 * delete-method. This method will remove the information from database as identified by
 * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
 * be restored by calling save. Restoring can only be done using create method but if 
 * database is using automatic surrogate-keys, the resulting object will have different 
 * primary-key than what it was in the deleted object. If delete can not find matching row,
 * NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be deleted.
 *                     Primary-key field must be set for this to work properly.
 */
function delete($conn, $valueObject) {
	
	if (!$valueObject->get_id()) {
         //print "Can not delete without Primary-Key!";
         return false;
    }
	$sql = "DELETE FROM snapShots WHERE (id = '".$valueObject->get_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
         //print "PrimaryKey Error when updating DB!";
          return false;
    }
 	return true;
}

/**
 * deleteAll-method. This method will remove all information from the table that matches
 * this DAO and ValueObject couple. This should be the most efficient way to clear table.
 * Once deleteAll has been called, no valueObject that has been created before can be 
 * restored by calling save. Restoring can only be done using create method but if database 
 * is using automatic surrogate-keys, the resulting object will have different primary-key 
 * than what it was in the deleted object. (Note, the implementation of this method should
 * be different with different DB backends.)
 *
 * @param conn         This method requires working database connection.
 */
function deleteAll($conn) {
	$sql = "DELETE FROM snapShots";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * coutAll-method. This method will return the number of all rows from table that matches
 * this Dao. The implementation will simply execute "select count(primarykey) from table".
 * If table is empty, the return value is 0. This method should be used before calling
 * findAll, to make sure table has not too many rows.
 *
 * @param conn         This method requires working database connection.
 */
function countAll($conn) {
	$sql = "SELECT count(*) FROM snapShots";
	$allRows = 0;
	$result = $conn->execute($sql);
    if ($row = $conn->nextRow($result))
    	$allRows = $row[0];
    return $allRows;
}

/** 
 * searchMatching-Method. This method provides searching capability to 
 * get matching valueObjects from database. It works by searching all 
 * objects that match permanent instance variables of given object.
 * Upper layer should use this by setting some parameters in valueObject
 * and then  call searchMatching. The result will be 0-N objects in vector, 
 * all matching those criteria you specified. Those instance-variables that
 * have NULL values are excluded in search-criteria.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance where search will be based.
 *                     Primary-key field should not be set.
 */
function searchMatching($conn, $valueObject) {
	$first = true;
    $sql = "SELECT * FROM snapShots WHERE 1=1 ";
	
	if ($valueObject->get_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND id LIKE '".$valueObject->get_id()."%' ";
    }
	
	if ($valueObject->get_src_hostid() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND srcHostid LIKE '".$valueObject->get_src_hostid()."%' ";
    }
	
	if ($valueObject->get_virtualsnap_shotid() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND virtualsnapShotid LIKE '".$valueObject->get_virtualsnap_shotid()."%' ";
    }
	
	if ($valueObject->get_src_device_name() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND srcDeviceName LIKE '".$valueObject->get_src_device_name()."%' ";
    }
	
	if ($valueObject->get_dest_hostid() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND destHostid LIKE '".$valueObject->get_dest_hostid()."%' ";
    }
	
	if ($valueObject->get_dest_device_name() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND destDeviceName LIKE '".$valueObject->get_dest_device_name()."%' ";
    }
	
	if ($valueObject->get_pending() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND pending LIKE '".$valueObject->get_pending()."%' ";
    }
	
	if ($valueObject->get_bytes_sent() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND bytesSent LIKE '".$valueObject->get_bytes_sent()."%' ";
    }
	
	if ($valueObject->get_status() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND status LIKE '".$valueObject->get_status()."%' ";
    }
	
	if ($valueObject->get_snapshot_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND snapshotId LIKE '".$valueObject->get_snapshot_id()."%' ";
    }
	
	if ($valueObject->get_execution_state() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND executionState LIKE '".$valueObject->get_execution_state()."%' ";
    }
	
	if ($valueObject->get_snaptype() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND snaptype LIKE '".$valueObject->get_snaptype()."%' ";
    }
	
	if ($valueObject->get_recovery_option() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND recoveryOption LIKE '".$valueObject->get_recovery_option()."%' ";
    }
	
	if ($valueObject->get_err_message() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND errMessage LIKE '".$valueObject->get_err_message()."%' ";
    }
	
	if ($valueObject->get_actual_recovery_point() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND actualRecoveryPoint LIKE '".$valueObject->get_actual_recovery_point()."%' ";
    }
	
	if ($valueObject->get_start_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND startTime LIKE '".$valueObject->get_start_time()."%' ";
    }
	
	if ($valueObject->get_end_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND endTime LIKE '".$valueObject->get_end_time()."%' ";
    }
	
	if ($valueObject->get_is_mounted() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND isMounted LIKE '".$valueObject->get_is_mounted()."%' ";
    }
	
	if ($valueObject->get_delete_log() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND deleteLog LIKE '".$valueObject->get_delete_log()."%' ";
    }
	
	if ($valueObject->get_read_write() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND readWrite LIKE '".$valueObject->get_read_write()."%' ";
    }
	
	if ($valueObject->get_data_log_path() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND dataLogPath LIKE '".$valueObject->get_data_log_path()."%' ";
    }
	
	if ($valueObject->get_last_update_time() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND lastUpdateTime LIKE '".$valueObject->get_last_update_time()."%' ";
    }
	
	if ($valueObject->get_recovery_type() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND recoveryType LIKE '".$valueObject->get_recovery_type()."%' ";
    }
	
	if ($valueObject->get_mounted_on() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND mountedOn LIKE '".$valueObject->get_mounted_on()."%' ";
    }
	
	$sql = $sql." ORDER BY ";
	$sql = $sql."id ASC ";
    // Prevent accidential full table results.
    // Use findAll if all rows must be returned.
    if ($first)
    	return array();

    $searchResults = $this->listQuery($conn, $sql);
    return $searchResults;
}

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return only one row. The resultset will be converted
 * to valueObject. If no rows were found, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 * @param valueObject  Class-instance where resulting data will be stored.
 */
 function singleQuery($conn, $sql, $valueObject) {
 	$result = $conn->execute($sql);
	if ($row = $conn->nextRow($result)) {
		$valueObject->setAry($row);
     } else {
        //print " Object Not Found!";
     	return false;
     }
     return true;
 }

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. The resultset will be converted
 * to the List of valueObjects. If no rows were found, an empty List will be returned.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQuery($conn, $sql) {
	$searchResults = array();
    $result = $conn->execute($sql);
    while ($row = $conn->nextRow($result)) {
    	$temp = $this->createValueObject();
    	$temp->setAry($row);
        array_push($searchResults, $temp);
	}
	return $searchResults;
}
/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. However the results will be unstructured
 * i.e. Not formatted as VO Objects 
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQueryResultset($conn,$sql)
{
	$searchResults = array();
    $result = $conn->execute($sql);
	while ($row = $conn->nextRow($result)) {
        array_push($searchResults, $row);
	}
	return $searchResults;
}

/**
 * databaseUpdate-method. This method is a helper method for internal use. It will execute
 * all database handling that will change the information in tables. SELECT queries will
 * not be executed here however. The return value indicates how many rows were affected.
 * This method will also make sure that if cache is used, it will reset when data changes.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 */
function databaseUpdate($conn, $sql) {
	$result = $conn->execute($sql);
	return $result;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPDAO-1.9";
 }

}
?>
