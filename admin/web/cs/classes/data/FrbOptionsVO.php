<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * frbOptions Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:26 +0530	
 * Pattern Version:1.0
 */

class FrbOptionsVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $port;
public $tempDir;
public $recursive;
public $copyWholeFiles;
public $backupExisting;
public $backupDirectory;
public $backupSuffix;
public $blockSize;
public $compress;
public $updateOnly;
public $updateExistingOnly;
public $ignoreExisting;
public $ignoreTimestamp;
public $alwaysChecksum;
public $checkSizeOnly;
public $modifyWindow;
public $excludePattern;
public $includePattern;
public $deleteNonExisting;
public $deleteExcluded;
public $deleteAfter;
public $keepPartial;
public $retainSymlinks;
public $copyLinkReferents;
public $copyUnsafeLinks;
public $copySafeLinks;
public $preservePermissions;
public $preserveOwner;
public $preserveGroup;
public $preserveDevices;
public $preserveTimes;
public $dontCrossFileSystem;
public $bwLimit;
public $ioTimeout;
public $printStats;
public $progress;
public $verboseLevel;
public $logFileFormat;
public $catchAll;
public $directoryContents;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function FrbOptionsVO(){

}

/*
	function FrbOptionsVO(idIn){
 this->id=$idIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->port="0";
	$this->recursive="0";
	$this->copyWholeFiles="0";
	$this->backupExisting="0";
	$this->blockSize="0";
	$this->compress="0";
	$this->updateOnly="0";
	$this->updateExistingOnly="0";
	$this->ignoreExisting="0";
	$this->ignoreTimestamp="0";
	$this->alwaysChecksum="0";
	$this->checkSizeOnly="0";
	$this->modifyWindow="0";
	$this->deleteNonExisting="0";
	$this->deleteExcluded="0";
	$this->deleteAfter="0";
	$this->keepPartial="0";
	$this->retainSymlinks="0";
	$this->copyLinkReferents="0";
	$this->copyUnsafeLinks="0";
	$this->copySafeLinks="0";
	$this->preservePermissions="0";
	$this->preserveOwner="0";
	$this->preserveGroup="0";
	$this->preserveDevices="0";
	$this->preserveTimes="0";
	$this->dontCrossFileSystem="0";
	$this->bwLimit="0";
	$this->ioTimeout="0";
	$this->printStats="0";
	$this->progress="0";
	$this->verboseLevel="0";
	$this->directoryContents="directory_itself";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_port() {
	return $this->port;
}
function set_port($portIn) { 
	$this->port=$portIn;
}

function isset_port() {
	return isset($this->port);
}


function get_temp_dir() {
	return $this->tempDir;
}
function set_temp_dir($tempDirIn) { 
	$this->tempDir=$tempDirIn;
}

function isset_temp_dir() {
	return isset($this->tempDir);
}


function get_recursive() {
	return $this->recursive;
}
function set_recursive($recursiveIn) { 
	$this->recursive=$recursiveIn;
}

function isset_recursive() {
	return isset($this->recursive);
}


function get_copy_whole_files() {
	return $this->copyWholeFiles;
}
function set_copy_whole_files($copyWholeFilesIn) { 
	$this->copyWholeFiles=$copyWholeFilesIn;
}

function isset_copy_whole_files() {
	return isset($this->copyWholeFiles);
}


function get_backup_existing() {
	return $this->backupExisting;
}
function set_backup_existing($backupExistingIn) { 
	$this->backupExisting=$backupExistingIn;
}

function isset_backup_existing() {
	return isset($this->backupExisting);
}


function get_backup_directory() {
	return $this->backupDirectory;
}
function set_backup_directory($backupDirectoryIn) { 
	$this->backupDirectory=$backupDirectoryIn;
}

function isset_backup_directory() {
	return isset($this->backupDirectory);
}


function get_backup_suffix() {
	return $this->backupSuffix;
}
function set_backup_suffix($backupSuffixIn) { 
	$this->backupSuffix=$backupSuffixIn;
}

function isset_backup_suffix() {
	return isset($this->backupSuffix);
}


function get_block_size() {
	return $this->blockSize;
}
function set_block_size($blockSizeIn) { 
	$this->blockSize=$blockSizeIn;
}

function isset_block_size() {
	return isset($this->blockSize);
}


function get_compress() {
	return $this->compress;
}
function set_compress($compressIn) { 
	$this->compress=$compressIn;
}

function isset_compress() {
	return isset($this->compress);
}


function get_update_only() {
	return $this->updateOnly;
}
function set_update_only($updateOnlyIn) { 
	$this->updateOnly=$updateOnlyIn;
}

function isset_update_only() {
	return isset($this->updateOnly);
}


function get_update_existing_only() {
	return $this->updateExistingOnly;
}
function set_update_existing_only($updateExistingOnlyIn) { 
	$this->updateExistingOnly=$updateExistingOnlyIn;
}

function isset_update_existing_only() {
	return isset($this->updateExistingOnly);
}


function get_ignore_existing() {
	return $this->ignoreExisting;
}
function set_ignore_existing($ignoreExistingIn) { 
	$this->ignoreExisting=$ignoreExistingIn;
}

function isset_ignore_existing() {
	return isset($this->ignoreExisting);
}


function get_ignore_timestamp() {
	return $this->ignoreTimestamp;
}
function set_ignore_timestamp($ignoreTimestampIn) { 
	$this->ignoreTimestamp=$ignoreTimestampIn;
}

function isset_ignore_timestamp() {
	return isset($this->ignoreTimestamp);
}


function get_always_checksum() {
	return $this->alwaysChecksum;
}
function set_always_checksum($alwaysChecksumIn) { 
	$this->alwaysChecksum=$alwaysChecksumIn;
}

function isset_always_checksum() {
	return isset($this->alwaysChecksum);
}


function get_check_size_only() {
	return $this->checkSizeOnly;
}
function set_check_size_only($checkSizeOnlyIn) { 
	$this->checkSizeOnly=$checkSizeOnlyIn;
}

function isset_check_size_only() {
	return isset($this->checkSizeOnly);
}


function get_modify_window() {
	return $this->modifyWindow;
}
function set_modify_window($modifyWindowIn) { 
	$this->modifyWindow=$modifyWindowIn;
}

function isset_modify_window() {
	return isset($this->modifyWindow);
}


function get_exclude_pattern() {
	return $this->excludePattern;
}
function set_exclude_pattern($excludePatternIn) { 
	$this->excludePattern=$excludePatternIn;
}

function isset_exclude_pattern() {
	return isset($this->excludePattern);
}


function get_include_pattern() {
	return $this->includePattern;
}
function set_include_pattern($includePatternIn) { 
	$this->includePattern=$includePatternIn;
}

function isset_include_pattern() {
	return isset($this->includePattern);
}


function get_delete_non_existing() {
	return $this->deleteNonExisting;
}
function set_delete_non_existing($deleteNonExistingIn) { 
	$this->deleteNonExisting=$deleteNonExistingIn;
}

function isset_delete_non_existing() {
	return isset($this->deleteNonExisting);
}


function get_delete_excluded() {
	return $this->deleteExcluded;
}
function set_delete_excluded($deleteExcludedIn) { 
	$this->deleteExcluded=$deleteExcludedIn;
}

function isset_delete_excluded() {
	return isset($this->deleteExcluded);
}


function get_delete_after() {
	return $this->deleteAfter;
}
function set_delete_after($deleteAfterIn) { 
	$this->deleteAfter=$deleteAfterIn;
}

function isset_delete_after() {
	return isset($this->deleteAfter);
}


function get_keep_partial() {
	return $this->keepPartial;
}
function set_keep_partial($keepPartialIn) { 
	$this->keepPartial=$keepPartialIn;
}

function isset_keep_partial() {
	return isset($this->keepPartial);
}


function get_retain_symlinks() {
	return $this->retainSymlinks;
}
function set_retain_symlinks($retainSymlinksIn) { 
	$this->retainSymlinks=$retainSymlinksIn;
}

function isset_retain_symlinks() {
	return isset($this->retainSymlinks);
}


function get_copy_link_referents() {
	return $this->copyLinkReferents;
}
function set_copy_link_referents($copyLinkReferentsIn) { 
	$this->copyLinkReferents=$copyLinkReferentsIn;
}

function isset_copy_link_referents() {
	return isset($this->copyLinkReferents);
}


function get_copy_unsafe_links() {
	return $this->copyUnsafeLinks;
}
function set_copy_unsafe_links($copyUnsafeLinksIn) { 
	$this->copyUnsafeLinks=$copyUnsafeLinksIn;
}

function isset_copy_unsafe_links() {
	return isset($this->copyUnsafeLinks);
}


function get_copy_safe_links() {
	return $this->copySafeLinks;
}
function set_copy_safe_links($copySafeLinksIn) { 
	$this->copySafeLinks=$copySafeLinksIn;
}

function isset_copy_safe_links() {
	return isset($this->copySafeLinks);
}


function get_preserve_permissions() {
	return $this->preservePermissions;
}
function set_preserve_permissions($preservePermissionsIn) { 
	$this->preservePermissions=$preservePermissionsIn;
}

function isset_preserve_permissions() {
	return isset($this->preservePermissions);
}


function get_preserve_owner() {
	return $this->preserveOwner;
}
function set_preserve_owner($preserveOwnerIn) { 
	$this->preserveOwner=$preserveOwnerIn;
}

function isset_preserve_owner() {
	return isset($this->preserveOwner);
}


function get_preserve_group() {
	return $this->preserveGroup;
}
function set_preserve_group($preserveGroupIn) { 
	$this->preserveGroup=$preserveGroupIn;
}

function isset_preserve_group() {
	return isset($this->preserveGroup);
}


function get_preserve_devices() {
	return $this->preserveDevices;
}
function set_preserve_devices($preserveDevicesIn) { 
	$this->preserveDevices=$preserveDevicesIn;
}

function isset_preserve_devices() {
	return isset($this->preserveDevices);
}


function get_preserve_times() {
	return $this->preserveTimes;
}
function set_preserve_times($preserveTimesIn) { 
	$this->preserveTimes=$preserveTimesIn;
}

function isset_preserve_times() {
	return isset($this->preserveTimes);
}


function get_dont_cross_file_system() {
	return $this->dontCrossFileSystem;
}
function set_dont_cross_file_system($dontCrossFileSystemIn) { 
	$this->dontCrossFileSystem=$dontCrossFileSystemIn;
}

function isset_dont_cross_file_system() {
	return isset($this->dontCrossFileSystem);
}


function get_bw_limit() {
	return $this->bwLimit;
}
function set_bw_limit($bwLimitIn) { 
	$this->bwLimit=$bwLimitIn;
}

function isset_bw_limit() {
	return isset($this->bwLimit);
}


function get_io_timeout() {
	return $this->ioTimeout;
}
function set_io_timeout($ioTimeoutIn) { 
	$this->ioTimeout=$ioTimeoutIn;
}

function isset_io_timeout() {
	return isset($this->ioTimeout);
}


function get_print_stats() {
	return $this->printStats;
}
function set_print_stats($printStatsIn) { 
	$this->printStats=$printStatsIn;
}

function isset_print_stats() {
	return isset($this->printStats);
}


function get_progress() {
	return $this->progress;
}
function set_progress($progressIn) { 
	$this->progress=$progressIn;
}

function isset_progress() {
	return isset($this->progress);
}


function get_verbose_level() {
	return $this->verboseLevel;
}
function set_verbose_level($verboseLevelIn) { 
	$this->verboseLevel=$verboseLevelIn;
}

function isset_verbose_level() {
	return isset($this->verboseLevel);
}


function get_log_file_format() {
	return $this->logFileFormat;
}
function set_log_file_format($logFileFormatIn) { 
	$this->logFileFormat=$logFileFormatIn;
}

function isset_log_file_format() {
	return isset($this->logFileFormat);
}


function get_catch_all() {
	return $this->catchAll;
}
function set_catch_all($catchAllIn) { 
	$this->catchAll=$catchAllIn;
}

function isset_catch_all() {
	return isset($this->catchAll);
}


function get_directory_contents() {
	return $this->directoryContents;
}
function set_directory_contents($directoryContentsIn) { 
	$this->directoryContents=$directoryContentsIn;
}

function isset_directory_contents() {
	return isset($this->directoryContents);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$portIn,$tempDirIn,$recursiveIn,$copyWholeFilesIn,$backupExistingIn,$backupDirectoryIn,$backupSuffixIn,$blockSizeIn,$compressIn,$updateOnlyIn,$updateExistingOnlyIn,$ignoreExistingIn,$ignoreTimestampIn,$alwaysChecksumIn,$checkSizeOnlyIn,$modifyWindowIn,$excludePatternIn,$includePatternIn,$deleteNonExistingIn,$deleteExcludedIn,$deleteAfterIn,$keepPartialIn,$retainSymlinksIn,$copyLinkReferentsIn,$copyUnsafeLinksIn,$copySafeLinksIn,$preservePermissionsIn,$preserveOwnerIn,$preserveGroupIn,$preserveDevicesIn,$preserveTimesIn,$dontCrossFileSystemIn,$bwLimitIn,$ioTimeoutIn,$printStatsIn,$progressIn,$verboseLevelIn,$logFileFormatIn,$catchAllIn,$directoryContentsIn){
	$this->id=$idIn;
	$this->port=$portIn;
	$this->tempDir=$tempDirIn;
	$this->recursive=$recursiveIn;
	$this->copyWholeFiles=$copyWholeFilesIn;
	$this->backupExisting=$backupExistingIn;
	$this->backupDirectory=$backupDirectoryIn;
	$this->backupSuffix=$backupSuffixIn;
	$this->blockSize=$blockSizeIn;
	$this->compress=$compressIn;
	$this->updateOnly=$updateOnlyIn;
	$this->updateExistingOnly=$updateExistingOnlyIn;
	$this->ignoreExisting=$ignoreExistingIn;
	$this->ignoreTimestamp=$ignoreTimestampIn;
	$this->alwaysChecksum=$alwaysChecksumIn;
	$this->checkSizeOnly=$checkSizeOnlyIn;
	$this->modifyWindow=$modifyWindowIn;
	$this->excludePattern=$excludePatternIn;
	$this->includePattern=$includePatternIn;
	$this->deleteNonExisting=$deleteNonExistingIn;
	$this->deleteExcluded=$deleteExcludedIn;
	$this->deleteAfter=$deleteAfterIn;
	$this->keepPartial=$keepPartialIn;
	$this->retainSymlinks=$retainSymlinksIn;
	$this->copyLinkReferents=$copyLinkReferentsIn;
	$this->copyUnsafeLinks=$copyUnsafeLinksIn;
	$this->copySafeLinks=$copySafeLinksIn;
	$this->preservePermissions=$preservePermissionsIn;
	$this->preserveOwner=$preserveOwnerIn;
	$this->preserveGroup=$preserveGroupIn;
	$this->preserveDevices=$preserveDevicesIn;
	$this->preserveTimes=$preserveTimesIn;
	$this->dontCrossFileSystem=$dontCrossFileSystemIn;
	$this->bwLimit=$bwLimitIn;
	$this->ioTimeout=$ioTimeoutIn;
	$this->printStats=$printStatsIn;
	$this->progress=$progressIn;
	$this->verboseLevel=$verboseLevelIn;
	$this->logFileFormat=$logFileFormatIn;
	$this->catchAll=$catchAllIn;
	$this->directoryContents=$directoryContentsIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->port=$ary["port"];
	$this->tempDir=$ary["tempDir"];
	$this->recursive=$ary["recursive"];
	$this->copyWholeFiles=$ary["copyWholeFiles"];
	$this->backupExisting=$ary["backupExisting"];
	$this->backupDirectory=$ary["backupDirectory"];
	$this->backupSuffix=$ary["backupSuffix"];
	$this->blockSize=$ary["blockSize"];
	$this->compress=$ary["compress"];
	$this->updateOnly=$ary["updateOnly"];
	$this->updateExistingOnly=$ary["updateExistingOnly"];
	$this->ignoreExisting=$ary["ignoreExisting"];
	$this->ignoreTimestamp=$ary["ignoreTimestamp"];
	$this->alwaysChecksum=$ary["alwaysChecksum"];
	$this->checkSizeOnly=$ary["checkSizeOnly"];
	$this->modifyWindow=$ary["modifyWindow"];
	$this->excludePattern=$ary["excludePattern"];
	$this->includePattern=$ary["includePattern"];
	$this->deleteNonExisting=$ary["deleteNonExisting"];
	$this->deleteExcluded=$ary["deleteExcluded"];
	$this->deleteAfter=$ary["deleteAfter"];
	$this->keepPartial=$ary["keepPartial"];
	$this->retainSymlinks=$ary["retainSymlinks"];
	$this->copyLinkReferents=$ary["copyLinkReferents"];
	$this->copyUnsafeLinks=$ary["copyUnsafeLinks"];
	$this->copySafeLinks=$ary["copySafeLinks"];
	$this->preservePermissions=$ary["preservePermissions"];
	$this->preserveOwner=$ary["preserveOwner"];
	$this->preserveGroup=$ary["preserveGroup"];
	$this->preserveDevices=$ary["preserveDevices"];
	$this->preserveTimes=$ary["preserveTimes"];
	$this->dontCrossFileSystem=$ary["dontCrossFileSystem"];
	$this->bwLimit=$ary["bwLimit"];
	$this->ioTimeout=$ary["ioTimeout"];
	$this->printStats=$ary["printStats"];
	$this->progress=$ary["progress"];
	$this->verboseLevel=$ary["verboseLevel"];
	$this->logFileFormat=$ary["logFileFormat"];
	$this->catchAll=$ary["catchAll"];
	$this->directoryContents=$ary["directoryContents"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["port"]=$this->port;
		$oAry["tempDir"]=$this->tempDir;
		$oAry["recursive"]=$this->recursive;
		$oAry["copyWholeFiles"]=$this->copyWholeFiles;
		$oAry["backupExisting"]=$this->backupExisting;
		$oAry["backupDirectory"]=$this->backupDirectory;
		$oAry["backupSuffix"]=$this->backupSuffix;
		$oAry["blockSize"]=$this->blockSize;
		$oAry["compress"]=$this->compress;
		$oAry["updateOnly"]=$this->updateOnly;
		$oAry["updateExistingOnly"]=$this->updateExistingOnly;
		$oAry["ignoreExisting"]=$this->ignoreExisting;
		$oAry["ignoreTimestamp"]=$this->ignoreTimestamp;
		$oAry["alwaysChecksum"]=$this->alwaysChecksum;
		$oAry["checkSizeOnly"]=$this->checkSizeOnly;
		$oAry["modifyWindow"]=$this->modifyWindow;
		$oAry["excludePattern"]=$this->excludePattern;
		$oAry["includePattern"]=$this->includePattern;
		$oAry["deleteNonExisting"]=$this->deleteNonExisting;
		$oAry["deleteExcluded"]=$this->deleteExcluded;
		$oAry["deleteAfter"]=$this->deleteAfter;
		$oAry["keepPartial"]=$this->keepPartial;
		$oAry["retainSymlinks"]=$this->retainSymlinks;
		$oAry["copyLinkReferents"]=$this->copyLinkReferents;
		$oAry["copyUnsafeLinks"]=$this->copyUnsafeLinks;
		$oAry["copySafeLinks"]=$this->copySafeLinks;
		$oAry["preservePermissions"]=$this->preservePermissions;
		$oAry["preserveOwner"]=$this->preserveOwner;
		$oAry["preserveGroup"]=$this->preserveGroup;
		$oAry["preserveDevices"]=$this->preserveDevices;
		$oAry["preserveTimes"]=$this->preserveTimes;
		$oAry["dontCrossFileSystem"]=$this->dontCrossFileSystem;
		$oAry["bwLimit"]=$this->bwLimit;
		$oAry["ioTimeout"]=$this->ioTimeout;
		$oAry["printStats"]=$this->printStats;
		$oAry["progress"]=$this->progress;
		$oAry["verboseLevel"]=$this->verboseLevel;
		$oAry["logFileFormat"]=$this->logFileFormat;
		$oAry["catchAll"]=$this->catchAll;
		$oAry["directoryContents"]=$this->directoryContents;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_port() != $this->port) {
		return(false);
	}
	if ($valueObject->get_temp_dir() != $this->tempDir) {
		return(false);
	}
	if ($valueObject->get_recursive() != $this->recursive) {
		return(false);
	}
	if ($valueObject->get_copy_whole_files() != $this->copyWholeFiles) {
		return(false);
	}
	if ($valueObject->get_backup_existing() != $this->backupExisting) {
		return(false);
	}
	if ($valueObject->get_backup_directory() != $this->backupDirectory) {
		return(false);
	}
	if ($valueObject->get_backup_suffix() != $this->backupSuffix) {
		return(false);
	}
	if ($valueObject->get_block_size() != $this->blockSize) {
		return(false);
	}
	if ($valueObject->get_compress() != $this->compress) {
		return(false);
	}
	if ($valueObject->get_update_only() != $this->updateOnly) {
		return(false);
	}
	if ($valueObject->get_update_existing_only() != $this->updateExistingOnly) {
		return(false);
	}
	if ($valueObject->get_ignore_existing() != $this->ignoreExisting) {
		return(false);
	}
	if ($valueObject->get_ignore_timestamp() != $this->ignoreTimestamp) {
		return(false);
	}
	if ($valueObject->get_always_checksum() != $this->alwaysChecksum) {
		return(false);
	}
	if ($valueObject->get_check_size_only() != $this->checkSizeOnly) {
		return(false);
	}
	if ($valueObject->get_modify_window() != $this->modifyWindow) {
		return(false);
	}
	if ($valueObject->get_exclude_pattern() != $this->excludePattern) {
		return(false);
	}
	if ($valueObject->get_include_pattern() != $this->includePattern) {
		return(false);
	}
	if ($valueObject->get_delete_non_existing() != $this->deleteNonExisting) {
		return(false);
	}
	if ($valueObject->get_delete_excluded() != $this->deleteExcluded) {
		return(false);
	}
	if ($valueObject->get_delete_after() != $this->deleteAfter) {
		return(false);
	}
	if ($valueObject->get_keep_partial() != $this->keepPartial) {
		return(false);
	}
	if ($valueObject->get_retain_symlinks() != $this->retainSymlinks) {
		return(false);
	}
	if ($valueObject->get_copy_link_referents() != $this->copyLinkReferents) {
		return(false);
	}
	if ($valueObject->get_copy_unsafe_links() != $this->copyUnsafeLinks) {
		return(false);
	}
	if ($valueObject->get_copy_safe_links() != $this->copySafeLinks) {
		return(false);
	}
	if ($valueObject->get_preserve_permissions() != $this->preservePermissions) {
		return(false);
	}
	if ($valueObject->get_preserve_owner() != $this->preserveOwner) {
		return(false);
	}
	if ($valueObject->get_preserve_group() != $this->preserveGroup) {
		return(false);
	}
	if ($valueObject->get_preserve_devices() != $this->preserveDevices) {
		return(false);
	}
	if ($valueObject->get_preserve_times() != $this->preserveTimes) {
		return(false);
	}
	if ($valueObject->get_dont_cross_file_system() != $this->dontCrossFileSystem) {
		return(false);
	}
	if ($valueObject->get_bw_limit() != $this->bwLimit) {
		return(false);
	}
	if ($valueObject->get_io_timeout() != $this->ioTimeout) {
		return(false);
	}
	if ($valueObject->get_print_stats() != $this->printStats) {
		return(false);
	}
	if ($valueObject->get_progress() != $this->progress) {
		return(false);
	}
	if ($valueObject->get_verbose_level() != $this->verboseLevel) {
		return(false);
	}
	if ($valueObject->get_log_file_format() != $this->logFileFormat) {
		return(false);
	}
	if ($valueObject->get_catch_all() != $this->catchAll) {
		return(false);
	}
	if ($valueObject->get_directory_contents() != $this->directoryContents) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass FrbOptionsVO, mapping to table frbOptions\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."port = ".$this->port."\n";
	$out = $out."tempDir = ".$this->tempDir."\n";
	$out = $out."recursive = ".$this->recursive."\n";
	$out = $out."copyWholeFiles = ".$this->copyWholeFiles."\n";
	$out = $out."backupExisting = ".$this->backupExisting."\n";
	$out = $out."backupDirectory = ".$this->backupDirectory."\n";
	$out = $out."backupSuffix = ".$this->backupSuffix."\n";
	$out = $out."blockSize = ".$this->blockSize."\n";
	$out = $out."compress = ".$this->compress."\n";
	$out = $out."updateOnly = ".$this->updateOnly."\n";
	$out = $out."updateExistingOnly = ".$this->updateExistingOnly."\n";
	$out = $out."ignoreExisting = ".$this->ignoreExisting."\n";
	$out = $out."ignoreTimestamp = ".$this->ignoreTimestamp."\n";
	$out = $out."alwaysChecksum = ".$this->alwaysChecksum."\n";
	$out = $out."checkSizeOnly = ".$this->checkSizeOnly."\n";
	$out = $out."modifyWindow = ".$this->modifyWindow."\n";
	$out = $out."excludePattern = ".$this->excludePattern."\n";
	$out = $out."includePattern = ".$this->includePattern."\n";
	$out = $out."deleteNonExisting = ".$this->deleteNonExisting."\n";
	$out = $out."deleteExcluded = ".$this->deleteExcluded."\n";
	$out = $out."deleteAfter = ".$this->deleteAfter."\n";
	$out = $out."keepPartial = ".$this->keepPartial."\n";
	$out = $out."retainSymlinks = ".$this->retainSymlinks."\n";
	$out = $out."copyLinkReferents = ".$this->copyLinkReferents."\n";
	$out = $out."copyUnsafeLinks = ".$this->copyUnsafeLinks."\n";
	$out = $out."copySafeLinks = ".$this->copySafeLinks."\n";
	$out = $out."preservePermissions = ".$this->preservePermissions."\n";
	$out = $out."preserveOwner = ".$this->preserveOwner."\n";
	$out = $out."preserveGroup = ".$this->preserveGroup."\n";
	$out = $out."preserveDevices = ".$this->preserveDevices."\n";
	$out = $out."preserveTimes = ".$this->preserveTimes."\n";
	$out = $out."dontCrossFileSystem = ".$this->dontCrossFileSystem."\n";
	$out = $out."bwLimit = ".$this->bwLimit."\n";
	$out = $out."ioTimeout = ".$this->ioTimeout."\n";
	$out = $out."printStats = ".$this->printStats."\n";
	$out = $out."progress = ".$this->progress."\n";
	$out = $out."verboseLevel = ".$this->verboseLevel."\n";
	$out = $out."logFileFormat = ".$this->logFileFormat."\n";
	$out = $out."catchAll = ".$this->catchAll."\n";
	$out = $out."directoryContents = ".$this->directoryContents."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new FrbOptionsVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_port($this->port);
	 $cloned->set_temp_dir($this->tempDir);
	 $cloned->set_recursive($this->recursive);
	 $cloned->set_copy_whole_files($this->copyWholeFiles);
	 $cloned->set_backup_existing($this->backupExisting);
	 $cloned->set_backup_directory($this->backupDirectory);
	 $cloned->set_backup_suffix($this->backupSuffix);
	 $cloned->set_block_size($this->blockSize);
	 $cloned->set_compress($this->compress);
	 $cloned->set_update_only($this->updateOnly);
	 $cloned->set_update_existing_only($this->updateExistingOnly);
	 $cloned->set_ignore_existing($this->ignoreExisting);
	 $cloned->set_ignore_timestamp($this->ignoreTimestamp);
	 $cloned->set_always_checksum($this->alwaysChecksum);
	 $cloned->set_check_size_only($this->checkSizeOnly);
	 $cloned->set_modify_window($this->modifyWindow);
	 $cloned->set_exclude_pattern($this->excludePattern);
	 $cloned->set_include_pattern($this->includePattern);
	 $cloned->set_delete_non_existing($this->deleteNonExisting);
	 $cloned->set_delete_excluded($this->deleteExcluded);
	 $cloned->set_delete_after($this->deleteAfter);
	 $cloned->set_keep_partial($this->keepPartial);
	 $cloned->set_retain_symlinks($this->retainSymlinks);
	 $cloned->set_copy_link_referents($this->copyLinkReferents);
	 $cloned->set_copy_unsafe_links($this->copyUnsafeLinks);
	 $cloned->set_copy_safe_links($this->copySafeLinks);
	 $cloned->set_preserve_permissions($this->preservePermissions);
	 $cloned->set_preserve_owner($this->preserveOwner);
	 $cloned->set_preserve_group($this->preserveGroup);
	 $cloned->set_preserve_devices($this->preserveDevices);
	 $cloned->set_preserve_times($this->preserveTimes);
	 $cloned->set_dont_cross_file_system($this->dontCrossFileSystem);
	 $cloned->set_bw_limit($this->bwLimit);
	 $cloned->set_io_timeout($this->ioTimeout);
	 $cloned->set_print_stats($this->printStats);
	 $cloned->set_progress($this->progress);
	 $cloned->set_verbose_level($this->verboseLevel);
	 $cloned->set_log_file_format($this->logFileFormat);
	 $cloned->set_catch_all($this->catchAll);
	 $cloned->set_directory_contents($this->directoryContents);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
