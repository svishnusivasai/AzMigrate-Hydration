<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * retentionTimeStamp Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Tue, 27 Nov 2007 14:01:28 +0530	
 * Pattern Version:1.0
 */

class RetentionTimeStampVO
{

/**
 * Global variables 
 */
 
 public $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

public $id;
public $hostId;
public $deviceName;
public $StartTime;
public $EndTime;
public $StartTimeUTC;
public $EndTimeUTC;
public $ruleId;
public $accuracy;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function RetentionTimeStampVO(){

}

/*
	function RetentionTimeStampVO(idIn){
 this->id=$idIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
	$this->ruleId="0";
	$this->accuracy="0";
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_id() {
	return $this->id;
}
function set_id($idIn) { 
	$this->id=$idIn;
}

function isset_id() {
	return isset($this->id);
}


function get_host_id() {
	return $this->hostId;
}
function set_host_id($hostIdIn) { 
	$this->hostId=$hostIdIn;
}

function isset_host_id() {
	return isset($this->hostId);
}


function get_device_name() {
	return $this->deviceName;
}
function set_device_name($deviceNameIn) { 
	$this->deviceName=$deviceNameIn;
}

function isset_device_name() {
	return isset($this->deviceName);
}


function get_start_time() {
	return $this->StartTime;
}
function set_start_time($StartTimeIn) { 
	$this->StartTime=$StartTimeIn;
}

function isset_start_time() {
	return isset($this->StartTime);
}


function get_end_time() {
	return $this->EndTime;
}
function set_end_time($EndTimeIn) { 
	$this->EndTime=$EndTimeIn;
}

function isset_end_time() {
	return isset($this->EndTime);
}


function get_start_time_u_t_c() {
	return $this->StartTimeUTC;
}
function set_start_time_u_t_c($StartTimeUTCIn) { 
	$this->StartTimeUTC=$StartTimeUTCIn;
}

function isset_start_time_u_t_c() {
	return isset($this->StartTimeUTC);
}


function get_end_time_u_t_c() {
	return $this->EndTimeUTC;
}
function set_end_time_u_t_c($EndTimeUTCIn) { 
	$this->EndTimeUTC=$EndTimeUTCIn;
}

function isset_end_time_u_t_c() {
	return isset($this->EndTimeUTC);
}


function get_rule_id() {
	return $this->ruleId;
}
function set_rule_id($ruleIdIn) { 
	$this->ruleId=$ruleIdIn;
}

function isset_rule_id() {
	return isset($this->ruleId);
}


function get_accuracy() {
	return $this->accuracy;
}
function set_accuracy($accuracyIn) { 
	$this->accuracy=$accuracyIn;
}

function isset_accuracy() {
	return isset($this->accuracy);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($idIn,$hostIdIn,$deviceNameIn,$StartTimeIn,$EndTimeIn,$StartTimeUTCIn,$EndTimeUTCIn,$ruleIdIn,$accuracyIn){
	$this->id=$idIn;
	$this->hostId=$hostIdIn;
	$this->deviceName=$deviceNameIn;
	$this->StartTime=$StartTimeIn;
	$this->EndTime=$EndTimeIn;
	$this->StartTimeUTC=$StartTimeUTCIn;
	$this->EndTimeUTC=$EndTimeUTCIn;
	$this->ruleId=$ruleIdIn;
	$this->accuracy=$accuracyIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->id=$ary["id"];
	$this->hostId=$ary["hostId"];
	$this->deviceName=$ary["deviceName"];
	$this->StartTime=$ary["StartTime"];
	$this->EndTime=$ary["EndTime"];
	$this->StartTimeUTC=$ary["StartTimeUTC"];
	$this->EndTimeUTC=$ary["EndTimeUTC"];
	$this->ruleId=$ary["ruleId"];
	$this->accuracy=$ary["accuracy"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["id"]=$this->id;
		$oAry["hostId"]=$this->hostId;
		$oAry["deviceName"]=$this->deviceName;
		$oAry["StartTime"]=$this->StartTime;
		$oAry["EndTime"]=$this->EndTime;
		$oAry["StartTimeUTC"]=$this->StartTimeUTC;
		$oAry["EndTimeUTC"]=$this->EndTimeUTC;
		$oAry["ruleId"]=$this->ruleId;
		$oAry["accuracy"]=$this->accuracy;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_id() != $this->id) {
		return(false);
	}
	if ($valueObject->get_host_id() != $this->hostId) {
		return(false);
	}
	if ($valueObject->get_device_name() != $this->deviceName) {
		return(false);
	}
	if ($valueObject->get_start_time() != $this->StartTime) {
		return(false);
	}
	if ($valueObject->get_end_time() != $this->EndTime) {
		return(false);
	}
	if ($valueObject->get_start_time_u_t_c() != $this->StartTimeUTC) {
		return(false);
	}
	if ($valueObject->get_end_time_u_t_c() != $this->EndTimeUTC) {
		return(false);
	}
	if ($valueObject->get_rule_id() != $this->ruleId) {
		return(false);
	}
	if ($valueObject->get_accuracy() != $this->accuracy) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass RetentionTimeStampVO, mapping to table retentionTimeStamp\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."id = ".$this->id."\n";
	$out = $out."hostId = ".$this->hostId."\n";
	$out = $out."deviceName = ".$this->deviceName."\n";
	$out = $out."StartTime = ".$this->StartTime."\n";
	$out = $out."EndTime = ".$this->EndTime."\n";
	$out = $out."StartTimeUTC = ".$this->StartTimeUTC."\n";
	$out = $out."EndTimeUTC = ".$this->EndTimeUTC."\n";
	$out = $out."ruleId = ".$this->ruleId."\n";
	$out = $out."accuracy = ".$this->accuracy."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new RetentionTimeStampVO();
	
	 $cloned->set_id($this->id);
	 $cloned->set_host_id($this->hostId);
	 $cloned->set_device_name($this->deviceName);
	 $cloned->set_start_time($this->StartTime);
	 $cloned->set_end_time($this->EndTime);
	 $cloned->set_start_time_u_t_c($this->StartTimeUTC);
	 $cloned->set_end_time_u_t_c($this->EndTimeUTC);
	 $cloned->set_rule_id($this->ruleId);
	 $cloned->set_accuracy($this->accuracy);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
