<?php
/**
 * This sourcecode has been generated by InMage Source Code Generator version 1.0
 * The usage of generated code is restricted to InMage Systems Inc.
 *
 * sanITNexus Value Object[VO]
 * This class is value object representing database table host
 * This class is needs to be used with associated Dao object
 * Generated Date:	Fri, 18 Apr 2008 18:20:56 +0530	
 * Pattern Version:1.0
 */

class SanITNexusVO
{

/**
 * Global variables 
 */
 
 var $ary;
 
 
 
/** 
 * Persistent Instance variables. This data is directly 
 * mapped to the columns of database table.
 */

var $sanInitiatorPortWwn;
var $sanTargetPortWwn;
var $fabricId;
var $switchAgentId;
var $rescanFlag;
var $deleteFlag;
var $frPolicy;
var $state;

/** 
 * Constructors. Code generator generates two constructors by default.
 * The first one takes no arguments and provides the most simple
 * way to create object instance. The another one takes one
 * argument, which is the primary key of the corresponding table.
 */

function SanITNexusVO(){

}

/*
	function SanITNexusVO(fabricIdIn,sanInitiatorPortWwnIn,sanTargetPortWwnIn){
 this->fabricId=$fabricIdIn;
 this->sanInitiatorPortWwn=$sanInitiatorPortWwnIn;
 this->sanTargetPortWwn=$sanTargetPortWwnIn;
}
*/

/** 
 * Initializes the variables with database specific 
 * defaults.
 */
 function initialize(){
 
 }
 
/** 
 * Get and Set methods for persistent variables. 
 */

function get_san_initiator_port_wwn() {
	return $this->sanInitiatorPortWwn;
}
function set_san_initiator_port_wwn($sanInitiatorPortWwnIn) { 
	$this->sanInitiatorPortWwn=$sanInitiatorPortWwnIn;
}

function isset_san_initiator_port_wwn() {
	return isset($this->sanInitiatorPortWwn);
}


function get_san_target_port_wwn() {
	return $this->sanTargetPortWwn;
}
function set_san_target_port_wwn($sanTargetPortWwnIn) { 
	$this->sanTargetPortWwn=$sanTargetPortWwnIn;
}

function isset_san_target_port_wwn() {
	return isset($this->sanTargetPortWwn);
}


function get_fabric_id() {
	return $this->fabricId;
}
function set_fabric_id($fabricIdIn) { 
	$this->fabricId=$fabricIdIn;
}

function isset_fabric_id() {
	return isset($this->fabricId);
}


function get_switch_agent_id() {
	return $this->switchAgentId;
}
function set_switch_agent_id($switchAgentIdIn) { 
	$this->switchAgentId=$switchAgentIdIn;
}

function isset_switch_agent_id() {
	return isset($this->switchAgentId);
}


function get_rescan_flag() {
	return $this->rescanFlag;
}
function set_rescan_flag($rescanFlagIn) { 
	$this->rescanFlag=$rescanFlagIn;
}

function isset_rescan_flag() {
	return isset($this->rescanFlag);
}


function get_delete_flag() {
	return $this->deleteFlag;
}
function set_delete_flag($deleteFlagIn) { 
	$this->deleteFlag=$deleteFlagIn;
}

function isset_delete_flag() {
	return isset($this->deleteFlag);
}


function get_fr_policy() {
	return $this->frPolicy;
}
function set_fr_policy($frPolicyIn) { 
	$this->frPolicy=$frPolicyIn;
}

function isset_fr_policy() {
	return isset($this->frPolicy);
}


function get_state() {
	return $this->state;
}
function set_state($stateIn) { 
	$this->state=$stateIn;
}

function isset_state() {
	return isset($this->state);
}


/** 
 * setAll allows to set all persistent variables in one method call.
 * This is useful, when all data is available and it is needed to 
 * set the initial state of this object. Note that this method will
 * directly modify instance variales, without going trough the 
 * individual set-methods.
 */
function setAll($sanInitiatorPortWwnIn,$sanTargetPortWwnIn,$fabricIdIn,$switchAgentIdIn,$rescanFlagIn,$deleteFlagIn,$frPolicyIn,$stateIn){
	$this->sanInitiatorPortWwn=$sanInitiatorPortWwnIn;
	$this->sanTargetPortWwn=$sanTargetPortWwnIn;
	$this->fabricId=$fabricIdIn;
	$this->switchAgentId=$switchAgentIdIn;
	$this->rescanFlag=$rescanFlagIn;
	$this->deleteFlag=$deleteFlagIn;
	$this->frPolicy=$frPolicyIn;
	$this->state=$stateIn;
}

/** 
 * setAry allows copy the contents of an associative array 
 * to the member variables
 */
function setAry($ary){ 
	$this->ary=$ary;
	$this->sanInitiatorPortWwn=$ary["sanInitiatorPortWwn"];
	$this->sanTargetPortWwn=$ary["sanTargetPortWwn"];
	$this->fabricId=$ary["fabricId"];
	$this->switchAgentId=$ary["switchAgentId"];
	$this->rescanFlag=$ary["rescanFlag"];
	$this->deleteFlag=$ary["deleteFlag"];
	$this->frPolicy=$ary["frPolicy"];
	$this->state=$ary["state"];
}

/** 
 * returns an associative array representing the object
 * if the object values are loaded as result of DB operation, then the array
 * return would equivalent of the row returned DB resultset 
 */
function getAry(){ 
	$oAry = array();
	if (isset($this->ary))
	{
		$oAry = $this->ary;
	}
	else
	{
		$oAry["sanInitiatorPortWwn"]=$this->sanInitiatorPortWwn;
		$oAry["sanTargetPortWwn"]=$this->sanTargetPortWwn;
		$oAry["fabricId"]=$this->fabricId;
		$oAry["switchAgentId"]=$this->switchAgentId;
		$oAry["rescanFlag"]=$this->rescanFlag;
		$oAry["deleteFlag"]=$this->deleteFlag;
		$oAry["frPolicy"]=$this->frPolicy;
		$oAry["state"]=$this->state;
	}
	return $oAry;
} 

 /** 
  * hasEqualMapping-method will compare two Host instances
  * and return true if they contain same values in all persistent instance 
  * variables. If hasEqualMapping returns true, it does not mean the objects
  * are the same instance. However it does mean that in that moment, they 
  * are mapped to the same row in database.
  */
function hasEqualMapping($valueObject){
	if ($valueObject->get_san_initiator_port_wwn() != $this->sanInitiatorPortWwn) {
		return(false);
	}
	if ($valueObject->get_san_target_port_wwn() != $this->sanTargetPortWwn) {
		return(false);
	}
	if ($valueObject->get_fabric_id() != $this->fabricId) {
		return(false);
	}
	if ($valueObject->get_switch_agent_id() != $this->switchAgentId) {
		return(false);
	}
	if ($valueObject->get_rescan_flag() != $this->rescanFlag) {
		return(false);
	}
	if ($valueObject->get_delete_flag() != $this->deleteFlag) {
		return(false);
	}
	if ($valueObject->get_fr_policy() != $this->frPolicy) {
		return(false);
	}
	if ($valueObject->get_state() != $this->state) {
		return(false);
	}
    return true;
 }
 
/**
 * toString will return String object representing the state of this 
 * valueObject. This is useful during application development, and 
 * possibly when application is writing object states in textlog.
 */
function toString() {
	$out = $this->get_codegen_version();
	$out = $out."\nclass SanITNexusVO, mapping to table sanITNexus\n";
	$out = $out."Persistent attributes: \n";
	$out = $out."sanInitiatorPortWwn = ".$this->sanInitiatorPortWwn."\n";
	$out = $out."sanTargetPortWwn = ".$this->sanTargetPortWwn."\n";
	$out = $out."fabricId = ".$this->fabricId."\n";
	$out = $out."switchAgentId = ".$this->switchAgentId."\n";
	$out = $out."rescanFlag = ".$this->rescanFlag."\n";
	$out = $out."deleteFlag = ".$this->deleteFlag."\n";
	$out = $out."frPolicy = ".$this->frPolicy."\n";
	$out = $out."state = ".$this->state."\n";
	return $out;
}

/**
 * Clone will return identical deep copy of this valueObject.
 * Here, the retuned cloned object will have all its attributes cloned
 */
function __clone() {
	$cloned = new SanITNexusVO();
	
	 $cloned->set_san_initiator_port_wwn($this->sanInitiatorPortWwn);
	 $cloned->set_san_target_port_wwn($this->sanTargetPortWwn);
	 $cloned->set_fabric_id($this->fabricId);
	 $cloned->set_switch_agent_id($this->switchAgentId);
	 $cloned->set_rescan_flag($this->rescanFlag);
	 $cloned->set_delete_flag($this->deleteFlag);
	 $cloned->set_fr_policy($this->frPolicy);
	 $cloned->set_state($this->state);
	
	return $cloned;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPVO-1.7";
 }

}
?>
