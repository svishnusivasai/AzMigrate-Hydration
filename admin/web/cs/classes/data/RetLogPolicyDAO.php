<?php
/**
  * This sourcecode has been generated by InMage Source Code Generator version 1.0
  * The usage of generated code is restricted to InMage Systems Inc.
  *
  * retLogPolicy Data Access Object[DAO]
  * This class contains all database handling that is needed to 
  * permanently store and retrieve retLogPolicy object instances. 
  * Generated Date:	Tue, 27 Nov 2007 14:01:28 +0530	
  * Pattern Version:1.0
  */
class RetLogPolicyDAO
{

/**
 * createValueObject-method. This method is used when the Dao class needs
 * to create new value object instance. The reason why this method exists
 * is that sometimes the programmer may want to extend also the valueObject
 * and then this method can be overrided to return extended valueObject.
 * NOTE: If you extend the valueObject class, make sure to override the
 * clone() method in it!
 */
function createValueObject() {
	return new RetLogPolicyVO();
 }

/**
 * getObject-method. This will create and load valueObject contents from database 
 * using given Primary-Key as identifier. This method is just a convenience method 
 * for the real load-method which accepts the valueObject as a parameter. Returned
 * valueObject will be created using the createValueObject() method.
 */
function getObject($conn,$retId) {
	$valueObject = $this->createValueObject();
	$valueObject->set_ret_id($retId);
	$this->findByPrimaryKey($conn,$valueObject);
	return $valueObject;
}

/**
 * findbyPrimaryKey-method. This will load valueObject contents from database using
 * Primary-Key as identifier. Upper layer should use this so that valueObject
 * instance is created and only primary-key should be specified. Then call
 * this method to complete other persistent information. This method will
 * overwrite all other fields except primary-key and possible runtime variables.
 * If load can not find matching row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be loaded.
 *                     Primary-key field must be set for this to work properly.
 */
function findByPrimaryKey($conn, $valueObject) {

	if (!$valueObject->get_ret_id()) {
    	//print "Can not select without Primary-Key!";
		return false;
	}

	$sql = "SELECT * FROM retLogPolicy WHERE (retId = '".$valueObject->get_ret_id()."') "; 
	if ($this->singleQuery($conn, $sql, $valueObject)){
    	return true;
    }
    else{
    	return false;
	}
}

/**
 * findAll-method. This will read all contents from database table and
 * build an Vector containing valueObjects. Please note, that this method
 * will consume huge amounts of resources if table has lot's of rows. 
 * This should only be used when target tables have only small amounts
 * of data.
 *
 * @param conn         This method requires working database connection.
 */
function findAll($conn) {
	
	$sql = "SELECT * FROM retLogPolicy ORDER BY retId ASC ";
	$searchResults = $this->listQuery($conn, $sql);
	return $searchResults;
}

/**
 * create-method. This will create new row in database according to supplied
 * valueObject contents. Make sure that values for all NOT NULL columns are
 * correctly specified. Also, if this table does not use automatic surrogate-keys
 * the primary-key must be specified. After INSERT command this method will 
 * read the generated primary-key back to valueObject if automatic surrogate-keys
 * were used. 
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be created.
 *                     If automatic surrogate-keys are not used the Primary-key 
 *                     field must be set for this to work properly.
 */
function create($conn, $valueObject) {
	 $count = 0;
     $sql1 = "INSERT INTO retLogPolicy(";
     $sql3 = ") VALUES ("; 
	 
	 if ($valueObject->isset_ret_id())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."retId";
 	    $sql4 = $sql4."'".$valueObject->get_ret_id()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ruleid())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ruleid";
 	    $sql4 = $sql4."'".$valueObject->get_ruleid()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_log_type_stored())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."logTypeStored";
 	    $sql4 = $sql4."'".$valueObject->get_log_type_stored()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ret_policy_type())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."retPolicyType";
 	    $sql4 = $sql4."'".$valueObject->get_ret_policy_type()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ret_sizeinbytes())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."retSizeinbytes";
 	    $sql4 = $sql4."'".$valueObject->get_ret_sizeinbytes()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_metafilepath())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."metafilepath";
 	    $sql4 = $sql4."'".$valueObject->get_metafilepath()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_logdatadir())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."logdatadir";
 	    $sql4 = $sql4."'".$valueObject->get_logdatadir()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ret_status())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."retStatus";
 	    $sql4 = $sql4."'".$valueObject->get_ret_status()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_curr_logsize())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."currLogsize";
 	    $sql4 = $sql4."'".$valueObject->get_curr_logsize()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_created_date())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."createdDate";
 	    $sql4 = $sql4."'".$valueObject->get_created_date()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_modified_date())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."modifiedDate";
 	    $sql4 = $sql4."'".$valueObject->get_modified_date()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_deleted())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."deleted";
 	    $sql4 = $sql4."'".$valueObject->get_deleted()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ret_state())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."retState";
 	    $sql4 = $sql4."'".$valueObject->get_ret_state()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_timebased_flag())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."timebasedFlag";
 	    $sql4 = $sql4."'".$valueObject->get_timebased_flag()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ret_time_interval())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."retTimeInterval";
 	    $sql4 = $sql4."'".$valueObject->get_ret_time_interval()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_type_of_policy())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."type_of_policy";
 	    $sql4 = $sql4."'".$valueObject->get_type_of_policy()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ret_logupto_days())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ret_logupto_days";
 	    $sql4 = $sql4."'".$valueObject->get_ret_logupto_days()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_ret_logupto_hrs())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."ret_logupto_hrs";
 	    $sql4 = $sql4."'".$valueObject->get_ret_logupto_hrs()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_edit_path_flag())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."editPathFlag";
 	    $sql4 = $sql4."'".$valueObject->get_edit_path_flag()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_diskspacethreshold())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."diskspacethreshold";
 	    $sql4 = $sql4."'".$valueObject->get_diskspacethreshold()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_logsizethreshold())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."logsizethreshold";
 	    $sql4 = $sql4."'".$valueObject->get_logsizethreshold()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_log_device_name())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."log_device_name";
 	    $sql4 = $sql4."'".$valueObject->get_log_device_name()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_temp_logdata_dir())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."temp_logdata_dir";
 	    $sql4 = $sql4."'".$valueObject->get_temp_logdata_dir()."'"; 	
 		$count++;
 	 }
	 
	 if ($valueObject->isset_log_pruning_policy())
 	 {
 	  	if($count>0)
		{
			$sql2 = $sql2 . ",";
			$sql4 = $sql4 . ",";
		}
 	    $sql2 = $sql2."logPruningPolicy";
 	    $sql4 = $sql4."'".$valueObject->get_log_pruning_policy()."'"; 	
 		$count++;
 	 }
	 
	$sql = $sql1 . $sql2. $sql3. $sql4.")";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * update-method. This method will save the current state of valueObject to database.
 * Save can not be used to create new instances in database, so upper layer must
 * make sure that the primary-key is correctly specified. Primary-key will indicate
 * which instance is going to be updated in database. If save can not find matching 
 * row, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be saved.
 *                     Primary-key field must be set for this to work properly.
 */
function update($conn, $valueObject) {
	$count = 0;
	$sql = "UPDATE retLogPolicy SET ";
	if ($valueObject->isset_ret_id())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."retId = '".$valueObject->get_ret_id()."'";
		$count++;
	}
	
	if ($valueObject->isset_ruleid())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ruleid = '".$valueObject->get_ruleid()."'";
		$count++;
	}
	
	if ($valueObject->isset_log_type_stored())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."logTypeStored = '".$valueObject->get_log_type_stored()."'";
		$count++;
	}
	
	if ($valueObject->isset_ret_policy_type())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."retPolicyType = '".$valueObject->get_ret_policy_type()."'";
		$count++;
	}
	
	if ($valueObject->isset_ret_sizeinbytes())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."retSizeinbytes = '".$valueObject->get_ret_sizeinbytes()."'";
		$count++;
	}
	
	if ($valueObject->isset_metafilepath())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."metafilepath = '".$valueObject->get_metafilepath()."'";
		$count++;
	}
	
	if ($valueObject->isset_logdatadir())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."logdatadir = '".$valueObject->get_logdatadir()."'";
		$count++;
	}
	
	if ($valueObject->isset_ret_status())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."retStatus = '".$valueObject->get_ret_status()."'";
		$count++;
	}
	
	if ($valueObject->isset_curr_logsize())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."currLogsize = '".$valueObject->get_curr_logsize()."'";
		$count++;
	}
	
	if ($valueObject->isset_created_date())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."createdDate = '".$valueObject->get_created_date()."'";
		$count++;
	}
	
	if ($valueObject->isset_modified_date())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."modifiedDate = '".$valueObject->get_modified_date()."'";
		$count++;
	}
	
	if ($valueObject->isset_deleted())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."deleted = '".$valueObject->get_deleted()."'";
		$count++;
	}
	
	if ($valueObject->isset_ret_state())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."retState = '".$valueObject->get_ret_state()."'";
		$count++;
	}
	
	if ($valueObject->isset_timebased_flag())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."timebasedFlag = '".$valueObject->get_timebased_flag()."'";
		$count++;
	}
	
	if ($valueObject->isset_ret_time_interval())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."retTimeInterval = '".$valueObject->get_ret_time_interval()."'";
		$count++;
	}
	
	if ($valueObject->isset_type_of_policy())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."type_of_policy = '".$valueObject->get_type_of_policy()."'";
		$count++;
	}
	
	if ($valueObject->isset_ret_logupto_days())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ret_logupto_days = '".$valueObject->get_ret_logupto_days()."'";
		$count++;
	}
	
	if ($valueObject->isset_ret_logupto_hrs())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."ret_logupto_hrs = '".$valueObject->get_ret_logupto_hrs()."'";
		$count++;
	}
	
	if ($valueObject->isset_edit_path_flag())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."editPathFlag = '".$valueObject->get_edit_path_flag()."'";
		$count++;
	}
	
	if ($valueObject->isset_diskspacethreshold())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."diskspacethreshold = '".$valueObject->get_diskspacethreshold()."'";
		$count++;
	}
	
	if ($valueObject->isset_logsizethreshold())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."logsizethreshold = '".$valueObject->get_logsizethreshold()."'";
		$count++;
	}
	
	if ($valueObject->isset_log_device_name())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."log_device_name = '".$valueObject->get_log_device_name()."'";
		$count++;
	}
	
	if ($valueObject->isset_temp_logdata_dir())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."temp_logdata_dir = '".$valueObject->get_temp_logdata_dir()."'";
		$count++;
	}
	
	if ($valueObject->isset_log_pruning_policy())
 	{
		if($count>0)
		{
			$sql = $sql . ",";
		}
		$sql = $sql."logPruningPolicy = '".$valueObject->get_log_pruning_policy()."'";
		$count++;
	}
	
	$sql = $sql." WHERE (retId = '".$valueObject->get_ret_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
        //print "PrimaryKey Error when updating DB!";
    	return false;
	}
 	return true;
}

/**
 * delete-method. This method will remove the information from database as identified by
 * by primary-key in supplied valueObject. Once valueObject has been deleted it can not 
 * be restored by calling save. Restoring can only be done using create method but if 
 * database is using automatic surrogate-keys, the resulting object will have different 
 * primary-key than what it was in the deleted object. If delete can not find matching row,
 * NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance to be deleted.
 *                     Primary-key field must be set for this to work properly.
 */
function delete($conn, $valueObject) {
	
	if (!$valueObject->get_ret_id()) {
         //print "Can not delete without Primary-Key!";
         return false;
    }
	$sql = "DELETE FROM retLogPolicy WHERE (retId = '".$valueObject->get_ret_id()."')"; 
	$result = $this->databaseUpdate($conn, $sql);
    if ($result != 1) {
         //print "PrimaryKey Error when updating DB!";
          return false;
    }
 	return true;
}

/**
 * deleteAll-method. This method will remove all information from the table that matches
 * this DAO and ValueObject couple. This should be the most efficient way to clear table.
 * Once deleteAll has been called, no valueObject that has been created before can be 
 * restored by calling save. Restoring can only be done using create method but if database 
 * is using automatic surrogate-keys, the resulting object will have different primary-key 
 * than what it was in the deleted object. (Note, the implementation of this method should
 * be different with different DB backends.)
 *
 * @param conn         This method requires working database connection.
 */
function deleteAll($conn) {
	$sql = "DELETE FROM retLogPolicy";
	$result = $this->databaseUpdate($conn, $sql);
	return true;
}

/**
 * coutAll-method. This method will return the number of all rows from table that matches
 * this Dao. The implementation will simply execute "select count(primarykey) from table".
 * If table is empty, the return value is 0. This method should be used before calling
 * findAll, to make sure table has not too many rows.
 *
 * @param conn         This method requires working database connection.
 */
function countAll($conn) {
	$sql = "SELECT count(*) FROM retLogPolicy";
	$allRows = 0;
	$result = $conn->execute($sql);
    if ($row = $conn->nextRow($result))
    	$allRows = $row[0];
    return $allRows;
}

/** 
 * searchMatching-Method. This method provides searching capability to 
 * get matching valueObjects from database. It works by searching all 
 * objects that match permanent instance variables of given object.
 * Upper layer should use this by setting some parameters in valueObject
 * and then  call searchMatching. The result will be 0-N objects in vector, 
 * all matching those criteria you specified. Those instance-variables that
 * have NULL values are excluded in search-criteria.
 *
 * @param conn         This method requires working database connection.
 * @param valueObject  This parameter contains the class instance where search will be based.
 *                     Primary-key field should not be set.
 */
function searchMatching($conn, $valueObject) {
	$first = true;
    $sql = "SELECT * FROM retLogPolicy WHERE 1=1 ";
	
	if ($valueObject->get_ret_id() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND retId LIKE '".$valueObject->get_ret_id()."%' ";
    }
	
	if ($valueObject->get_ruleid() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ruleid LIKE '".$valueObject->get_ruleid()."%' ";
    }
	
	if ($valueObject->get_log_type_stored() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND logTypeStored LIKE '".$valueObject->get_log_type_stored()."%' ";
    }
	
	if ($valueObject->get_ret_policy_type() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND retPolicyType LIKE '".$valueObject->get_ret_policy_type()."%' ";
    }
	
	if ($valueObject->get_ret_sizeinbytes() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND retSizeinbytes LIKE '".$valueObject->get_ret_sizeinbytes()."%' ";
    }
	
	if ($valueObject->get_metafilepath() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND metafilepath LIKE '".$valueObject->get_metafilepath()."%' ";
    }
	
	if ($valueObject->get_logdatadir() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND logdatadir LIKE '".$valueObject->get_logdatadir()."%' ";
    }
	
	if ($valueObject->get_ret_status() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND retStatus LIKE '".$valueObject->get_ret_status()."%' ";
    }
	
	if ($valueObject->get_curr_logsize() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND currLogsize LIKE '".$valueObject->get_curr_logsize()."%' ";
    }
	
	if ($valueObject->get_created_date() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND createdDate LIKE '".$valueObject->get_created_date()."%' ";
    }
	
	if ($valueObject->get_modified_date() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND modifiedDate LIKE '".$valueObject->get_modified_date()."%' ";
    }
	
	if ($valueObject->get_deleted() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND deleted LIKE '".$valueObject->get_deleted()."%' ";
    }
	
	if ($valueObject->get_ret_state() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND retState LIKE '".$valueObject->get_ret_state()."%' ";
    }
	
	if ($valueObject->get_timebased_flag() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND timebasedFlag LIKE '".$valueObject->get_timebased_flag()."%' ";
    }
	
	if ($valueObject->get_ret_time_interval() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND retTimeInterval LIKE '".$valueObject->get_ret_time_interval()."%' ";
    }
	
	if ($valueObject->get_type_of_policy() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND type_of_policy LIKE '".$valueObject->get_type_of_policy()."%' ";
    }
	
	if ($valueObject->get_ret_logupto_days() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ret_logupto_days LIKE '".$valueObject->get_ret_logupto_days()."%' ";
    }
	
	if ($valueObject->get_ret_logupto_hrs() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND ret_logupto_hrs LIKE '".$valueObject->get_ret_logupto_hrs()."%' ";
    }
	
	if ($valueObject->get_edit_path_flag() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND editPathFlag LIKE '".$valueObject->get_edit_path_flag()."%' ";
    }
	
	if ($valueObject->get_diskspacethreshold() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND diskspacethreshold LIKE '".$valueObject->get_diskspacethreshold()."%' ";
    }
	
	if ($valueObject->get_logsizethreshold() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND logsizethreshold LIKE '".$valueObject->get_logsizethreshold()."%' ";
    }
	
	if ($valueObject->get_log_device_name() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND log_device_name LIKE '".$valueObject->get_log_device_name()."%' ";
    }
	
	if ($valueObject->get_temp_logdata_dir() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND temp_logdata_dir LIKE '".$valueObject->get_temp_logdata_dir()."%' ";
    }
	
	if ($valueObject->get_log_pruning_policy() != "") {
    	if ($first) { $first = false; }
        $sql = $sql."AND logPruningPolicy LIKE '".$valueObject->get_log_pruning_policy()."%' ";
    }
	
	$sql = $sql." ORDER BY ";
	$sql = $sql."retId ASC ";
    // Prevent accidential full table results.
    // Use findAll if all rows must be returned.
    if ($first)
    	return array();

    $searchResults = $this->listQuery($conn, $sql);
    return $searchResults;
}

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return only one row. The resultset will be converted
 * to valueObject. If no rows were found, NotFoundException will be thrown.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 * @param valueObject  Class-instance where resulting data will be stored.
 */
 function singleQuery($conn, $sql, $valueObject) {
 	$result = $conn->execute($sql);
	if ($row = $conn->nextRow($result)) {
		$valueObject->setAry($row);
     } else {
        //print " Object Not Found!";
     	return false;
     }
     return true;
 }

/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. The resultset will be converted
 * to the List of valueObjects. If no rows were found, an empty List will be returned.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQuery($conn, $sql) {
	$searchResults = array();
    $result = $conn->execute($sql);
    while ($row = $conn->nextRow($result)) {
    	$temp = $this->createValueObject();
    	$temp->setAry($row);
        array_push($searchResults, $temp);
	}
	return $searchResults;
}
/**
 * databaseQuery-method. This method is a helper method for internal use. It will execute
 * all database queries that will return multiple rows. However the results will be unstructured
 * i.e. Not formatted as VO Objects 
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
*/
function listQueryResultset($conn,$sql)
{
	$searchResults = array();
    $result = $conn->execute($sql);
	while ($row = $conn->nextRow($result)) {
        array_push($searchResults, $row);
	}
	return $searchResults;
}

/**
 * databaseUpdate-method. This method is a helper method for internal use. It will execute
 * all database handling that will change the information in tables. SELECT queries will
 * not be executed here however. The return value indicates how many rows were affected.
 * This method will also make sure that if cache is used, it will reset when data changes.
 *
 * @param conn         This method requires working database connection.
 * @param stmt         This parameter contains the SQL statement to be excuted.
 */
function databaseUpdate($conn, $sql) {
	$result = $conn->execute($sql);
	return $result;
}

/** 
 * getCodegenVersion will return information about
 * generator which created these sources.
 */
function get_codegen_version() {
    return  "1.0";
 }
/** 
 * getCodegenTemplateVersion will return information about
 * generator which created these sources.
 */
function get_codegen_template_version() {
    return  "PHPDAO-1.9";
 }

}
?>
